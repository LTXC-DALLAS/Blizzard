#include <Test_value.h>

TMFAMILY_CLASS (Test_value)

TM_RETURN Test_value::Execute () {

    TMResultM test_result  = TM_NOTEST;
    TMResultM local_result = TM_NOTEST;
    IntS number_of_tested_pins = Tested_pins.GetNumPins();
    
    // Test and datalog
//    TIDlog.FloatValue (Tested_value, Tested_pins, limits_test_value, use_testware, testware_datatype);
    SV_TYPE limit_type = limits_test_value.GetLowLimit().GetType(); 
    switch (limit_type)
    {
        case SV_INT:
            local_result = TIDlog.IntValue(IntM1D(Tested_value), Tested_pins, limits_test_value, use_testware, testware_datatype);
            break;
        case SV_FLOAT:
            local_result = TIDlog.FloatValue(Tested_value, Tested_pins, limits_test_value, use_testware, testware_datatype);
            break;
        default:
            ERR.ReportError(ERR_GENERIC_WARNING, "Limit type does not work with Test_value method.", limit_type, NO_SITES, UTL_VOID);
            local_result = TM_PARAM_FAIL;
            break;
    }
    test_result = AccumulateResults (test_result, local_result);

    SetResult (test_result);
    return TM_HAS_RESULT;
}

BoolM Test_value::Initialize() {
    BoolM init_status(true);
    return init_status;
}

BoolM Test_value::ParamCheck() {
    StringS error_message;
    BoolM param_check_status(true);      
    return param_check_status;
}

Test_value::Test_value () {
    StringS text_field;

    AddInputParameter(use_testware, "use_testware", "TRUE");
    SetParameterAttribute("use_testware","parameter-group","Base Settings");           
    SetParameterAttribute("use_testware", "tooltip", "Use the testware database.");
 
    AddInputParameter(testware_datatype, "testware_datatype", "TWDataType:TWMinimumData");
    SetParameterAttribute("testware_datatype","parameter-group","Base Settings" );    
    SetParameterAttribute("testware_datatype", "tooltip", "Testware data type.");

    AddInputParameter(Tested_pins, "Tested_pins", "");
    SetParameterAttribute("Tested_pins","parameter-group","Test Settings" );    
    text_field = "Tested_pins - ";
    SetParameterAttribute("Tested_pins", "description", text_field);

    AddInputParameter(Tested_value, "Tested_value", "");
    SetParameterAttribute("Tested_value","parameter-group","Test Settings" );    
    text_field = "Tested_value - ";
    SetParameterAttribute("Tested_value", "description", text_field);

    AddInputParameter(limits_test_value, "limits_test_value");
    SetParameterAttribute("limits_test_value","parameter-group","Limits");  
 }
