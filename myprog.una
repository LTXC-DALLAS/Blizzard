Unison:U0.2:S4.3;
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/BllizarA0.eva                                  */
/* Creation Date  : Tue Jan  3 17:12:31 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

__ExternalRef  {/* --An ExternalRef was here... */}



__TestProg BllizarA0{
	__Comment = "converted with E2U source md5sum=b600b06c0f017fa0f0ca643f007a03db";
	__ParamCheck =  0;
	__OperatorVariable[0] = TIAdapterBoard;
	__OperatorVariable[1] = TIFlow;
	__OperatorVariable[2] = TIBinMap;
	__OperatorVariable[3] = TIFocusCal;
	__OperatorVariable[4] = TIPrintTimings;
	__OperatorVariable[5] = printTWPDL;
	__OperatorVariable[6] = printTWLimits;
	__OperatorVariable[7] = RunAllTests;
	__OperatorVariable[8] = CharacterizeDevice;
	__OperatorVariable[9] = charMem;
	__OperatorVariable[10] = charMemVdd;
	__OperatorVariable[11] = charMemFreq;
	__OperatorVariable[12] = FSearch_Vboxlo;
	__OperatorVariable[13] = VSearch_Vboxlo;
	__OperatorVariable[14] = FSearch_VboxloM;
	__OperatorVariable[15] = VSearch_VboxloM;
	__OperatorVariable[16] = FSearch_VboxloP;
	__OperatorVariable[17] = VSearch_VboxloP;
	__OperatorVariable[18] = FSearch_Vmin;
	__OperatorVariable[19] = VSearch_Vmin;
	__OperatorVariable[20] = FSearch_Vnom;
	__OperatorVariable[21] = VSearch_Vnom;
	__OperatorVariable[22] = FSearch_Vmax;
	__OperatorVariable[23] = VSearch_Vmax;
	__OperatorVariable[24] = FSearch_Vboxhi;
	__OperatorVariable[25] = VSearch_Vboxhi;
	__OperatorVariable[26] = FSearch_VboxhiM;
	__OperatorVariable[27] = VSearch_VboxhiM;
	__OperatorVariable[28] = FSearch_VboxhiP;
	__OperatorVariable[29] = VSearch_VboxhiP;
	__OperatorVariable[30] = FSearch_Vstress;
	__OperatorVariable[31] = VSearch_Vstress;
	__OperatorVariable[32] = FSearch_VEfuseP;
	__OperatorVariable[33] = VSearch_VEfuseP;
	__OperatorVariable[34] = FSearch_VEfuseR;
	__OperatorVariable[35] = VSearch_VEfuseR;
	__OperatorVariable[36] = FSearch_Vburnin;
	__OperatorVariable[37] = VSearch_Vburnin;
	__OperatorVariable[38] = EnaBistDlog;
	__OperatorVariable[39] = EnaSolnDlog;
	__OperatorVariable[40] = EnaReadOnly;
	__OperatorVariable[41] = EnaEfuseDlog;
	__AdapterBoard =  Bllizar_PB1_AdapterBoard;
	__Flow =  Probe_FLOW;
	__PatternMap =  DefaultPatternMap;
	__BinMap =  ATSite_BinMap_Probe;
	__FunctionalFails =  1;
	__LotTypeSummary =  "Lot";
	__ReportSummary =  "Final";
	__SearchPaths {
		"$CUSTOMER_DIR/unison/ltx/methods";
		"$CUSTOMER_DIR/unison/ltx/libraries";
		"$CUSTOMER_DIR/unison/site/methods";
		"$CUSTOMER_DIR/unison/site/libraries";
		"./Libraries/";
		}
}

__AdapterBoard AdapterBoard_0 {
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/externs.evo                                    */
/* Creation Date  : Tue Jan  3 17:13:04 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***********************************************************************/
/***  All test program files                                         ***/
/***********************************************************************/
__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


__ExternalRef  {/* --An ExternalRef was here... */}


//ExternalRef {
//   File = "F021lib_Rev5/flashexterns_771576.evo";
//}
  
/***********************************************************************/
/***  Call to TI standard modules. This is the only reference to     ***/
/***  the standards necessary.                                       ***/
/***********************************************************************/
__ExternalRef {
   __Path = "./stdprogram_U10";
   __File = "TIexterns.uno";
}


                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/BoardChk_flow.evo                              */
/* Creation Date  : Tue Jan  3 17:12:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************************************/
/*** SubFlow BoardChk_SUB_FLOW                                            ***/
/****************************************************************************/
__SubFlow BoardChk_SUB_FLOW {
	__Node  BoardChk_BoardCheck_S_0 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1357";
		__Exec =  BoardChk_BoardCheck_S;
	}
	__Node FlowNode_1 {
		__XCoord = (180,150);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 220;
		__TestID = "1358";
		__PortSelect =  "if(GlobalNotBinned.Meas, 0, 1)";
	}
	__Node  GOOD_UNIT_2 {
		__XCoord = (180,280);
		__InputPosition = 0;
		__TestID = "1359";
		__Exec =  GOOD_UNIT;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  BoardChk_BoardCheck_S_0;
	__PortConnections {
	 BoardChk_BoardCheck_S_0 __Port[0] = FlowNode_1;//To Port = 1;
	FlowNode_1 __Port[0] =  GOOD_UNIT_2;//To Port = 2;
	}
}
/*** END SubFlow BoardChk_SUB_FLOW ***/

/****************************************************************************/
/*** SubFlow BoardChk_BoardCheck_S                                        ***/
/****************************************************************************/
__SubFlow BoardChk_BoardCheck_S {
	__Node  BoardCheck_3 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1360";
		__Calibration = Bllizar_Calibration;
		__Exec =  BoardCheck;
	}
	__Node FlowNode_4 {
		__XCoord = (255,150);
		__InputPosition = 270;
		__TestID = "1361";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  BoardCheck_3;
	__PortConnections {
	 BoardCheck_3 __Port[0] = FlowNode_4;//To Port = 1;
	 BoardCheck_3 __Port[1] = FlowNode_4;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,255,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/DPSE_flow.evo                                  */
/* Creation Date  : Tue Jan  3 17:12:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************************************/
/*** SubFlow DPSE_SUB_FLOW                                                ***/
/****************************************************************************/
__SubFlow DPSE_SUB_FLOW {
	__Node  DPSE_ShrtAndDieID_S_5 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1049";
		__Exec =  DPSE_ShrtAndDieID_S;
	}
	__Node  DPSE_OpenShrt_S_6 {
		__XCoord = (180,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1050";
		__Exec =  DPSE_OpenShrt_S;
	}
	__Node  DPSE_PreStress_S_7 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1051";
		__Exec =  DPSE_PreStress_S;
	}
	__Node  DPSE_PreStressPostRepr_S_8 {
		__XCoord = (440,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1052";
		__Exec =  DPSE_PreStressPostRepr_S;
	}
	__Node  DPSE_PostStressFunc_S_9 {
		__XCoord = (570,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1053";
		__Exec =  DPSE_PostStressFunc_S;
	}
	__Node  DPSE_PostStressSrch_S_10 {
		__XCoord = (700,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1054";
		__Exec =  DPSE_PostStressSrch_S;
	}
	__Node  DPSE_PostStressIddq_S_11 {
		__XCoord = (830,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1055";
		__Exec =  DPSE_PostStressIddq_S;
	}
	__Node  DPSE_AtSpeed_S_12 {
		__XCoord = (960,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1056";
		__Exec =  DPSE_AtSpeed_S;
	}
	__Node  DPSE_Parametrics_S_13 {
		__XCoord = (1090,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1057";
		__Exec =  DPSE_Parametrics_S;
	}
	__Node  DPSE_SupplyShort_S_14 {
		__XCoord = (1220,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1058";
		__Exec =  DPSE_SupplyShort_S;
	}
	__Node  DPSE_CRES_S_15 {
		__XCoord = (1350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1059";
		__Exec =  DPSE_CRES_S;
	}
	__Node FlowNode_16 {
		__XCoord = (1480,150);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 220;
		__TestID = "1060";
		__PortSelect =  "if(GlobalNotBinned.Meas, 0, 1)";
	}
	__Node  GOOD_UNIT_17 {
		__XCoord = (1480,280);
		__InputPosition = 0;
		__TestID = "1061";
		__Exec =  GOOD_UNIT;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_ShrtAndDieID_S_5;
	__PortConnections {
	 DPSE_ShrtAndDieID_S_5 __Port[0] =  DPSE_OpenShrt_S_6;//To Port = 1;
	 DPSE_OpenShrt_S_6 __Port[0] =  DPSE_PreStress_S_7;//To Port = 2;
	 DPSE_PreStress_S_7 __Port[0] =  DPSE_PreStressPostRepr_S_8;//To Port = 3;
	 DPSE_PreStressPostRepr_S_8 __Port[0] =  DPSE_PostStressFunc_S_9;//To Port = 4;
	 DPSE_PostStressFunc_S_9 __Port[0] =  DPSE_PostStressSrch_S_10;//To Port = 5;
	 DPSE_PostStressSrch_S_10 __Port[0] =  DPSE_PostStressIddq_S_11;//To Port = 6;
	 DPSE_PostStressIddq_S_11 __Port[0] =  DPSE_AtSpeed_S_12;//To Port = 7;
	 DPSE_AtSpeed_S_12 __Port[0] =  DPSE_Parametrics_S_13;//To Port = 8;
	 DPSE_Parametrics_S_13 __Port[0] =  DPSE_SupplyShort_S_14;//To Port = 9;
	 DPSE_SupplyShort_S_14 __Port[0] =  DPSE_CRES_S_15;//To Port = 10;
	 DPSE_CRES_S_15 __Port[0] = FlowNode_16;//To Port = 11;
	FlowNode_16 __Port[0] =  GOOD_UNIT_17;//To Port = 12;
	}
}
/*** END SubFlow DPSE_SUB_FLOW ***/

/****************************************************************************/
/*** SubFlow DPSE_ShrtAndDieID_S                                          ***/
/****************************************************************************/
__SubFlow DPSE_ShrtAndDieID_S {
	__Node  SupplyShorts1_18 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1062";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts1;
	}
	__Node  F_OS_SHRT_VDD_19 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "1063";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node  FFDieIDRead_20 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_VEfuseR"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1064";
		__Calibration = Bllizar_Calibration;
		__Exec =  FFDieIDRead;
	}
	__Node  F_FUSE_DIEID_PRE_READ_21 {
		__XCoord = (200,325);
		__InputPosition = 20;
		__TestID = "1065";
		__Exec =  F_FUSE_DIEID_PRE_READ;
	}
	__Node FlowNode_22 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1066";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts1_18;
	__PortConnections {
	 SupplyShorts1_18 __Port[0] =  FFDieIDRead_20;//To Port = 2;
	 SupplyShorts1_18 __Port[1] =  F_OS_SHRT_VDD_19;//To Port = 1;
	 FFDieIDRead_20 __Port[0] = FlowNode_22;//To Port = 4;
	 FFDieIDRead_20 __Port[1] =  F_FUSE_DIEID_PRE_READ_21;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_ShrtAndDieID_S ***/

/****************************************************************************/
/*** SubFlow DPSE_OpenShrt_S                                              ***/
/****************************************************************************/
__SubFlow DPSE_OpenShrt_S {
	__Node  PinOpensTest_23 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 180;
		}
		__Port[3] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1067";
		__Calibration = Bllizar_Calibration;
		__Exec =  PinOpensTest;
	}
	__Node  F_OS_OPEN_24 {
		__XCoord = (100,364);
		__InputPosition = 20;
		__TestID = "1068";
		__Exec =  F_OS_OPEN;
	}
	__Node  F_OS_SHRT_PIN_25 {
		__XCoord = (21,364);
		__InputPosition = 20;
		__TestID = "1069";
		__Exec =  F_OS_SHRT_PIN;
	}
	__Node  F_OS_SHRT_PTPS_26 {
		__XCoord = (-20,295);
		__InputPosition = 20;
		__TestID = "1070";
		__Exec =  F_OS_SHRT_PTPS;
	}
	__Node  AnalogConty_27 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 150;
		}
		__Port[3] {
			__PortPosition = 210;
		}
		__Port[4] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1071";
		__Calibration = Bllizar_Calibration;
		__Exec =  AnalogConty;
	}
	__Node  F_OS_OPEN_ANALOG_28 {
		__XCoord = (388,328);
		__InputPosition = 20;
		__TestID = "1072";
		__Exec =  F_OS_OPEN_ANALOG;
	}
	__Node  F_OS_SHRT_ANALOG_29 {
		__XCoord = (325,355);
		__InputPosition = 20;
		__TestID = "1073";
		__Exec =  F_OS_SHRT_ANALOG;
	}
	__Node  F_OS_OPEN_ANALOG_1_30 {
		__XCoord = (262,328);
		__InputPosition = 20;
		__TestID = "1074";
		__Exec =  F_OS_OPEN_ANALOG_1;
	}
	__Node  F_OS_SHRT_ANALOG_2_31 {
		__XCoord = (235,265);
		__InputPosition = 20;
		__TestID = "1075";
		__Exec =  F_OS_SHRT_ANALOG_2;
	}
	__Node  SupplyOpensTest_32 {
		__XCoord = (625,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1076";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyOpensTest;
	}
	__Node  F_OS_OPEN_VDD_33 {
		__XCoord = (625,355);
		__InputPosition = 20;
		__TestID = "1077";
		__Exec =  F_OS_OPEN_VDD;
	}
	__Node FlowNode_34 {
		__XCoord = (775,150);
		__InputPosition = 270;
		__TestID = "1078";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  PinOpensTest_23;
	__PortConnections {
	 PinOpensTest_23 __Port[0] =  AnalogConty_27;//To Port = 4;
	 PinOpensTest_23 __Port[1] =  F_OS_OPEN_24;//To Port = 1;
	 PinOpensTest_23 __Port[2] =  F_OS_SHRT_PIN_25;//To Port = 2;
	 PinOpensTest_23 __Port[3] =  F_OS_SHRT_PTPS_26;//To Port = 3;
	 AnalogConty_27 __Port[0] =  SupplyOpensTest_32;//To Port = 9;
	 AnalogConty_27 __Port[1] =  F_OS_OPEN_ANALOG_28;//To Port = 5;
	 AnalogConty_27 __Port[2] =  F_OS_SHRT_ANALOG_29;//To Port = 6;
	 AnalogConty_27 __Port[3] =  F_OS_OPEN_ANALOG_1_30;//To Port = 7;
	 AnalogConty_27 __Port[4] =  F_OS_SHRT_ANALOG_2_31;//To Port = 8;
	 SupplyOpensTest_32 __Port[0] = FlowNode_34;//To Port = 11;
	 SupplyOpensTest_32 __Port[1] =  F_OS_OPEN_VDD_33;//To Port = 10;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,775,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_OpenShrt_S ***/

/****************************************************************************/
/*** SubFlow DPSE_SrchVdd_Vmin_Pre1_S                                     ***/
/****************************************************************************/
__SubFlow DPSE_SrchVdd_Vmin_Pre1_S {
	__Node  VminSearchPre1_35 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1079";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1;
	}
	__Node  PreBinFlow_S_36 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1080";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_37 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1081";
		__Exec =  F_FUNC_Vmin;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_1_38 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1082";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_1;
	}
	__Node  PreBinFlow_S_39 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1083";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_40 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1084";
		__Exec =  F_FUNC_Vmin_GROS_100_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_2_41 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1085";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_2;
	}
	__Node  PreBinFlow_S_42 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1086";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_43 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1087";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_3_44 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1088";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_3;
	}
	__Node  PreBinFlow_S_45 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1089";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_46 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1090";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_4_47 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1091";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_4;
	}
	__Node  PreBinFlow_S_48 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1092";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_49 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1093";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_5_50 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1094";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_5;
	}
	__Node  PreBinFlow_S_51 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1095";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_52 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1096";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_6_53 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1097";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_6;
	}
	__Node  PreBinFlow_S_54 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1098";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_55 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1099";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_7_56 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1100";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_7;
	}
	__Node  PreBinFlow_S_57 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1101";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_OTG_100_58 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1102";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_8_59 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1103";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_8;
	}
	__Node  PreBinFlow_S_60 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1104";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_1_61 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1105";
		__Exec =  F_FUNC_Vmin_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_9_62 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1106";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_9;
	}
	__Node  PreBinFlow_S_63 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1107";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_CHG_100_64 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1108";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_65 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "1109";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPre1_35;
	__PortConnections {
	 VminSearchPre1_35 __Port[0] =  VminSearchPre1_1_38;//To Port = 3;
	 VminSearchPre1_35 __Port[1] =  PreBinFlow_S_36;//To Port = 1;
	 PreBinFlow_S_36 __Port[0] =  F_FUNC_Vmin_37;//To Port = 2;
	 F_FUNC_Vmin_37 __Port[0] =  VminSearchPre1_1_38;//To Port = 3;
	 VminSearchPre1_1_38 __Port[0] =  VminSearchPre1_2_41;//To Port = 6;
	 VminSearchPre1_1_38 __Port[1] =  PreBinFlow_S_39;//To Port = 4;
	 PreBinFlow_S_39 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_40;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_40 __Port[0] =  VminSearchPre1_2_41;//To Port = 6;
	 VminSearchPre1_2_41 __Port[0] =  VminSearchPre1_3_44;//To Port = 9;
	 VminSearchPre1_2_41 __Port[1] =  PreBinFlow_S_42;//To Port = 7;
	 PreBinFlow_S_42 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_43;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_43 __Port[0] =  VminSearchPre1_3_44;//To Port = 9;
	 VminSearchPre1_3_44 __Port[0] =  VminSearchPre1_4_47;//To Port = 12;
	 VminSearchPre1_3_44 __Port[1] =  PreBinFlow_S_45;//To Port = 10;
	 PreBinFlow_S_45 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_46;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_46 __Port[0] =  VminSearchPre1_4_47;//To Port = 12;
	 VminSearchPre1_4_47 __Port[0] =  VminSearchPre1_5_50;//To Port = 15;
	 VminSearchPre1_4_47 __Port[1] =  PreBinFlow_S_48;//To Port = 13;
	 PreBinFlow_S_48 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_49;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_49 __Port[0] =  VminSearchPre1_5_50;//To Port = 15;
	 VminSearchPre1_5_50 __Port[0] =  VminSearchPre1_6_53;//To Port = 18;
	 VminSearchPre1_5_50 __Port[1] =  PreBinFlow_S_51;//To Port = 16;
	 PreBinFlow_S_51 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_52;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_52 __Port[0] =  VminSearchPre1_6_53;//To Port = 18;
	 VminSearchPre1_6_53 __Port[0] =  VminSearchPre1_7_56;//To Port = 21;
	 VminSearchPre1_6_53 __Port[1] =  PreBinFlow_S_54;//To Port = 19;
	 PreBinFlow_S_54 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_55;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_55 __Port[0] =  VminSearchPre1_7_56;//To Port = 21;
	 VminSearchPre1_7_56 __Port[0] =  VminSearchPre1_8_59;//To Port = 24;
	 VminSearchPre1_7_56 __Port[1] =  PreBinFlow_S_57;//To Port = 22;
	 PreBinFlow_S_57 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_OTG_100_58;//To Port = 23;
	 F_FUNC_Vmin_ANALOG_USB_OTG_100_58 __Port[0] =  VminSearchPre1_8_59;//To Port = 24;
	 VminSearchPre1_8_59 __Port[0] =  VminSearchPre1_9_62;//To Port = 27;
	 VminSearchPre1_8_59 __Port[1] =  PreBinFlow_S_60;//To Port = 25;
	 PreBinFlow_S_60 __Port[0] =  F_FUNC_Vmin_1_61;//To Port = 26;
	 F_FUNC_Vmin_1_61 __Port[0] =  VminSearchPre1_9_62;//To Port = 27;
	 VminSearchPre1_9_62 __Port[0] = FlowNode_65;//To Port = 30;
	 VminSearchPre1_9_62 __Port[1] =  PreBinFlow_S_63;//To Port = 28;
	 PreBinFlow_S_63 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_CHG_100_64;//To Port = 29;
	 F_FUNC_Vmin_ANALOG_USB_CHG_100_64 __Port[0] = FlowNode_65;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_SrchVdd_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Func_Vmin_Pre1_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_Func_Vmin_Pre1_S {
	__Node  FuncVminPre1_66 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1110";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1;
	}
	__Node  PreBinFlow_S_67 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1111";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_2_68 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1112";
		__Exec =  F_FUNC_Vmin_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_1_69 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1113";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_1;
	}
	__Node  PreBinFlow_S_70 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1114";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_3_71 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1115";
		__Exec =  F_FUNC_Vmin_GROS_100_pre_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_2_72 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1116";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_2;
	}
	__Node  PreBinFlow_S_73 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1117";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_4_74 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1118";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_3_75 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1119";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_3;
	}
	__Node  PreBinFlow_S_76 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1120";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_5_77 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1121";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_4_78 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1122";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_4;
	}
	__Node  PreBinFlow_S_79 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1123";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_6_80 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1124";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_5_81 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1125";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_5;
	}
	__Node  PreBinFlow_S_82 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1126";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_7_83 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1127";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_6_84 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1128";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_6;
	}
	__Node  PreBinFlow_S_85 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1129";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_8_86 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1130";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_7_87 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1131";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_7;
	}
	__Node  PreBinFlow_S_88 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1132";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_10_89 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1133";
		__Exec =  F_FUNC_Vmin_10;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_8_90 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1134";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_8;
	}
	__Node  PreBinFlow_S_91 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1135";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_11_92 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1136";
		__Exec =  F_FUNC_Vmin_11;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_9_93 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1137";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_9;
	}
	__Node  PreBinFlow_S_94 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1138";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_13_95 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1139";
		__Exec =  F_FUNC_Vmin_13;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_96 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "1140";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre1_66;
	__PortConnections {
	 FuncVminPre1_66 __Port[0] =  FuncVminPre1_1_69;//To Port = 3;
	 FuncVminPre1_66 __Port[1] =  PreBinFlow_S_67;//To Port = 1;
	 PreBinFlow_S_67 __Port[0] =  F_FUNC_Vmin_2_68;//To Port = 2;
	 F_FUNC_Vmin_2_68 __Port[0] =  FuncVminPre1_1_69;//To Port = 3;
	 FuncVminPre1_1_69 __Port[0] =  FuncVminPre1_2_72;//To Port = 6;
	 FuncVminPre1_1_69 __Port[1] =  PreBinFlow_S_70;//To Port = 4;
	 PreBinFlow_S_70 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_3_71;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_3_71 __Port[0] =  FuncVminPre1_2_72;//To Port = 6;
	 FuncVminPre1_2_72 __Port[0] =  FuncVminPre1_3_75;//To Port = 9;
	 FuncVminPre1_2_72 __Port[1] =  PreBinFlow_S_73;//To Port = 7;
	 PreBinFlow_S_73 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_4_74;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_4_74 __Port[0] =  FuncVminPre1_3_75;//To Port = 9;
	 FuncVminPre1_3_75 __Port[0] =  FuncVminPre1_4_78;//To Port = 12;
	 FuncVminPre1_3_75 __Port[1] =  PreBinFlow_S_76;//To Port = 10;
	 PreBinFlow_S_76 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_5_77;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_5_77 __Port[0] =  FuncVminPre1_4_78;//To Port = 12;
	 FuncVminPre1_4_78 __Port[0] =  FuncVminPre1_5_81;//To Port = 15;
	 FuncVminPre1_4_78 __Port[1] =  PreBinFlow_S_79;//To Port = 13;
	 PreBinFlow_S_79 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_6_80;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_6_80 __Port[0] =  FuncVminPre1_5_81;//To Port = 15;
	 FuncVminPre1_5_81 __Port[0] =  FuncVminPre1_6_84;//To Port = 18;
	 FuncVminPre1_5_81 __Port[1] =  PreBinFlow_S_82;//To Port = 16;
	 PreBinFlow_S_82 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_7_83;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_7_83 __Port[0] =  FuncVminPre1_6_84;//To Port = 18;
	 FuncVminPre1_6_84 __Port[0] =  FuncVminPre1_7_87;//To Port = 21;
	 FuncVminPre1_6_84 __Port[1] =  PreBinFlow_S_85;//To Port = 19;
	 PreBinFlow_S_85 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_8_86;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_8_86 __Port[0] =  FuncVminPre1_7_87;//To Port = 21;
	 FuncVminPre1_7_87 __Port[0] =  FuncVminPre1_8_90;//To Port = 24;
	 FuncVminPre1_7_87 __Port[1] =  PreBinFlow_S_88;//To Port = 22;
	 PreBinFlow_S_88 __Port[0] =  F_FUNC_Vmin_10_89;//To Port = 23;
	 F_FUNC_Vmin_10_89 __Port[0] =  FuncVminPre1_8_90;//To Port = 24;
	 FuncVminPre1_8_90 __Port[0] =  FuncVminPre1_9_93;//To Port = 27;
	 FuncVminPre1_8_90 __Port[1] =  PreBinFlow_S_91;//To Port = 25;
	 PreBinFlow_S_91 __Port[0] =  F_FUNC_Vmin_11_92;//To Port = 26;
	 F_FUNC_Vmin_11_92 __Port[0] =  FuncVminPre1_9_93;//To Port = 27;
	 FuncVminPre1_9_93 __Port[0] = FlowNode_96;//To Port = 30;
	 FuncVminPre1_9_93 __Port[1] =  PreBinFlow_S_94;//To Port = 28;
	 PreBinFlow_S_94 __Port[0] =  F_FUNC_Vmin_13_95;//To Port = 29;
	 F_FUNC_Vmin_13_95 __Port[0] = FlowNode_96;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Func_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow DPSE_PreStress_S                                             ***/
/****************************************************************************/
__SubFlow DPSE_PreStress_S {
	__Node  DPSE_SrchVdd_Vmin_Pre1_S_97 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1141";
		__Exec =  DPSE_SrchVdd_Vmin_Pre1_S;
	}
	__Node  DPSE_Func_Vmin_Pre1_S_98 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1142";
		__Exec =  DPSE_Func_Vmin_Pre1_S;
	}
	__Node FlowNode_99 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "1143";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_SrchVdd_Vmin_Pre1_S_97;
	__PortConnections {
	 DPSE_SrchVdd_Vmin_Pre1_S_97 __Port[0] =  DPSE_Func_Vmin_Pre1_S_98;//To Port = 1;
	 DPSE_Func_Vmin_Pre1_S_98 __Port[0] = FlowNode_99;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_PreStress_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Func_Vmin_Pre2_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_Func_Vmin_Pre2_S {
	__Node  FuncVminPre2_100 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1144";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2;
	}
	__Node  PreBinFlow_S_101 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1145";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_pre_102 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1146";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre2_1_103 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1147";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2_1;
	}
	__Node  PreBinFlow_S_104 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1148";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_1_pre_105 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1149";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_106 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1150";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre2_100;
	__PortConnections {
	 FuncVminPre2_100 __Port[0] =  FuncVminPre2_1_103;//To Port = 3;
	 FuncVminPre2_100 __Port[1] =  PreBinFlow_S_101;//To Port = 1;
	 PreBinFlow_S_101 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_pre_102;//To Port = 2;
	 F_FUNC_Vmin_BIST_PROD_33_pre_102 __Port[0] =  FuncVminPre2_1_103;//To Port = 3;
	 FuncVminPre2_1_103 __Port[0] = FlowNode_106;//To Port = 6;
	 FuncVminPre2_1_103 __Port[1] =  PreBinFlow_S_104;//To Port = 4;
	 PreBinFlow_S_104 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_1_pre_105;//To Port = 5;
	 F_FUNC_Vmin_BIST_PROD_33_1_pre_105 __Port[0] = FlowNode_106;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Func_Vmin_Pre2_S ***/

/****************************************************************************/
/*** SubFlow DPSE_PreStressPostRepr_S                                     ***/
/****************************************************************************/
__SubFlow DPSE_PreStressPostRepr_S {
	__Node  DPSE_Func_Vmin_Pre2_S_107 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1151";
		__Exec =  DPSE_Func_Vmin_Pre2_S;
	}
	__Node FlowNode_108 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "1152";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_Func_Vmin_Pre2_S_107;
	__PortConnections {
	 DPSE_Func_Vmin_Pre2_S_107 __Port[0] = FlowNode_108;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_PreStressPostRepr_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Func_Vmax_Post_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_Func_Vmax_Post_S {
	__Node  FuncVmaxPost_109 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1153";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost;
	}
	__Node  PreBinFlow_S_110 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1154";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_111 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1155";
		__Exec =  F_FUNC_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_1_112 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1156";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_1;
	}
	__Node  PreBinFlow_S_113 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1157";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_post_114 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1158";
		__Exec =  F_FUNC_Vmax_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_2_115 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1159";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_2;
	}
	__Node  PreBinFlow_S_116 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1160";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_1_post_117 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1161";
		__Exec =  F_FUNC_Vmax_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_3_118 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1162";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_3;
	}
	__Node  PreBinFlow_S_119 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1163";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_2_post_120 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1164";
		__Exec =  F_FUNC_Vmax_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_4_121 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1165";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_4;
	}
	__Node  PreBinFlow_S_122 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1166";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_3_post_123 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1167";
		__Exec =  F_FUNC_Vmax_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_5_124 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1168";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_5;
	}
	__Node  PreBinFlow_S_125 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1169";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_4_post_126 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1170";
		__Exec =  F_FUNC_Vmax_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_6_127 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1171";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_6;
	}
	__Node  PreBinFlow_S_128 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1172";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_166p66_post_129 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1173";
		__Exec =  F_FUNC_Vmax_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_7_130 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1174";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_7;
	}
	__Node  PreBinFlow_S_131 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1175";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_OTG_100_132 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1176";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_8_133 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1177";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_8;
	}
	__Node  PreBinFlow_S_134 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1178";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_post_135 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1179";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_9_136 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1180";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_9;
	}
	__Node  PreBinFlow_S_137 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1181";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_1_138 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1182";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_10_139 {
		__XCoord = (1550,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1183";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_10;
	}
	__Node  PreBinFlow_S_140 {
		__XCoord = (1550,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1184";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_1_141 {
		__XCoord = (1550,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1185";
		__Exec =  F_FUNC_Vmax_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_11_142 {
		__XCoord = (1700,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1186";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_11;
	}
	__Node  PreBinFlow_S_143 {
		__XCoord = (1700,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1187";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_CHG_100_144 {
		__XCoord = (1700,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1188";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_145 {
		__XCoord = (1850,150);
		__InputPosition = 270;
		__TestID = "1189";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVmaxPost_109;
	__PortConnections {
	 FuncVmaxPost_109 __Port[0] =  FuncVmaxPost_1_112;//To Port = 3;
	 FuncVmaxPost_109 __Port[1] =  PreBinFlow_S_110;//To Port = 1;
	 PreBinFlow_S_110 __Port[0] =  F_FUNC_Vmax_111;//To Port = 2;
	 F_FUNC_Vmax_111 __Port[0] =  FuncVmaxPost_1_112;//To Port = 3;
	 FuncVmaxPost_1_112 __Port[0] =  FuncVmaxPost_2_115;//To Port = 6;
	 FuncVmaxPost_1_112 __Port[1] =  PreBinFlow_S_113;//To Port = 4;
	 PreBinFlow_S_113 __Port[0] =  F_FUNC_Vmax_GROS_100_post_114;//To Port = 5;
	 F_FUNC_Vmax_GROS_100_post_114 __Port[0] =  FuncVmaxPost_2_115;//To Port = 6;
	 FuncVmaxPost_2_115 __Port[0] =  FuncVmaxPost_3_118;//To Port = 9;
	 FuncVmaxPost_2_115 __Port[1] =  PreBinFlow_S_116;//To Port = 7;
	 PreBinFlow_S_116 __Port[0] =  F_FUNC_Vmax_GROS_100_1_post_117;//To Port = 8;
	 F_FUNC_Vmax_GROS_100_1_post_117 __Port[0] =  FuncVmaxPost_3_118;//To Port = 9;
	 FuncVmaxPost_3_118 __Port[0] =  FuncVmaxPost_4_121;//To Port = 12;
	 FuncVmaxPost_3_118 __Port[1] =  PreBinFlow_S_119;//To Port = 10;
	 PreBinFlow_S_119 __Port[0] =  F_FUNC_Vmax_GROS_100_2_post_120;//To Port = 11;
	 F_FUNC_Vmax_GROS_100_2_post_120 __Port[0] =  FuncVmaxPost_4_121;//To Port = 12;
	 FuncVmaxPost_4_121 __Port[0] =  FuncVmaxPost_5_124;//To Port = 15;
	 FuncVmaxPost_4_121 __Port[1] =  PreBinFlow_S_122;//To Port = 13;
	 PreBinFlow_S_122 __Port[0] =  F_FUNC_Vmax_GROS_100_3_post_123;//To Port = 14;
	 F_FUNC_Vmax_GROS_100_3_post_123 __Port[0] =  FuncVmaxPost_5_124;//To Port = 15;
	 FuncVmaxPost_5_124 __Port[0] =  FuncVmaxPost_6_127;//To Port = 18;
	 FuncVmaxPost_5_124 __Port[1] =  PreBinFlow_S_125;//To Port = 16;
	 PreBinFlow_S_125 __Port[0] =  F_FUNC_Vmax_GROS_100_4_post_126;//To Port = 17;
	 F_FUNC_Vmax_GROS_100_4_post_126 __Port[0] =  FuncVmaxPost_6_127;//To Port = 18;
	 FuncVmaxPost_6_127 __Port[0] =  FuncVmaxPost_7_130;//To Port = 21;
	 FuncVmaxPost_6_127 __Port[1] =  PreBinFlow_S_128;//To Port = 19;
	 PreBinFlow_S_128 __Port[0] =  F_FUNC_Vmax_GROS_166p66_post_129;//To Port = 20;
	 F_FUNC_Vmax_GROS_166p66_post_129 __Port[0] =  FuncVmaxPost_7_130;//To Port = 21;
	 FuncVmaxPost_7_130 __Port[0] =  FuncVmaxPost_8_133;//To Port = 24;
	 FuncVmaxPost_7_130 __Port[1] =  PreBinFlow_S_131;//To Port = 22;
	 PreBinFlow_S_131 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_OTG_100_132;//To Port = 23;
	 F_FUNC_Vmax_ANALOG_USB_OTG_100_132 __Port[0] =  FuncVmaxPost_8_133;//To Port = 24;
	 FuncVmaxPost_8_133 __Port[0] =  FuncVmaxPost_9_136;//To Port = 27;
	 FuncVmaxPost_8_133 __Port[1] =  PreBinFlow_S_134;//To Port = 25;
	 PreBinFlow_S_134 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_post_135;//To Port = 26;
	 F_FUNC_Vmax_BIST_PROD_33_post_135 __Port[0] =  FuncVmaxPost_9_136;//To Port = 27;
	 FuncVmaxPost_9_136 __Port[0] =  FuncVmaxPost_10_139;//To Port = 30;
	 FuncVmaxPost_9_136 __Port[1] =  PreBinFlow_S_137;//To Port = 28;
	 PreBinFlow_S_137 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_1_138;//To Port = 29;
	 F_FUNC_Vmax_BIST_PROD_33_1_138 __Port[0] =  FuncVmaxPost_10_139;//To Port = 30;
	 FuncVmaxPost_10_139 __Port[0] =  FuncVmaxPost_11_142;//To Port = 33;
	 FuncVmaxPost_10_139 __Port[1] =  PreBinFlow_S_140;//To Port = 31;
	 PreBinFlow_S_140 __Port[0] =  F_FUNC_Vmax_1_141;//To Port = 32;
	 F_FUNC_Vmax_1_141 __Port[0] =  FuncVmaxPost_11_142;//To Port = 33;
	 FuncVmaxPost_11_142 __Port[0] = FlowNode_145;//To Port = 36;
	 FuncVmaxPost_11_142 __Port[1] =  PreBinFlow_S_143;//To Port = 34;
	 PreBinFlow_S_143 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_CHG_100_144;//To Port = 35;
	 F_FUNC_Vmax_ANALOG_USB_CHG_100_144 __Port[0] = FlowNode_145;//To Port = 36;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1850,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Func_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Func_Vmin_Post_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_Func_Vmin_Post_S {
	__Node  FuncVminPost_146 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1190";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost;
	}
	__Node  PreBinFlow_S_147 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1191";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_3_148 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1192";
		__Exec =  F_FUNC_Vmin_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_1_149 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1193";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_1;
	}
	__Node  PreBinFlow_S_150 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1194";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_151 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1195";
		__Exec =  F_FUNC_Vmin_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_2_152 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1196";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_2;
	}
	__Node  PreBinFlow_S_153 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1197";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_154 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1198";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_3_155 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1199";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_3;
	}
	__Node  PreBinFlow_S_156 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1200";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_157 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1201";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_4_158 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1202";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_4;
	}
	__Node  PreBinFlow_S_159 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1203";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_160 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1204";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_5_161 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1205";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_5;
	}
	__Node  PreBinFlow_S_162 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1206";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_163 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1207";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_6_164 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1208";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_6;
	}
	__Node  PreBinFlow_S_165 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1209";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_post_166 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1210";
		__Exec =  F_FUNC_Vmin_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_7_167 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1211";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_7;
	}
	__Node  PreBinFlow_S_168 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1212";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_5_169 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1213";
		__Exec =  F_FUNC_Vmin_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_8_170 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1214";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_8;
	}
	__Node  PreBinFlow_S_171 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1215";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_6_172 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1216";
		__Exec =  F_FUNC_Vmin_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_9_173 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1217";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_9;
	}
	__Node  PreBinFlow_S_174 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1218";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_8_175 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1219";
		__Exec =  F_FUNC_Vmin_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_176 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "1220";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPost_146;
	__PortConnections {
	 FuncVminPost_146 __Port[0] =  FuncVminPost_1_149;//To Port = 3;
	 FuncVminPost_146 __Port[1] =  PreBinFlow_S_147;//To Port = 1;
	 PreBinFlow_S_147 __Port[0] =  F_FUNC_Vmin_3_148;//To Port = 2;
	 F_FUNC_Vmin_3_148 __Port[0] =  FuncVminPost_1_149;//To Port = 3;
	 FuncVminPost_1_149 __Port[0] =  FuncVminPost_2_152;//To Port = 6;
	 FuncVminPost_1_149 __Port[1] =  PreBinFlow_S_150;//To Port = 4;
	 PreBinFlow_S_150 __Port[0] =  F_FUNC_Vmin_GROS_100_post_151;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_151 __Port[0] =  FuncVminPost_2_152;//To Port = 6;
	 FuncVminPost_2_152 __Port[0] =  FuncVminPost_3_155;//To Port = 9;
	 FuncVminPost_2_152 __Port[1] =  PreBinFlow_S_153;//To Port = 7;
	 PreBinFlow_S_153 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_154;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_154 __Port[0] =  FuncVminPost_3_155;//To Port = 9;
	 FuncVminPost_3_155 __Port[0] =  FuncVminPost_4_158;//To Port = 12;
	 FuncVminPost_3_155 __Port[1] =  PreBinFlow_S_156;//To Port = 10;
	 PreBinFlow_S_156 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_157;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_157 __Port[0] =  FuncVminPost_4_158;//To Port = 12;
	 FuncVminPost_4_158 __Port[0] =  FuncVminPost_5_161;//To Port = 15;
	 FuncVminPost_4_158 __Port[1] =  PreBinFlow_S_159;//To Port = 13;
	 PreBinFlow_S_159 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_160;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_160 __Port[0] =  FuncVminPost_5_161;//To Port = 15;
	 FuncVminPost_5_161 __Port[0] =  FuncVminPost_6_164;//To Port = 18;
	 FuncVminPost_5_161 __Port[1] =  PreBinFlow_S_162;//To Port = 16;
	 PreBinFlow_S_162 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_163;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_163 __Port[0] =  FuncVminPost_6_164;//To Port = 18;
	 FuncVminPost_6_164 __Port[0] =  FuncVminPost_7_167;//To Port = 21;
	 FuncVminPost_6_164 __Port[1] =  PreBinFlow_S_165;//To Port = 19;
	 PreBinFlow_S_165 __Port[0] =  F_FUNC_Vmin_GROS_166p66_post_166;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_post_166 __Port[0] =  FuncVminPost_7_167;//To Port = 21;
	 FuncVminPost_7_167 __Port[0] =  FuncVminPost_8_170;//To Port = 24;
	 FuncVminPost_7_167 __Port[1] =  PreBinFlow_S_168;//To Port = 22;
	 PreBinFlow_S_168 __Port[0] =  F_FUNC_Vmin_5_169;//To Port = 23;
	 F_FUNC_Vmin_5_169 __Port[0] =  FuncVminPost_8_170;//To Port = 24;
	 FuncVminPost_8_170 __Port[0] =  FuncVminPost_9_173;//To Port = 27;
	 FuncVminPost_8_170 __Port[1] =  PreBinFlow_S_171;//To Port = 25;
	 PreBinFlow_S_171 __Port[0] =  F_FUNC_Vmin_6_172;//To Port = 26;
	 F_FUNC_Vmin_6_172 __Port[0] =  FuncVminPost_9_173;//To Port = 27;
	 FuncVminPost_9_173 __Port[0] = FlowNode_176;//To Port = 30;
	 FuncVminPost_9_173 __Port[1] =  PreBinFlow_S_174;//To Port = 28;
	 PreBinFlow_S_174 __Port[0] =  F_FUNC_Vmin_8_175;//To Port = 29;
	 F_FUNC_Vmin_8_175 __Port[0] = FlowNode_176;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Func_Vmin_Post_S ***/

/****************************************************************************/
/*** SubFlow DPSE_PostStressFunc_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_PostStressFunc_S {
	__Node  DPSE_Func_Vmax_Post_S_177 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1221";
		__Exec =  DPSE_Func_Vmax_Post_S;
	}
	__Node  DPSE_Func_Vmin_Post_S_178 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1222";
		__Exec =  DPSE_Func_Vmin_Post_S;
	}
	__Node FlowNode_179 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "1223";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_Func_Vmax_Post_S_177;
	__PortConnections {
	 DPSE_Func_Vmax_Post_S_177 __Port[0] =  DPSE_Func_Vmin_Post_S_178;//To Port = 1;
	 DPSE_Func_Vmin_Post_S_178 __Port[0] = FlowNode_179;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_PostStressFunc_S ***/

/****************************************************************************/
/*** SubFlow DPSE_SrchVdd_Post_S                                          ***/
/****************************************************************************/
__SubFlow DPSE_SrchVdd_Post_S {
	__Node  VminSearchPost_180 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1224";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost;
	}
	__Node  PreBinFlow_S_181 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1225";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_4_182 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1226";
		__Exec =  F_FUNC_Vmin_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_1_183 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1227";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_1;
	}
	__Node  PreBinFlow_S_184 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1228";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_5_185 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1229";
		__Exec =  F_FUNC_Vmin_GROS_100_post_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_2_186 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1230";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_2;
	}
	__Node  PreBinFlow_S_187 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1231";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_6_188 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1232";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_3_189 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1233";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_3;
	}
	__Node  PreBinFlow_S_190 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1234";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_7_191 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1235";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_4_192 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1236";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_4;
	}
	__Node  PreBinFlow_S_193 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1237";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_8_194 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1238";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_5_195 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1239";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_5;
	}
	__Node  PreBinFlow_S_196 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1240";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_9_197 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1241";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post_9;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_6_198 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1242";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_6;
	}
	__Node  PreBinFlow_S_199 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1243";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_200 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1244";
		__Exec =  F_FUNC_Vmin_GROS_166p66;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_7_201 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1245";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_7;
	}
	__Node  PreBinFlow_S_202 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1246";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_12_203 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1247";
		__Exec =  F_FUNC_Vmin_12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_8_204 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1248";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_8;
	}
	__Node  PreBinFlow_S_205 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1249";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_14_206 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1250";
		__Exec =  F_FUNC_Vmin_14;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_9_207 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1251";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_9;
	}
	__Node  PreBinFlow_S_208 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1252";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_16_209 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1253";
		__Exec =  F_FUNC_Vmin_16;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_210 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "1254";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPost_180;
	__PortConnections {
	 VminSearchPost_180 __Port[0] =  VminSearchPost_1_183;//To Port = 3;
	 VminSearchPost_180 __Port[1] =  PreBinFlow_S_181;//To Port = 1;
	 PreBinFlow_S_181 __Port[0] =  F_FUNC_Vmin_4_182;//To Port = 2;
	 F_FUNC_Vmin_4_182 __Port[0] =  VminSearchPost_1_183;//To Port = 3;
	 VminSearchPost_1_183 __Port[0] =  VminSearchPost_2_186;//To Port = 6;
	 VminSearchPost_1_183 __Port[1] =  PreBinFlow_S_184;//To Port = 4;
	 PreBinFlow_S_184 __Port[0] =  F_FUNC_Vmin_GROS_100_post_5_185;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_5_185 __Port[0] =  VminSearchPost_2_186;//To Port = 6;
	 VminSearchPost_2_186 __Port[0] =  VminSearchPost_3_189;//To Port = 9;
	 VminSearchPost_2_186 __Port[1] =  PreBinFlow_S_187;//To Port = 7;
	 PreBinFlow_S_187 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_6_188;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_6_188 __Port[0] =  VminSearchPost_3_189;//To Port = 9;
	 VminSearchPost_3_189 __Port[0] =  VminSearchPost_4_192;//To Port = 12;
	 VminSearchPost_3_189 __Port[1] =  PreBinFlow_S_190;//To Port = 10;
	 PreBinFlow_S_190 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_7_191;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_7_191 __Port[0] =  VminSearchPost_4_192;//To Port = 12;
	 VminSearchPost_4_192 __Port[0] =  VminSearchPost_5_195;//To Port = 15;
	 VminSearchPost_4_192 __Port[1] =  PreBinFlow_S_193;//To Port = 13;
	 PreBinFlow_S_193 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_8_194;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_8_194 __Port[0] =  VminSearchPost_5_195;//To Port = 15;
	 VminSearchPost_5_195 __Port[0] =  VminSearchPost_6_198;//To Port = 18;
	 VminSearchPost_5_195 __Port[1] =  PreBinFlow_S_196;//To Port = 16;
	 PreBinFlow_S_196 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_9_197;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_9_197 __Port[0] =  VminSearchPost_6_198;//To Port = 18;
	 VminSearchPost_6_198 __Port[0] =  VminSearchPost_7_201;//To Port = 21;
	 VminSearchPost_6_198 __Port[1] =  PreBinFlow_S_199;//To Port = 19;
	 PreBinFlow_S_199 __Port[0] =  F_FUNC_Vmin_GROS_166p66_200;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_200 __Port[0] =  VminSearchPost_7_201;//To Port = 21;
	 VminSearchPost_7_201 __Port[0] =  VminSearchPost_8_204;//To Port = 24;
	 VminSearchPost_7_201 __Port[1] =  PreBinFlow_S_202;//To Port = 22;
	 PreBinFlow_S_202 __Port[0] =  F_FUNC_Vmin_12_203;//To Port = 23;
	 F_FUNC_Vmin_12_203 __Port[0] =  VminSearchPost_8_204;//To Port = 24;
	 VminSearchPost_8_204 __Port[0] =  VminSearchPost_9_207;//To Port = 27;
	 VminSearchPost_8_204 __Port[1] =  PreBinFlow_S_205;//To Port = 25;
	 PreBinFlow_S_205 __Port[0] =  F_FUNC_Vmin_14_206;//To Port = 26;
	 F_FUNC_Vmin_14_206 __Port[0] =  VminSearchPost_9_207;//To Port = 27;
	 VminSearchPost_9_207 __Port[0] = FlowNode_210;//To Port = 30;
	 VminSearchPost_9_207 __Port[1] =  PreBinFlow_S_208;//To Port = 28;
	 PreBinFlow_S_208 __Port[0] =  F_FUNC_Vmin_16_209;//To Port = 29;
	 F_FUNC_Vmin_16_209 __Port[0] = FlowNode_210;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_SrchVdd_Post_S ***/

/****************************************************************************/
/*** SubFlow DPSE_PostStressSrch_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_PostStressSrch_S {
	__Node  DPSE_SrchVdd_Post_S_211 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1255";
		__Exec =  DPSE_SrchVdd_Post_S;
	}
	__Node FlowNode_212 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "1256";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_SrchVdd_Post_S_211;
	__PortConnections {
	 DPSE_SrchVdd_Post_S_211 __Port[0] = FlowNode_212;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_PostStressSrch_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Iddq_VboxLO_Post_S                                      ***/
/****************************************************************************/
__SubFlow DPSE_Iddq_VboxLO_Post_S {
	__Node  IddqVboxLOPost_213 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1257";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost;
	}
	__Node  PreBinFlow_S_214 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1258";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_215 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1259";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVboxLOPost_1_216 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1260";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost_1;
	}
	__Node  PreBinFlow_S_217 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1261";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_218 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1262";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_219 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1263";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVboxLOPost_213;
	__PortConnections {
	 IddqVboxLOPost_213 __Port[0] =  IddqVboxLOPost_1_216;//To Port = 3;
	 IddqVboxLOPost_213 __Port[1] =  PreBinFlow_S_214;//To Port = 1;
	 PreBinFlow_S_214 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_215;//To Port = 2;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_215 __Port[0] =  IddqVboxLOPost_1_216;//To Port = 3;
	 IddqVboxLOPost_1_216 __Port[0] = FlowNode_219;//To Port = 6;
	 IddqVboxLOPost_1_216 __Port[1] =  PreBinFlow_S_217;//To Port = 4;
	 PreBinFlow_S_217 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_218;//To Port = 5;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_1_218 __Port[0] = FlowNode_219;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Iddq_VboxLO_Post_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Iddq_Vmax_Post_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_Iddq_Vmax_Post_S {
	__Node  IddqVmax_220 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1264";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax;
	}
	__Node  PreBinFlow_S_221 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1265";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM12_222 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1266";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVmax_1_223 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1267";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax_1;
	}
	__Node  PreBinFlow_S_224 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1268";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM411_225 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1269";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_226 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "1270";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVmax_220;
	__PortConnections {
	 IddqVmax_220 __Port[0] =  IddqVmax_1_223;//To Port = 3;
	 IddqVmax_220 __Port[1] =  PreBinFlow_S_221;//To Port = 1;
	 PreBinFlow_S_221 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM12_222;//To Port = 2;
	 F_LEAK_IDDQ_Vmax_VDDS_PM12_222 __Port[0] =  IddqVmax_1_223;//To Port = 3;
	 IddqVmax_1_223 __Port[0] = FlowNode_226;//To Port = 6;
	 IddqVmax_1_223 __Port[1] =  PreBinFlow_S_224;//To Port = 4;
	 PreBinFlow_S_224 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM411_225;//To Port = 5;
	 F_LEAK_IDDQ_Vmax_VDDS_PM411_225 __Port[0] = FlowNode_226;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Iddq_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Iddq_Delta_S                                            ***/
/****************************************************************************/
__SubFlow DPSE_Iddq_Delta_S {
	__Node  IddqDelta_227 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1271";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDelta;
	}
	__Node  PreBinFlow_S_228 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1272";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Delta_229 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1273";
		__Exec =  F_LEAK_IDDQ_Delta;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_230 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "1274";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDelta_227;
	__PortConnections {
	 IddqDelta_227 __Port[0] = FlowNode_230;//To Port = 3;
	 IddqDelta_227 __Port[1] =  PreBinFlow_S_228;//To Port = 1;
	 PreBinFlow_S_228 __Port[0] =  F_LEAK_IDDQ_Delta_229;//To Port = 2;
	 F_LEAK_IDDQ_Delta_229 __Port[0] = FlowNode_230;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Iddq_Delta_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Iddq_Drift_S                                            ***/
/****************************************************************************/
__SubFlow DPSE_Iddq_Drift_S {
	__Node  IddqDrift_231 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1275";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDrift;
	}
	__Node  PreBinFlow_S_232 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1276";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Drift_233 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1277";
		__Exec =  F_LEAK_IDDQ_Drift;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_234 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "1278";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDrift_231;
	__PortConnections {
	 IddqDrift_231 __Port[0] = FlowNode_234;//To Port = 3;
	 IddqDrift_231 __Port[1] =  PreBinFlow_S_232;//To Port = 1;
	 PreBinFlow_S_232 __Port[0] =  F_LEAK_IDDQ_Drift_233;//To Port = 2;
	 F_LEAK_IDDQ_Drift_233 __Port[0] = FlowNode_234;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Iddq_Drift_S ***/

/****************************************************************************/
/*** SubFlow DPSE_PostStressIddq_S                                        ***/
/****************************************************************************/
__SubFlow DPSE_PostStressIddq_S {
	__Node  DPSE_Iddq_VboxLO_Post_S_235 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1279";
		__Exec =  DPSE_Iddq_VboxLO_Post_S;
	}
	__Node  DPSE_Iddq_Vmax_Post_S_236 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1280";
		__Exec =  DPSE_Iddq_Vmax_Post_S;
	}
	__Node  DPSE_Iddq_Delta_S_237 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1281";
		__Exec =  DPSE_Iddq_Delta_S;
	}
	__Node  DPSE_Iddq_Drift_S_238 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1282";
		__Exec =  DPSE_Iddq_Drift_S;
	}
	__Node FlowNode_239 {
		__XCoord = (650,50);
		__InputPosition = 270;
		__TestID = "1283";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_Iddq_VboxLO_Post_S_235;
	__PortConnections {
	 DPSE_Iddq_VboxLO_Post_S_235 __Port[0] = FlowNode_239;//To Port = 4;
	 DPSE_Iddq_Vmax_Post_S_236 __Port[0] = FlowNode_239;//To Port = 4;
	 DPSE_Iddq_Delta_S_237 __Port[0] = FlowNode_239;//To Port = 4;
	 DPSE_Iddq_Drift_S_238 __Port[0] = FlowNode_239;//To Port = 4;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,650,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_PostStressIddq_S ***/

/****************************************************************************/
/*** SubFlow DPSE_AtSpeed_Vmin_S                                          ***/
/****************************************************************************/
__SubFlow DPSE_AtSpeed_Vmin_S {
	__Node  AtSpeed_240 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1284";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_241 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1285";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_242 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1286";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_243 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1287";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_244 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1288";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_1_245 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1289";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_246 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1290";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_247 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1291";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_2_248 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1292";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_249 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1293";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_250 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1294";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_3_251 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1295";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_252 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1296";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_253 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1297";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_4_254 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1298";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_255 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1299";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_256 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1300";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_5_257 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1301";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_258 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "1302";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_240;
	__PortConnections {
	 AtSpeed_240 __Port[0] =  AtSpeed_1_243;//To Port = 3;
	 AtSpeed_240 __Port[1] =  PreBinFlow_S_241;//To Port = 1;
	 PreBinFlow_S_241 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_242;//To Port = 2;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_242 __Port[0] =  AtSpeed_1_243;//To Port = 3;
	 AtSpeed_1_243 __Port[0] =  AtSpeed_2_246;//To Port = 6;
	 AtSpeed_1_243 __Port[1] =  PreBinFlow_S_244;//To Port = 4;
	 PreBinFlow_S_244 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_1_245;//To Port = 5;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_1_245 __Port[0] =  AtSpeed_2_246;//To Port = 6;
	 AtSpeed_2_246 __Port[0] =  AtSpeed_3_249;//To Port = 9;
	 AtSpeed_2_246 __Port[1] =  PreBinFlow_S_247;//To Port = 7;
	 PreBinFlow_S_247 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_2_248;//To Port = 8;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_2_248 __Port[0] =  AtSpeed_3_249;//To Port = 9;
	 AtSpeed_3_249 __Port[0] =  AtSpeed_4_252;//To Port = 12;
	 AtSpeed_3_249 __Port[1] =  PreBinFlow_S_250;//To Port = 10;
	 PreBinFlow_S_250 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_3_251;//To Port = 11;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_3_251 __Port[0] =  AtSpeed_4_252;//To Port = 12;
	 AtSpeed_4_252 __Port[0] =  AtSpeed_5_255;//To Port = 15;
	 AtSpeed_4_252 __Port[1] =  PreBinFlow_S_253;//To Port = 13;
	 PreBinFlow_S_253 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_4_254;//To Port = 14;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_4_254 __Port[0] =  AtSpeed_5_255;//To Port = 15;
	 AtSpeed_5_255 __Port[0] = FlowNode_258;//To Port = 18;
	 AtSpeed_5_255 __Port[1] =  PreBinFlow_S_256;//To Port = 16;
	 PreBinFlow_S_256 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_5_257;//To Port = 17;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_5_257 __Port[0] = FlowNode_258;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_AtSpeed_Vmin_S ***/

/****************************************************************************/
/*** SubFlow DPSE_AtSpeed_Vmax_S                                          ***/
/****************************************************************************/
__SubFlow DPSE_AtSpeed_Vmax_S {
	__Node  AtSpeed_259 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1303";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_260 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1304";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_261 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1305";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_262 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1306";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_263 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1307";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_1_264 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1308";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_265 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1309";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_266 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1310";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_2_267 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1311";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_268 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1312";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_269 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1313";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_3_270 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1314";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_271 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1315";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_272 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1316";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_4_273 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1317";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_274 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1318";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_275 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1319";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_5_276 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1320";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_277 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "1321";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_259;
	__PortConnections {
	 AtSpeed_259 __Port[0] =  AtSpeed_1_262;//To Port = 3;
	 AtSpeed_259 __Port[1] =  PreBinFlow_S_260;//To Port = 1;
	 PreBinFlow_S_260 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_261;//To Port = 2;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_261 __Port[0] =  AtSpeed_1_262;//To Port = 3;
	 AtSpeed_1_262 __Port[0] =  AtSpeed_2_265;//To Port = 6;
	 AtSpeed_1_262 __Port[1] =  PreBinFlow_S_263;//To Port = 4;
	 PreBinFlow_S_263 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_1_264;//To Port = 5;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_1_264 __Port[0] =  AtSpeed_2_265;//To Port = 6;
	 AtSpeed_2_265 __Port[0] =  AtSpeed_3_268;//To Port = 9;
	 AtSpeed_2_265 __Port[1] =  PreBinFlow_S_266;//To Port = 7;
	 PreBinFlow_S_266 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_2_267;//To Port = 8;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_2_267 __Port[0] =  AtSpeed_3_268;//To Port = 9;
	 AtSpeed_3_268 __Port[0] =  AtSpeed_4_271;//To Port = 12;
	 AtSpeed_3_268 __Port[1] =  PreBinFlow_S_269;//To Port = 10;
	 PreBinFlow_S_269 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_3_270;//To Port = 11;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_3_270 __Port[0] =  AtSpeed_4_271;//To Port = 12;
	 AtSpeed_4_271 __Port[0] =  AtSpeed_5_274;//To Port = 15;
	 AtSpeed_4_271 __Port[1] =  PreBinFlow_S_272;//To Port = 13;
	 PreBinFlow_S_272 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_4_273;//To Port = 14;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_4_273 __Port[0] =  AtSpeed_5_274;//To Port = 15;
	 AtSpeed_5_274 __Port[0] = FlowNode_277;//To Port = 18;
	 AtSpeed_5_274 __Port[1] =  PreBinFlow_S_275;//To Port = 16;
	 PreBinFlow_S_275 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_5_276;//To Port = 17;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_5_276 __Port[0] = FlowNode_277;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_AtSpeed_Vmax_S ***/

/****************************************************************************/
/*** SubFlow DPSE_AtSpeed_S                                               ***/
/****************************************************************************/
__SubFlow DPSE_AtSpeed_S {
	__Node  DPSE_AtSpeed_Vmin_S_278 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1322";
		__Exec =  DPSE_AtSpeed_Vmin_S;
	}
	__Node  DPSE_AtSpeed_Vmax_S_279 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1323";
		__Exec =  DPSE_AtSpeed_Vmax_S;
	}
	__Node FlowNode_280 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "1324";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_AtSpeed_Vmin_S_278;
	__PortConnections {
	 DPSE_AtSpeed_Vmin_S_278 __Port[0] =  DPSE_AtSpeed_Vmax_S_279;//To Port = 1;
	 DPSE_AtSpeed_Vmax_S_279 __Port[0] = FlowNode_280;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_AtSpeed_S ***/

/****************************************************************************/
/*** SubFlow DPSE_SpecLevels_Vmin_S                                       ***/
/****************************************************************************/
__SubFlow DPSE_SpecLevels_Vmin_S {
	__Node  SpecLevels_281 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1325";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_282 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1326";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmin_DC_PARA_100_283 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1327";
		__Exec =  F_FUNC_SPEC_Vmin_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmin_284 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1328";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmin;
	}
	__Node  PreBinFlow_S_285 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1329";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmin_PM86_DC_PM04_286 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1330";
		__Exec =  F_PARA_VIO_Vmin_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_287 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1331";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_281;
	__PortConnections {
	 SpecLevels_281 __Port[0] =  VoutVmin_284;//To Port = 3;
	 SpecLevels_281 __Port[1] =  PreBinFlow_S_282;//To Port = 1;
	 PreBinFlow_S_282 __Port[0] =  F_FUNC_SPEC_Vmin_DC_PARA_100_283;//To Port = 2;
	 F_FUNC_SPEC_Vmin_DC_PARA_100_283 __Port[0] =  VoutVmin_284;//To Port = 3;
	 VoutVmin_284 __Port[0] = FlowNode_287;//To Port = 6;
	 VoutVmin_284 __Port[1] =  PreBinFlow_S_285;//To Port = 4;
	 PreBinFlow_S_285 __Port[0] =  F_PARA_VIO_Vmin_PM86_DC_PM04_286;//To Port = 5;
	 F_PARA_VIO_Vmin_PM86_DC_PM04_286 __Port[0] = FlowNode_287;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_SpecLevels_Vmin_S ***/

/****************************************************************************/
/*** SubFlow DPSE_SpecLevels_Vmax_S                                       ***/
/****************************************************************************/
__SubFlow DPSE_SpecLevels_Vmax_S {
	__Node  SpecLevels_288 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1332";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_289 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1333";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmax_DC_PARA_100_290 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1334";
		__Exec =  F_FUNC_SPEC_Vmax_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmax_291 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1335";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmax;
	}
	__Node  PreBinFlow_S_292 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1336";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmax_PM86_DC_PM04_293 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1337";
		__Exec =  F_PARA_VIO_Vmax_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_294 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1338";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_288;
	__PortConnections {
	 SpecLevels_288 __Port[0] =  VoutVmax_291;//To Port = 3;
	 SpecLevels_288 __Port[1] =  PreBinFlow_S_289;//To Port = 1;
	 PreBinFlow_S_289 __Port[0] =  F_FUNC_SPEC_Vmax_DC_PARA_100_290;//To Port = 2;
	 F_FUNC_SPEC_Vmax_DC_PARA_100_290 __Port[0] =  VoutVmax_291;//To Port = 3;
	 VoutVmax_291 __Port[0] = FlowNode_294;//To Port = 6;
	 VoutVmax_291 __Port[1] =  PreBinFlow_S_292;//To Port = 4;
	 PreBinFlow_S_292 __Port[0] =  F_PARA_VIO_Vmax_PM86_DC_PM04_293;//To Port = 5;
	 F_PARA_VIO_Vmax_PM86_DC_PM04_293 __Port[0] = FlowNode_294;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_SpecLevels_Vmax_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Leakage_S                                               ***/
/****************************************************************************/
__SubFlow DPSE_Leakage_S {
	__Node  LeakIIn_295 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1339";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIIn;
	}
	__Node  PreBinFlow_S_296 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1340";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IIN_Vmax_297 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1341";
		__Exec =  F_LEAK_IIN_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  LeakIO_298 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1342";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIO;
	}
	__Node  PreBinFlow_S_299 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1343";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IOZ_Vmax_PM85_300 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1344";
		__Exec =  F_LEAK_IOZ_Vmax_PM85;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_301 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1345";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  LeakIIn_295;
	__PortConnections {
	 LeakIIn_295 __Port[0] =  LeakIO_298;//To Port = 3;
	 LeakIIn_295 __Port[1] =  PreBinFlow_S_296;//To Port = 1;
	 PreBinFlow_S_296 __Port[0] =  F_LEAK_IIN_Vmax_297;//To Port = 2;
	 F_LEAK_IIN_Vmax_297 __Port[0] =  LeakIO_298;//To Port = 3;
	 LeakIO_298 __Port[0] = FlowNode_301;//To Port = 6;
	 LeakIO_298 __Port[1] =  PreBinFlow_S_299;//To Port = 4;
	 PreBinFlow_S_299 __Port[0] =  F_LEAK_IOZ_Vmax_PM85_300;//To Port = 5;
	 F_LEAK_IOZ_Vmax_PM85_300 __Port[0] = FlowNode_301;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Leakage_S ***/

/****************************************************************************/
/*** SubFlow DPSE_Parametrics_S                                           ***/
/****************************************************************************/
__SubFlow DPSE_Parametrics_S {
	__Node  DPSE_SpecLevels_Vmin_S_302 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1346";
		__Exec =  DPSE_SpecLevels_Vmin_S;
	}
	__Node  DPSE_SpecLevels_Vmax_S_303 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1347";
		__Exec =  DPSE_SpecLevels_Vmax_S;
	}
	__Node  DPSE_Leakage_S_304 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1348";
		__Exec =  DPSE_Leakage_S;
	}
	__Node FlowNode_305 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "1349";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DPSE_SpecLevels_Vmin_S_302;
	__PortConnections {
	 DPSE_SpecLevels_Vmin_S_302 __Port[0] =  DPSE_SpecLevels_Vmax_S_303;//To Port = 1;
	 DPSE_SpecLevels_Vmax_S_303 __Port[0] =  DPSE_Leakage_S_304;//To Port = 2;
	 DPSE_Leakage_S_304 __Port[0] = FlowNode_305;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_Parametrics_S ***/

/****************************************************************************/
/*** SubFlow DPSE_SupplyShort_S                                           ***/
/****************************************************************************/
__SubFlow DPSE_SupplyShort_S {
	__Node  SupplyShorts2_306 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1350";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts2;
	}
	__Node  F_OS_SHRT_VDD_307 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "1351";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node FlowNode_308 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "1352";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts2_306;
	__PortConnections {
	 SupplyShorts2_306 __Port[0] = FlowNode_308;//To Port = 2;
	 SupplyShorts2_306 __Port[1] =  F_OS_SHRT_VDD_307;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow DPSE_SupplyShort_S ***/

/****************************************************************************/
/*** SubFlow DPSE_CRES_S                                                  ***/
/****************************************************************************/
__SubFlow DPSE_CRES_S {
	__Node FlowNode_309 {
		__XCoord = (0,50);
		__Port[0] {
			__PortPosition = 90;
		}
		__Port[1] {
			__PortPosition = 175;
		}
		__InputPosition = 220;
		__TestID = "1353";
		__PortSelect =  "if ( fmod( TestProgData.CurSiteSerial, 50 ) = 0, 1, 0)";
	}
	__Node  Cres_310 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1354";
		__Calibration = Bllizar_Calibration;
		__Exec =  Cres;
	}
	__Node  F_OS_CRES_311 {
		__XCoord = (-15,295);
		__InputPosition = 20;
		__TestID = "1355";
		__Exec =  F_OS_CRES;
	}
	__Node FlowNode_312 {
		__XCoord = (255,150);
		__InputPosition = 270;
		__TestID = "1356";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_309;
	__PortConnections {
	FlowNode_309 __Port[0] = FlowNode_312;//To Port = 3;
	FlowNode_309 __Port[1] =  Cres_310;//To Port = 1;
	 Cres_310 __Port[0] = FlowNode_312;//To Port = 3;
	 Cres_310 __Port[1] =  F_OS_CRES_311;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,255,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/Final_flow.evo                                 */
/* Creation Date  : Tue Jan  3 17:12:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************************************/
/*** SubFlow Final_SUB_FLOW                                               ***/
/****************************************************************************/
__SubFlow Final_SUB_FLOW {
	__Node  Final_ShrtAndDieID_S_313 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "452";
		__Exec =  Final_ShrtAndDieID_S;
	}
	__Node  Final_OpenShrt_S_314 {
		__XCoord = (180,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "453";
		__Exec =  Final_OpenShrt_S;
	}
	__Node  Final_PreStress_S_315 {
		__XCoord = (310,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "454";
		__Exec =  Final_PreStress_S;
	}
	__Node  Final_PreStressPostRepr_S_316 {
		__XCoord = (440,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "455";
		__Exec =  Final_PreStressPostRepr_S;
	}
	__Node  Final_PostStressFunc_S_317 {
		__XCoord = (570,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "456";
		__Exec =  Final_PostStressFunc_S;
	}
	__Node  Final_PostStressSrch_S_318 {
		__XCoord = (700,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "457";
		__Exec =  Final_PostStressSrch_S;
	}
	__Node  Final_PostStressIddq_S_319 {
		__XCoord = (830,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "458";
		__Exec =  Final_PostStressIddq_S;
	}
	__Node  Final_AtSpeed_S_320 {
		__XCoord = (960,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "459";
		__Exec =  Final_AtSpeed_S;
	}
	__Node  Final_Parametrics_S_321 {
		__XCoord = (1090,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "460";
		__Exec =  Final_Parametrics_S;
	}
	__Node  Final_SupplyShort_S_322 {
		__XCoord = (1220,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "461";
		__Exec =  Final_SupplyShort_S;
	}
	__Node  Final_CRES_S_323 {
		__XCoord = (1350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "462";
		__Exec =  Final_CRES_S;
	}
	__Node FlowNode_324 {
		__XCoord = (1480,150);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 220;
		__TestID = "463";
		__PortSelect =  "if(GlobalNotBinned.Meas, 0, 1)";
	}
	__Node  GOOD_UNIT_325 {
		__XCoord = (1480,280);
		__InputPosition = 0;
		__TestID = "464";
		__Exec =  GOOD_UNIT;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_ShrtAndDieID_S_313;
	__PortConnections {
	 Final_ShrtAndDieID_S_313 __Port[0] =  Final_OpenShrt_S_314;//To Port = 1;
	 Final_OpenShrt_S_314 __Port[0] =  Final_PreStressPostRepr_S_316;//To Port = 3;
	 Final_PreStress_S_315 __Port[0] =  Final_PreStressPostRepr_S_316;//To Port = 3;
	 Final_PreStressPostRepr_S_316 __Port[0] =  Final_PostStressFunc_S_317;//To Port = 4;
	 Final_PostStressFunc_S_317 __Port[0] =  Final_PostStressIddq_S_319;//To Port = 6;
	 Final_PostStressSrch_S_318 __Port[0] =  Final_PostStressIddq_S_319;//To Port = 6;
	 Final_PostStressIddq_S_319 __Port[0] =  Final_AtSpeed_S_320;//To Port = 7;
	 Final_AtSpeed_S_320 __Port[0] =  Final_Parametrics_S_321;//To Port = 8;
	 Final_Parametrics_S_321 __Port[0] =  Final_SupplyShort_S_322;//To Port = 9;
	 Final_SupplyShort_S_322 __Port[0] =  Final_CRES_S_323;//To Port = 10;
	 Final_CRES_S_323 __Port[0] = FlowNode_324;//To Port = 11;
	FlowNode_324 __Port[0] =  GOOD_UNIT_325;//To Port = 12;
	}
}
/*** END SubFlow Final_SUB_FLOW ***/

/****************************************************************************/
/*** SubFlow Final_ShrtAndDieID_S                                         ***/
/****************************************************************************/
__SubFlow Final_ShrtAndDieID_S {
	__Node  SupplyShorts1_326 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "465";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts1;
	}
	__Node  F_OS_SHRT_VDD_327 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "466";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node  FFDieIDRead_328 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_VEfuseR"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "467";
		__Calibration = Bllizar_Calibration;
		__Exec =  FFDieIDRead;
	}
	__Node  F_FUSE_DIEID_PRE_READ_329 {
		__XCoord = (200,325);
		__InputPosition = 20;
		__TestID = "468";
		__Exec =  F_FUSE_DIEID_PRE_READ;
	}
	__Node FlowNode_330 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "469";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts1_326;
	__PortConnections {
	 SupplyShorts1_326 __Port[0] =  FFDieIDRead_328;//To Port = 2;
	 SupplyShorts1_326 __Port[1] =  F_OS_SHRT_VDD_327;//To Port = 1;
	 FFDieIDRead_328 __Port[0] = FlowNode_330;//To Port = 4;
	 FFDieIDRead_328 __Port[1] =  F_FUSE_DIEID_PRE_READ_329;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_ShrtAndDieID_S ***/

/****************************************************************************/
/*** SubFlow Final_OpenShrt_S                                             ***/
/****************************************************************************/
__SubFlow Final_OpenShrt_S {
	__Node  PinOpensTest_331 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 180;
		}
		__Port[3] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "470";
		__Calibration = Bllizar_Calibration;
		__Exec =  PinOpensTest;
	}
	__Node  F_OS_OPEN_332 {
		__XCoord = (100,364);
		__InputPosition = 20;
		__TestID = "471";
		__Exec =  F_OS_OPEN;
	}
	__Node  F_OS_SHRT_PIN_333 {
		__XCoord = (21,364);
		__InputPosition = 20;
		__TestID = "472";
		__Exec =  F_OS_SHRT_PIN;
	}
	__Node  F_OS_SHRT_PTPS_334 {
		__XCoord = (-20,295);
		__InputPosition = 20;
		__TestID = "473";
		__Exec =  F_OS_SHRT_PTPS;
	}
	__Node  AnalogConty_335 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 150;
		}
		__Port[3] {
			__PortPosition = 210;
		}
		__Port[4] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "474";
		__Calibration = Bllizar_Calibration;
		__Exec =  AnalogConty;
	}
	__Node  F_OS_OPEN_ANALOG_336 {
		__XCoord = (388,328);
		__InputPosition = 20;
		__TestID = "475";
		__Exec =  F_OS_OPEN_ANALOG;
	}
	__Node  F_OS_SHRT_ANALOG_337 {
		__XCoord = (325,355);
		__InputPosition = 20;
		__TestID = "476";
		__Exec =  F_OS_SHRT_ANALOG;
	}
	__Node  F_OS_OPEN_ANALOG_1_338 {
		__XCoord = (262,328);
		__InputPosition = 20;
		__TestID = "477";
		__Exec =  F_OS_OPEN_ANALOG_1;
	}
	__Node  F_OS_SHRT_ANALOG_2_339 {
		__XCoord = (235,265);
		__InputPosition = 20;
		__TestID = "478";
		__Exec =  F_OS_SHRT_ANALOG_2;
	}
	__Node  SupplyOpensTest_340 {
		__XCoord = (625,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "479";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyOpensTest;
	}
	__Node  F_OS_OPEN_VDD_341 {
		__XCoord = (625,355);
		__InputPosition = 20;
		__TestID = "480";
		__Exec =  F_OS_OPEN_VDD;
	}
	__Node FlowNode_342 {
		__XCoord = (775,150);
		__InputPosition = 270;
		__TestID = "481";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  PinOpensTest_331;
	__PortConnections {
	 PinOpensTest_331 __Port[0] =  AnalogConty_335;//To Port = 4;
	 PinOpensTest_331 __Port[1] =  F_OS_OPEN_332;//To Port = 1;
	 PinOpensTest_331 __Port[2] =  F_OS_SHRT_PIN_333;//To Port = 2;
	 PinOpensTest_331 __Port[3] =  F_OS_SHRT_PTPS_334;//To Port = 3;
	 AnalogConty_335 __Port[0] =  SupplyOpensTest_340;//To Port = 9;
	 AnalogConty_335 __Port[1] =  F_OS_OPEN_ANALOG_336;//To Port = 5;
	 AnalogConty_335 __Port[2] =  F_OS_SHRT_ANALOG_337;//To Port = 6;
	 AnalogConty_335 __Port[3] =  F_OS_OPEN_ANALOG_1_338;//To Port = 7;
	 AnalogConty_335 __Port[4] =  F_OS_SHRT_ANALOG_2_339;//To Port = 8;
	 SupplyOpensTest_340 __Port[0] = FlowNode_342;//To Port = 11;
	 SupplyOpensTest_340 __Port[1] =  F_OS_OPEN_VDD_341;//To Port = 10;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,775,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_OpenShrt_S ***/

/****************************************************************************/
/*** SubFlow Final_Func_Vmin_Pre1_S                                       ***/
/****************************************************************************/
__SubFlow Final_Func_Vmin_Pre1_S {
	__Node  FuncVminPre1_343 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "482";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1;
	}
	__Node  PreBinFlow_S_344 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "483";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_345 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "484";
		__Exec =  F_FUNC_Vmin;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_1_346 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "485";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_1;
	}
	__Node  PreBinFlow_S_347 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "486";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_348 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "487";
		__Exec =  F_FUNC_Vmin_GROS_100_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_2_349 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "488";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_2;
	}
	__Node  PreBinFlow_S_350 {
		__XCoord = (350,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "489";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_351 {
		__XCoord = (350,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "490";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_3_352 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "491";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_3;
	}
	__Node  PreBinFlow_S_353 {
		__XCoord = (500,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "492";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_354 {
		__XCoord = (500,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "493";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_4_355 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "494";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_4;
	}
	__Node  PreBinFlow_S_356 {
		__XCoord = (650,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "495";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_357 {
		__XCoord = (650,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "496";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_5_358 {
		__XCoord = (800,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "497";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_5;
	}
	__Node  PreBinFlow_S_359 {
		__XCoord = (800,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "498";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_360 {
		__XCoord = (800,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "499";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_6_361 {
		__XCoord = (950,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "500";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_6;
	}
	__Node  PreBinFlow_S_362 {
		__XCoord = (950,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "501";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_363 {
		__XCoord = (950,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "502";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_7_364 {
		__XCoord = (1100,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "503";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_7;
	}
	__Node  PreBinFlow_S_365 {
		__XCoord = (1100,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "504";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_OTG_100_366 {
		__XCoord = (1100,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "505";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_8_367 {
		__XCoord = (1250,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "506";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_8;
	}
	__Node  PreBinFlow_S_368 {
		__XCoord = (1250,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "507";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_1_369 {
		__XCoord = (1250,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "508";
		__Exec =  F_FUNC_Vmin_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_9_370 {
		__XCoord = (1400,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "509";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_9;
	}
	__Node  PreBinFlow_S_371 {
		__XCoord = (1400,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "510";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_CHG_100_372 {
		__XCoord = (1400,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "511";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_373 {
		__XCoord = (1550,250);
		__InputPosition = 270;
		__TestID = "512";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre1_343;
	__PortConnections {
	 FuncVminPre1_343 __Port[0] =  FuncVminPre1_1_346;//To Port = 3;
	 FuncVminPre1_343 __Port[1] =  PreBinFlow_S_344;//To Port = 1;
	 PreBinFlow_S_344 __Port[0] =  F_FUNC_Vmin_345;//To Port = 2;
	 F_FUNC_Vmin_345 __Port[0] =  FuncVminPre1_1_346;//To Port = 3;
	 FuncVminPre1_1_346 __Port[0] =  FuncVminPre1_2_349;//To Port = 6;
	 FuncVminPre1_1_346 __Port[1] =  PreBinFlow_S_347;//To Port = 4;
	 PreBinFlow_S_347 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_348;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_348 __Port[0] =  FuncVminPre1_2_349;//To Port = 6;
	 FuncVminPre1_2_349 __Port[0] =  FuncVminPre1_3_352;//To Port = 9;
	 FuncVminPre1_2_349 __Port[1] =  PreBinFlow_S_350;//To Port = 7;
	 PreBinFlow_S_350 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_351;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_351 __Port[0] =  FuncVminPre1_3_352;//To Port = 9;
	 FuncVminPre1_3_352 __Port[0] =  FuncVminPre1_4_355;//To Port = 12;
	 FuncVminPre1_3_352 __Port[1] =  PreBinFlow_S_353;//To Port = 10;
	 PreBinFlow_S_353 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_354;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_354 __Port[0] =  FuncVminPre1_4_355;//To Port = 12;
	 FuncVminPre1_4_355 __Port[0] =  FuncVminPre1_5_358;//To Port = 15;
	 FuncVminPre1_4_355 __Port[1] =  PreBinFlow_S_356;//To Port = 13;
	 PreBinFlow_S_356 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_357;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_357 __Port[0] =  FuncVminPre1_5_358;//To Port = 15;
	 FuncVminPre1_5_358 __Port[0] =  FuncVminPre1_6_361;//To Port = 18;
	 FuncVminPre1_5_358 __Port[1] =  PreBinFlow_S_359;//To Port = 16;
	 PreBinFlow_S_359 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_360;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_360 __Port[0] =  FuncVminPre1_6_361;//To Port = 18;
	 FuncVminPre1_6_361 __Port[0] =  FuncVminPre1_7_364;//To Port = 21;
	 FuncVminPre1_6_361 __Port[1] =  PreBinFlow_S_362;//To Port = 19;
	 PreBinFlow_S_362 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_363;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_363 __Port[0] =  FuncVminPre1_7_364;//To Port = 21;
	 FuncVminPre1_7_364 __Port[0] =  FuncVminPre1_8_367;//To Port = 24;
	 FuncVminPre1_7_364 __Port[1] =  PreBinFlow_S_365;//To Port = 22;
	 PreBinFlow_S_365 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_OTG_100_366;//To Port = 23;
	 F_FUNC_Vmin_ANALOG_USB_OTG_100_366 __Port[0] =  FuncVminPre1_8_367;//To Port = 24;
	 FuncVminPre1_8_367 __Port[0] =  FuncVminPre1_9_370;//To Port = 27;
	 FuncVminPre1_8_367 __Port[1] =  PreBinFlow_S_368;//To Port = 25;
	 PreBinFlow_S_368 __Port[0] =  F_FUNC_Vmin_1_369;//To Port = 26;
	 F_FUNC_Vmin_1_369 __Port[0] =  FuncVminPre1_9_370;//To Port = 27;
	 FuncVminPre1_9_370 __Port[0] = FlowNode_373;//To Port = 30;
	 FuncVminPre1_9_370 __Port[1] =  PreBinFlow_S_371;//To Port = 28;
	 PreBinFlow_S_371 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_CHG_100_372;//To Port = 29;
	 F_FUNC_Vmin_ANALOG_USB_CHG_100_372 __Port[0] = FlowNode_373;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Func_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow Final_PreStress_S                                            ***/
/****************************************************************************/
__SubFlow Final_PreStress_S {
	__Node  Final_Func_Vmin_Pre1_S_374 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "513";
		__Exec =  Final_Func_Vmin_Pre1_S;
	}
	__Node FlowNode_375 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "514";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_375;
	__PortConnections {
	 Final_Func_Vmin_Pre1_S_374 __Port[0] = FlowNode_375;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_PreStress_S ***/

/****************************************************************************/
/*** SubFlow Final_Func_Vmin_Pre2_S                                       ***/
/****************************************************************************/
__SubFlow Final_Func_Vmin_Pre2_S {
	__Node  FuncVminPre2_376 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "515";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2;
	}
	__Node  PreBinFlow_S_377 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "516";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_pre_378 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "517";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre2_1_379 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "518";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2_1;
	}
	__Node  PreBinFlow_S_380 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "519";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_1_pre_381 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "520";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_382 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "521";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre2_376;
	__PortConnections {
	 FuncVminPre2_376 __Port[0] =  FuncVminPre2_1_379;//To Port = 3;
	 FuncVminPre2_376 __Port[1] =  PreBinFlow_S_377;//To Port = 1;
	 PreBinFlow_S_377 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_pre_378;//To Port = 2;
	 F_FUNC_Vmin_BIST_PROD_33_pre_378 __Port[0] =  FuncVminPre2_1_379;//To Port = 3;
	 FuncVminPre2_1_379 __Port[0] = FlowNode_382;//To Port = 6;
	 FuncVminPre2_1_379 __Port[1] =  PreBinFlow_S_380;//To Port = 4;
	 PreBinFlow_S_380 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_1_pre_381;//To Port = 5;
	 F_FUNC_Vmin_BIST_PROD_33_1_pre_381 __Port[0] = FlowNode_382;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Func_Vmin_Pre2_S ***/

/****************************************************************************/
/*** SubFlow Final_Func_Vburnin_S                                         ***/
/****************************************************************************/
__SubFlow Final_Func_Vburnin_S {
	__Node  FuncVburnin_383 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_13"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vburnin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "522";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVburnin;
	}
	__Node  PreBinFlow_S_384 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "523";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vburnin_BURNIN_200_pre_385 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "524";
		__Exec =  F_FUNC_Vburnin_BURNIN_200_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_386 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "525";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVburnin_383;
	__PortConnections {
	 FuncVburnin_383 __Port[0] = FlowNode_386;//To Port = 3;
	 FuncVburnin_383 __Port[1] =  PreBinFlow_S_384;//To Port = 1;
	 PreBinFlow_S_384 __Port[0] =  F_FUNC_Vburnin_BURNIN_200_pre_385;//To Port = 2;
	 F_FUNC_Vburnin_BURNIN_200_pre_385 __Port[0] = FlowNode_386;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Func_Vburnin_S ***/

/****************************************************************************/
/*** SubFlow Final_PreStressPostRepr_S                                    ***/
/****************************************************************************/
__SubFlow Final_PreStressPostRepr_S {
	__Node  Final_Func_Vmin_Pre2_S_387 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "526";
		__Exec =  Final_Func_Vmin_Pre2_S;
	}
	__Node  Final_Func_Vburnin_S_388 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "527";
		__Exec =  Final_Func_Vburnin_S;
	}
	__Node FlowNode_389 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "528";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_Func_Vburnin_S_388;
	__PortConnections {
	 Final_Func_Vmin_Pre2_S_387 __Port[0] =  Final_Func_Vburnin_S_388;//To Port = 1;
	 Final_Func_Vburnin_S_388 __Port[0] = FlowNode_389;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_PreStressPostRepr_S ***/

/****************************************************************************/
/*** SubFlow Final_Func_Vmax_Post_S                                       ***/
/****************************************************************************/
__SubFlow Final_Func_Vmax_Post_S {
	__Node  FuncVmaxPost_390 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "529";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost;
	}
	__Node  PreBinFlow_S_391 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "530";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_392 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "531";
		__Exec =  F_FUNC_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_1_393 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "532";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_1;
	}
	__Node  PreBinFlow_S_394 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "533";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_post_395 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "534";
		__Exec =  F_FUNC_Vmax_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_2_396 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "535";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_2;
	}
	__Node  PreBinFlow_S_397 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "536";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_1_post_398 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "537";
		__Exec =  F_FUNC_Vmax_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_3_399 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "538";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_3;
	}
	__Node  PreBinFlow_S_400 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "539";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_2_post_401 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "540";
		__Exec =  F_FUNC_Vmax_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_4_402 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "541";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_4;
	}
	__Node  PreBinFlow_S_403 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "542";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_3_post_404 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "543";
		__Exec =  F_FUNC_Vmax_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_5_405 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "544";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_5;
	}
	__Node  PreBinFlow_S_406 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "545";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_4_post_407 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "546";
		__Exec =  F_FUNC_Vmax_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_6_408 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "547";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_6;
	}
	__Node  PreBinFlow_S_409 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "548";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_166p66_post_410 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "549";
		__Exec =  F_FUNC_Vmax_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_7_411 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "550";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_7;
	}
	__Node  PreBinFlow_S_412 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "551";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_OTG_100_413 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "552";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_8_414 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "553";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_8;
	}
	__Node  PreBinFlow_S_415 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "554";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_post_416 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "555";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_9_417 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "556";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_9;
	}
	__Node  PreBinFlow_S_418 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "557";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_1_419 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "558";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_10_420 {
		__XCoord = (1550,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "559";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_10;
	}
	__Node  PreBinFlow_S_421 {
		__XCoord = (1550,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "560";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_1_422 {
		__XCoord = (1550,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "561";
		__Exec =  F_FUNC_Vmax_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_11_423 {
		__XCoord = (1700,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "562";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_11;
	}
	__Node  PreBinFlow_S_424 {
		__XCoord = (1700,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "563";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_CHG_100_425 {
		__XCoord = (1700,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "564";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_426 {
		__XCoord = (1850,150);
		__InputPosition = 270;
		__TestID = "565";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVmaxPost_390;
	__PortConnections {
	 FuncVmaxPost_390 __Port[0] =  FuncVmaxPost_1_393;//To Port = 3;
	 FuncVmaxPost_390 __Port[1] =  PreBinFlow_S_391;//To Port = 1;
	 PreBinFlow_S_391 __Port[0] =  F_FUNC_Vmax_392;//To Port = 2;
	 F_FUNC_Vmax_392 __Port[0] =  FuncVmaxPost_1_393;//To Port = 3;
	 FuncVmaxPost_1_393 __Port[0] =  FuncVmaxPost_2_396;//To Port = 6;
	 FuncVmaxPost_1_393 __Port[1] =  PreBinFlow_S_394;//To Port = 4;
	 PreBinFlow_S_394 __Port[0] =  F_FUNC_Vmax_GROS_100_post_395;//To Port = 5;
	 F_FUNC_Vmax_GROS_100_post_395 __Port[0] =  FuncVmaxPost_2_396;//To Port = 6;
	 FuncVmaxPost_2_396 __Port[0] =  FuncVmaxPost_3_399;//To Port = 9;
	 FuncVmaxPost_2_396 __Port[1] =  PreBinFlow_S_397;//To Port = 7;
	 PreBinFlow_S_397 __Port[0] =  F_FUNC_Vmax_GROS_100_1_post_398;//To Port = 8;
	 F_FUNC_Vmax_GROS_100_1_post_398 __Port[0] =  FuncVmaxPost_3_399;//To Port = 9;
	 FuncVmaxPost_3_399 __Port[0] =  FuncVmaxPost_4_402;//To Port = 12;
	 FuncVmaxPost_3_399 __Port[1] =  PreBinFlow_S_400;//To Port = 10;
	 PreBinFlow_S_400 __Port[0] =  F_FUNC_Vmax_GROS_100_2_post_401;//To Port = 11;
	 F_FUNC_Vmax_GROS_100_2_post_401 __Port[0] =  FuncVmaxPost_4_402;//To Port = 12;
	 FuncVmaxPost_4_402 __Port[0] =  FuncVmaxPost_5_405;//To Port = 15;
	 FuncVmaxPost_4_402 __Port[1] =  PreBinFlow_S_403;//To Port = 13;
	 PreBinFlow_S_403 __Port[0] =  F_FUNC_Vmax_GROS_100_3_post_404;//To Port = 14;
	 F_FUNC_Vmax_GROS_100_3_post_404 __Port[0] =  FuncVmaxPost_5_405;//To Port = 15;
	 FuncVmaxPost_5_405 __Port[0] =  FuncVmaxPost_6_408;//To Port = 18;
	 FuncVmaxPost_5_405 __Port[1] =  PreBinFlow_S_406;//To Port = 16;
	 PreBinFlow_S_406 __Port[0] =  F_FUNC_Vmax_GROS_100_4_post_407;//To Port = 17;
	 F_FUNC_Vmax_GROS_100_4_post_407 __Port[0] =  FuncVmaxPost_6_408;//To Port = 18;
	 FuncVmaxPost_6_408 __Port[0] =  FuncVmaxPost_7_411;//To Port = 21;
	 FuncVmaxPost_6_408 __Port[1] =  PreBinFlow_S_409;//To Port = 19;
	 PreBinFlow_S_409 __Port[0] =  F_FUNC_Vmax_GROS_166p66_post_410;//To Port = 20;
	 F_FUNC_Vmax_GROS_166p66_post_410 __Port[0] =  FuncVmaxPost_7_411;//To Port = 21;
	 FuncVmaxPost_7_411 __Port[0] =  FuncVmaxPost_8_414;//To Port = 24;
	 FuncVmaxPost_7_411 __Port[1] =  PreBinFlow_S_412;//To Port = 22;
	 PreBinFlow_S_412 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_OTG_100_413;//To Port = 23;
	 F_FUNC_Vmax_ANALOG_USB_OTG_100_413 __Port[0] =  FuncVmaxPost_8_414;//To Port = 24;
	 FuncVmaxPost_8_414 __Port[0] =  FuncVmaxPost_9_417;//To Port = 27;
	 FuncVmaxPost_8_414 __Port[1] =  PreBinFlow_S_415;//To Port = 25;
	 PreBinFlow_S_415 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_post_416;//To Port = 26;
	 F_FUNC_Vmax_BIST_PROD_33_post_416 __Port[0] =  FuncVmaxPost_9_417;//To Port = 27;
	 FuncVmaxPost_9_417 __Port[0] =  FuncVmaxPost_10_420;//To Port = 30;
	 FuncVmaxPost_9_417 __Port[1] =  PreBinFlow_S_418;//To Port = 28;
	 PreBinFlow_S_418 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_1_419;//To Port = 29;
	 F_FUNC_Vmax_BIST_PROD_33_1_419 __Port[0] =  FuncVmaxPost_10_420;//To Port = 30;
	 FuncVmaxPost_10_420 __Port[0] =  FuncVmaxPost_11_423;//To Port = 33;
	 FuncVmaxPost_10_420 __Port[1] =  PreBinFlow_S_421;//To Port = 31;
	 PreBinFlow_S_421 __Port[0] =  F_FUNC_Vmax_1_422;//To Port = 32;
	 F_FUNC_Vmax_1_422 __Port[0] =  FuncVmaxPost_11_423;//To Port = 33;
	 FuncVmaxPost_11_423 __Port[0] = FlowNode_426;//To Port = 36;
	 FuncVmaxPost_11_423 __Port[1] =  PreBinFlow_S_424;//To Port = 34;
	 PreBinFlow_S_424 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_CHG_100_425;//To Port = 35;
	 F_FUNC_Vmax_ANALOG_USB_CHG_100_425 __Port[0] = FlowNode_426;//To Port = 36;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1850,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Func_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_Func_Vmin_Post_S                                       ***/
/****************************************************************************/
__SubFlow Final_Func_Vmin_Post_S {
	__Node  FuncVminPost_427 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "566";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost;
	}
	__Node  PreBinFlow_S_428 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "567";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_2_429 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "568";
		__Exec =  F_FUNC_Vmin_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_1_430 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "569";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_1;
	}
	__Node  PreBinFlow_S_431 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "570";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_432 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "571";
		__Exec =  F_FUNC_Vmin_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_2_433 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "572";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_2;
	}
	__Node  PreBinFlow_S_434 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "573";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_435 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "574";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_3_436 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "575";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_3;
	}
	__Node  PreBinFlow_S_437 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "576";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_438 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "577";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_4_439 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "578";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_4;
	}
	__Node  PreBinFlow_S_440 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "579";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_441 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "580";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_5_442 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "581";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_5;
	}
	__Node  PreBinFlow_S_443 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "582";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_444 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "583";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_6_445 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "584";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_6;
	}
	__Node  PreBinFlow_S_446 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "585";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_post_447 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "586";
		__Exec =  F_FUNC_Vmin_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_7_448 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "587";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_7;
	}
	__Node  PreBinFlow_S_449 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "588";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_4_450 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "589";
		__Exec =  F_FUNC_Vmin_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_8_451 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "590";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_8;
	}
	__Node  PreBinFlow_S_452 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "591";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_5_453 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "592";
		__Exec =  F_FUNC_Vmin_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_9_454 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "593";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_9;
	}
	__Node  PreBinFlow_S_455 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "594";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_7_456 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "595";
		__Exec =  F_FUNC_Vmin_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_457 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "596";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPost_427;
	__PortConnections {
	 FuncVminPost_427 __Port[0] =  FuncVminPost_1_430;//To Port = 3;
	 FuncVminPost_427 __Port[1] =  PreBinFlow_S_428;//To Port = 1;
	 PreBinFlow_S_428 __Port[0] =  F_FUNC_Vmin_2_429;//To Port = 2;
	 F_FUNC_Vmin_2_429 __Port[0] =  FuncVminPost_1_430;//To Port = 3;
	 FuncVminPost_1_430 __Port[0] =  FuncVminPost_2_433;//To Port = 6;
	 FuncVminPost_1_430 __Port[1] =  PreBinFlow_S_431;//To Port = 4;
	 PreBinFlow_S_431 __Port[0] =  F_FUNC_Vmin_GROS_100_post_432;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_432 __Port[0] =  FuncVminPost_2_433;//To Port = 6;
	 FuncVminPost_2_433 __Port[0] =  FuncVminPost_3_436;//To Port = 9;
	 FuncVminPost_2_433 __Port[1] =  PreBinFlow_S_434;//To Port = 7;
	 PreBinFlow_S_434 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_435;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_435 __Port[0] =  FuncVminPost_3_436;//To Port = 9;
	 FuncVminPost_3_436 __Port[0] =  FuncVminPost_4_439;//To Port = 12;
	 FuncVminPost_3_436 __Port[1] =  PreBinFlow_S_437;//To Port = 10;
	 PreBinFlow_S_437 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_438;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_438 __Port[0] =  FuncVminPost_4_439;//To Port = 12;
	 FuncVminPost_4_439 __Port[0] =  FuncVminPost_5_442;//To Port = 15;
	 FuncVminPost_4_439 __Port[1] =  PreBinFlow_S_440;//To Port = 13;
	 PreBinFlow_S_440 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_441;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_441 __Port[0] =  FuncVminPost_5_442;//To Port = 15;
	 FuncVminPost_5_442 __Port[0] =  FuncVminPost_6_445;//To Port = 18;
	 FuncVminPost_5_442 __Port[1] =  PreBinFlow_S_443;//To Port = 16;
	 PreBinFlow_S_443 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_444;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_444 __Port[0] =  FuncVminPost_6_445;//To Port = 18;
	 FuncVminPost_6_445 __Port[0] =  FuncVminPost_7_448;//To Port = 21;
	 FuncVminPost_6_445 __Port[1] =  PreBinFlow_S_446;//To Port = 19;
	 PreBinFlow_S_446 __Port[0] =  F_FUNC_Vmin_GROS_166p66_post_447;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_post_447 __Port[0] =  FuncVminPost_7_448;//To Port = 21;
	 FuncVminPost_7_448 __Port[0] =  FuncVminPost_8_451;//To Port = 24;
	 FuncVminPost_7_448 __Port[1] =  PreBinFlow_S_449;//To Port = 22;
	 PreBinFlow_S_449 __Port[0] =  F_FUNC_Vmin_4_450;//To Port = 23;
	 F_FUNC_Vmin_4_450 __Port[0] =  FuncVminPost_8_451;//To Port = 24;
	 FuncVminPost_8_451 __Port[0] =  FuncVminPost_9_454;//To Port = 27;
	 FuncVminPost_8_451 __Port[1] =  PreBinFlow_S_452;//To Port = 25;
	 PreBinFlow_S_452 __Port[0] =  F_FUNC_Vmin_5_453;//To Port = 26;
	 F_FUNC_Vmin_5_453 __Port[0] =  FuncVminPost_9_454;//To Port = 27;
	 FuncVminPost_9_454 __Port[0] = FlowNode_457;//To Port = 30;
	 FuncVminPost_9_454 __Port[1] =  PreBinFlow_S_455;//To Port = 28;
	 PreBinFlow_S_455 __Port[0] =  F_FUNC_Vmin_7_456;//To Port = 29;
	 F_FUNC_Vmin_7_456 __Port[0] = FlowNode_457;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Func_Vmin_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_PostStressFunc_S                                       ***/
/****************************************************************************/
__SubFlow Final_PostStressFunc_S {
	__Node  Final_Func_Vmax_Post_S_458 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "597";
		__Exec =  Final_Func_Vmax_Post_S;
	}
	__Node  Final_Func_Vmin_Post_S_459 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "598";
		__Exec =  Final_Func_Vmin_Post_S;
	}
	__Node FlowNode_460 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "599";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_Func_Vmax_Post_S_458;
	__PortConnections {
	 Final_Func_Vmax_Post_S_458 __Port[0] =  Final_Func_Vmin_Post_S_459;//To Port = 1;
	 Final_Func_Vmin_Post_S_459 __Port[0] = FlowNode_460;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_PostStressFunc_S ***/

/****************************************************************************/
/*** SubFlow Final_SrchVdd_Post_S                                         ***/
/****************************************************************************/
__SubFlow Final_SrchVdd_Post_S {
	__Node  VminSearchPost_461 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "600";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost;
	}
	__Node  PreBinFlow_S_462 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "601";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_3_463 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "602";
		__Exec =  F_FUNC_Vmin_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_1_464 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "603";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_1;
	}
	__Node  PreBinFlow_S_465 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "604";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_4_466 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "605";
		__Exec =  F_FUNC_Vmin_GROS_100_post_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_2_467 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "606";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_2;
	}
	__Node  PreBinFlow_S_468 {
		__XCoord = (350,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "607";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_5_469 {
		__XCoord = (350,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "608";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_3_470 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "609";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_3;
	}
	__Node  PreBinFlow_S_471 {
		__XCoord = (500,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "610";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_6_472 {
		__XCoord = (500,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "611";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_4_473 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "612";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_4;
	}
	__Node  PreBinFlow_S_474 {
		__XCoord = (650,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "613";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_7_475 {
		__XCoord = (650,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "614";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_5_476 {
		__XCoord = (800,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "615";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_5;
	}
	__Node  PreBinFlow_S_477 {
		__XCoord = (800,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "616";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_8_478 {
		__XCoord = (800,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "617";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_6_479 {
		__XCoord = (950,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "618";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_6;
	}
	__Node  PreBinFlow_S_480 {
		__XCoord = (950,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "619";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_post_9_481 {
		__XCoord = (950,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "620";
		__Exec =  F_FUNC_Vmin_GROS_166p66_post_9;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_7_482 {
		__XCoord = (1100,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "621";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_7;
	}
	__Node  PreBinFlow_S_483 {
		__XCoord = (1100,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "622";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_11_484 {
		__XCoord = (1100,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "623";
		__Exec =  F_FUNC_Vmin_11;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_8_485 {
		__XCoord = (1250,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "624";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_8;
	}
	__Node  PreBinFlow_S_486 {
		__XCoord = (1250,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "625";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_12_487 {
		__XCoord = (1250,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "626";
		__Exec =  F_FUNC_Vmin_12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_9_488 {
		__XCoord = (1400,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "627";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_9;
	}
	__Node  PreBinFlow_S_489 {
		__XCoord = (1400,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "628";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_14_490 {
		__XCoord = (1400,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "629";
		__Exec =  F_FUNC_Vmin_14;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_491 {
		__XCoord = (1550,250);
		__InputPosition = 270;
		__TestID = "630";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPost_461;
	__PortConnections {
	 VminSearchPost_461 __Port[0] =  VminSearchPost_1_464;//To Port = 3;
	 VminSearchPost_461 __Port[1] =  PreBinFlow_S_462;//To Port = 1;
	 PreBinFlow_S_462 __Port[0] =  F_FUNC_Vmin_3_463;//To Port = 2;
	 F_FUNC_Vmin_3_463 __Port[0] =  VminSearchPost_1_464;//To Port = 3;
	 VminSearchPost_1_464 __Port[0] =  VminSearchPost_2_467;//To Port = 6;
	 VminSearchPost_1_464 __Port[1] =  PreBinFlow_S_465;//To Port = 4;
	 PreBinFlow_S_465 __Port[0] =  F_FUNC_Vmin_GROS_100_post_4_466;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_4_466 __Port[0] =  VminSearchPost_2_467;//To Port = 6;
	 VminSearchPost_2_467 __Port[0] =  VminSearchPost_3_470;//To Port = 9;
	 VminSearchPost_2_467 __Port[1] =  PreBinFlow_S_468;//To Port = 7;
	 PreBinFlow_S_468 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_5_469;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_5_469 __Port[0] =  VminSearchPost_3_470;//To Port = 9;
	 VminSearchPost_3_470 __Port[0] =  VminSearchPost_4_473;//To Port = 12;
	 VminSearchPost_3_470 __Port[1] =  PreBinFlow_S_471;//To Port = 10;
	 PreBinFlow_S_471 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_6_472;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_6_472 __Port[0] =  VminSearchPost_4_473;//To Port = 12;
	 VminSearchPost_4_473 __Port[0] =  VminSearchPost_5_476;//To Port = 15;
	 VminSearchPost_4_473 __Port[1] =  PreBinFlow_S_474;//To Port = 13;
	 PreBinFlow_S_474 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_7_475;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_7_475 __Port[0] =  VminSearchPost_5_476;//To Port = 15;
	 VminSearchPost_5_476 __Port[0] =  VminSearchPost_6_479;//To Port = 18;
	 VminSearchPost_5_476 __Port[1] =  PreBinFlow_S_477;//To Port = 16;
	 PreBinFlow_S_477 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_8_478;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_8_478 __Port[0] =  VminSearchPost_6_479;//To Port = 18;
	 VminSearchPost_6_479 __Port[0] =  VminSearchPost_7_482;//To Port = 21;
	 VminSearchPost_6_479 __Port[1] =  PreBinFlow_S_480;//To Port = 19;
	 PreBinFlow_S_480 __Port[0] =  F_FUNC_Vmin_GROS_166p66_post_9_481;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_post_9_481 __Port[0] =  VminSearchPost_7_482;//To Port = 21;
	 VminSearchPost_7_482 __Port[0] =  VminSearchPost_8_485;//To Port = 24;
	 VminSearchPost_7_482 __Port[1] =  PreBinFlow_S_483;//To Port = 22;
	 PreBinFlow_S_483 __Port[0] =  F_FUNC_Vmin_11_484;//To Port = 23;
	 F_FUNC_Vmin_11_484 __Port[0] =  VminSearchPost_8_485;//To Port = 24;
	 VminSearchPost_8_485 __Port[0] =  VminSearchPost_9_488;//To Port = 27;
	 VminSearchPost_8_485 __Port[1] =  PreBinFlow_S_486;//To Port = 25;
	 PreBinFlow_S_486 __Port[0] =  F_FUNC_Vmin_12_487;//To Port = 26;
	 F_FUNC_Vmin_12_487 __Port[0] =  VminSearchPost_9_488;//To Port = 27;
	 VminSearchPost_9_488 __Port[0] = FlowNode_491;//To Port = 30;
	 VminSearchPost_9_488 __Port[1] =  PreBinFlow_S_489;//To Port = 28;
	 PreBinFlow_S_489 __Port[0] =  F_FUNC_Vmin_14_490;//To Port = 29;
	 F_FUNC_Vmin_14_490 __Port[0] = FlowNode_491;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_SrchVdd_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_PostStressSrch_S                                       ***/
/****************************************************************************/
__SubFlow Final_PostStressSrch_S {
	__Node  Final_SrchVdd_Post_S_492 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "631";
		__Exec =  Final_SrchVdd_Post_S;
	}
	__Node FlowNode_493 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "632";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_493;
	__PortConnections {
	 Final_SrchVdd_Post_S_492 __Port[0] = FlowNode_493;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_PostStressSrch_S ***/

/****************************************************************************/
/*** SubFlow Final_Iddq_VboxLO_Post_S                                     ***/
/****************************************************************************/
__SubFlow Final_Iddq_VboxLO_Post_S {
	__Node  IddqVboxLOPost_494 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "633";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost;
	}
	__Node  PreBinFlow_S_495 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "634";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_496 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "635";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVboxLOPost_1_497 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "636";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost_1;
	}
	__Node  PreBinFlow_S_498 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "637";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_499 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "638";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_500 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "639";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVboxLOPost_494;
	__PortConnections {
	 IddqVboxLOPost_494 __Port[0] =  IddqVboxLOPost_1_497;//To Port = 3;
	 IddqVboxLOPost_494 __Port[1] =  PreBinFlow_S_495;//To Port = 1;
	 PreBinFlow_S_495 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_496;//To Port = 2;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_496 __Port[0] =  IddqVboxLOPost_1_497;//To Port = 3;
	 IddqVboxLOPost_1_497 __Port[0] = FlowNode_500;//To Port = 6;
	 IddqVboxLOPost_1_497 __Port[1] =  PreBinFlow_S_498;//To Port = 4;
	 PreBinFlow_S_498 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_499;//To Port = 5;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_1_499 __Port[0] = FlowNode_500;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Iddq_VboxLO_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_Iddq_Vburnin_Post_S                                    ***/
/****************************************************************************/
__SubFlow Final_Iddq_Vburnin_Post_S {
	__Node  IddqVburnin_501 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vburnin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "640";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVburnin;
	}
	__Node  PreBinFlow_S_502 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "641";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vburnin_VDDS_PM12_503 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "642";
		__Exec =  F_LEAK_IDDQ_Vburnin_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVburnin_1_504 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vburnin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "643";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVburnin_1;
	}
	__Node  PreBinFlow_S_505 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "644";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vburnin_VDDS_PM411_506 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "645";
		__Exec =  F_LEAK_IDDQ_Vburnin_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_507 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "646";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVburnin_501;
	__PortConnections {
	 IddqVburnin_501 __Port[0] =  IddqVburnin_1_504;//To Port = 3;
	 IddqVburnin_501 __Port[1] =  PreBinFlow_S_502;//To Port = 1;
	 PreBinFlow_S_502 __Port[0] =  F_LEAK_IDDQ_Vburnin_VDDS_PM12_503;//To Port = 2;
	 F_LEAK_IDDQ_Vburnin_VDDS_PM12_503 __Port[0] =  IddqVburnin_1_504;//To Port = 3;
	 IddqVburnin_1_504 __Port[0] = FlowNode_507;//To Port = 6;
	 IddqVburnin_1_504 __Port[1] =  PreBinFlow_S_505;//To Port = 4;
	 PreBinFlow_S_505 __Port[0] =  F_LEAK_IDDQ_Vburnin_VDDS_PM411_506;//To Port = 5;
	 F_LEAK_IDDQ_Vburnin_VDDS_PM411_506 __Port[0] = FlowNode_507;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Iddq_Vburnin_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_Iddq_Vmax_Post_S                                       ***/
/****************************************************************************/
__SubFlow Final_Iddq_Vmax_Post_S {
	__Node  IddqVmax_508 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "647";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax;
	}
	__Node  PreBinFlow_S_509 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "648";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM12_510 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "649";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVmax_1_511 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "650";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax_1;
	}
	__Node  PreBinFlow_S_512 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "651";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM411_513 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "652";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_514 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "653";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVmax_508;
	__PortConnections {
	 IddqVmax_508 __Port[0] =  IddqVmax_1_511;//To Port = 3;
	 IddqVmax_508 __Port[1] =  PreBinFlow_S_509;//To Port = 1;
	 PreBinFlow_S_509 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM12_510;//To Port = 2;
	 F_LEAK_IDDQ_Vmax_VDDS_PM12_510 __Port[0] =  IddqVmax_1_511;//To Port = 3;
	 IddqVmax_1_511 __Port[0] = FlowNode_514;//To Port = 6;
	 IddqVmax_1_511 __Port[1] =  PreBinFlow_S_512;//To Port = 4;
	 PreBinFlow_S_512 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM411_513;//To Port = 5;
	 F_LEAK_IDDQ_Vmax_VDDS_PM411_513 __Port[0] = FlowNode_514;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Iddq_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow Final_Iddq_Delta_S                                           ***/
/****************************************************************************/
__SubFlow Final_Iddq_Delta_S {
	__Node  IddqDelta_515 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "654";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDelta;
	}
	__Node  PreBinFlow_S_516 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "655";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Delta_517 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "656";
		__Exec =  F_LEAK_IDDQ_Delta;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_518 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "657";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDelta_515;
	__PortConnections {
	 IddqDelta_515 __Port[0] = FlowNode_518;//To Port = 3;
	 IddqDelta_515 __Port[1] =  PreBinFlow_S_516;//To Port = 1;
	 PreBinFlow_S_516 __Port[0] =  F_LEAK_IDDQ_Delta_517;//To Port = 2;
	 F_LEAK_IDDQ_Delta_517 __Port[0] = FlowNode_518;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Iddq_Delta_S ***/

/****************************************************************************/
/*** SubFlow Final_Iddq_Drift_S                                           ***/
/****************************************************************************/
__SubFlow Final_Iddq_Drift_S {
	__Node  IddqDrift_519 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "658";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDrift;
	}
	__Node  PreBinFlow_S_520 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "659";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Drift_521 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "660";
		__Exec =  F_LEAK_IDDQ_Drift;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_522 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "661";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDrift_519;
	__PortConnections {
	 IddqDrift_519 __Port[0] = FlowNode_522;//To Port = 3;
	 IddqDrift_519 __Port[1] =  PreBinFlow_S_520;//To Port = 1;
	 PreBinFlow_S_520 __Port[0] =  F_LEAK_IDDQ_Drift_521;//To Port = 2;
	 F_LEAK_IDDQ_Drift_521 __Port[0] = FlowNode_522;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Iddq_Drift_S ***/

/****************************************************************************/
/*** SubFlow Final_PostStressIddq_S                                       ***/
/****************************************************************************/
__SubFlow Final_PostStressIddq_S {
	__Node  Final_Iddq_VboxLO_Post_S_523 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "662";
		__Exec =  Final_Iddq_VboxLO_Post_S;
	}
	__Node  Final_Iddq_Vburnin_Post_S_524 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "663";
		__Exec =  Final_Iddq_Vburnin_Post_S;
	}
	__Node  Final_Iddq_Vmax_Post_S_525 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "664";
		__Exec =  Final_Iddq_Vmax_Post_S;
	}
	__Node  Final_Iddq_Delta_S_526 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "665";
		__Exec =  Final_Iddq_Delta_S;
	}
	__Node  Final_Iddq_Drift_S_527 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "666";
		__Exec =  Final_Iddq_Drift_S;
	}
	__Node FlowNode_528 {
		__XCoord = (800,50);
		__InputPosition = 270;
		__TestID = "667";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_Iddq_VboxLO_Post_S_523;
	__PortConnections {
	 Final_Iddq_VboxLO_Post_S_523 __Port[0] = FlowNode_528;//To Port = 5;
	 Final_Iddq_Vburnin_Post_S_524 __Port[0] = FlowNode_528;//To Port = 5;
	 Final_Iddq_Vmax_Post_S_525 __Port[0] = FlowNode_528;//To Port = 5;
	 Final_Iddq_Delta_S_526 __Port[0] = FlowNode_528;//To Port = 5;
	 Final_Iddq_Drift_S_527 __Port[0] = FlowNode_528;//To Port = 5;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,800,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_PostStressIddq_S ***/

/****************************************************************************/
/*** SubFlow Final_AtSpeed_Vmin_S                                         ***/
/****************************************************************************/
__SubFlow Final_AtSpeed_Vmin_S {
	__Node  AtSpeed_529 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "668";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_530 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "669";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_531 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "670";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_532 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "671";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_533 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "672";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_1_534 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "673";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_535 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "674";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_536 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "675";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_2_537 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "676";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_538 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "677";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_539 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "678";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_3_540 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "679";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_541 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "680";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_542 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "681";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_4_543 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "682";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_544 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "683";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_545 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "684";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_5_546 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "685";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_547 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "686";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_529;
	__PortConnections {
	 AtSpeed_529 __Port[0] =  AtSpeed_1_532;//To Port = 3;
	 AtSpeed_529 __Port[1] =  PreBinFlow_S_530;//To Port = 1;
	 PreBinFlow_S_530 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_531;//To Port = 2;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_531 __Port[0] =  AtSpeed_1_532;//To Port = 3;
	 AtSpeed_1_532 __Port[0] =  AtSpeed_2_535;//To Port = 6;
	 AtSpeed_1_532 __Port[1] =  PreBinFlow_S_533;//To Port = 4;
	 PreBinFlow_S_533 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_1_534;//To Port = 5;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_1_534 __Port[0] =  AtSpeed_2_535;//To Port = 6;
	 AtSpeed_2_535 __Port[0] =  AtSpeed_3_538;//To Port = 9;
	 AtSpeed_2_535 __Port[1] =  PreBinFlow_S_536;//To Port = 7;
	 PreBinFlow_S_536 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_2_537;//To Port = 8;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_2_537 __Port[0] =  AtSpeed_3_538;//To Port = 9;
	 AtSpeed_3_538 __Port[0] =  AtSpeed_4_541;//To Port = 12;
	 AtSpeed_3_538 __Port[1] =  PreBinFlow_S_539;//To Port = 10;
	 PreBinFlow_S_539 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_3_540;//To Port = 11;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_3_540 __Port[0] =  AtSpeed_4_541;//To Port = 12;
	 AtSpeed_4_541 __Port[0] =  AtSpeed_5_544;//To Port = 15;
	 AtSpeed_4_541 __Port[1] =  PreBinFlow_S_542;//To Port = 13;
	 PreBinFlow_S_542 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_4_543;//To Port = 14;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_4_543 __Port[0] =  AtSpeed_5_544;//To Port = 15;
	 AtSpeed_5_544 __Port[0] = FlowNode_547;//To Port = 18;
	 AtSpeed_5_544 __Port[1] =  PreBinFlow_S_545;//To Port = 16;
	 PreBinFlow_S_545 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_5_546;//To Port = 17;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_5_546 __Port[0] = FlowNode_547;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_AtSpeed_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Final_AtSpeed_Vmax_S                                         ***/
/****************************************************************************/
__SubFlow Final_AtSpeed_Vmax_S {
	__Node  AtSpeed_548 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "687";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_549 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "688";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_550 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "689";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_551 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "690";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_552 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "691";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_1_553 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "692";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_554 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "693";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_555 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "694";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_2_556 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "695";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_557 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "696";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_558 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "697";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_3_559 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "698";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_560 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "699";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_561 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "700";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_4_562 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "701";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_563 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "702";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_564 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "703";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_5_565 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "704";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_566 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "705";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_548;
	__PortConnections {
	 AtSpeed_548 __Port[0] =  AtSpeed_1_551;//To Port = 3;
	 AtSpeed_548 __Port[1] =  PreBinFlow_S_549;//To Port = 1;
	 PreBinFlow_S_549 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_550;//To Port = 2;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_550 __Port[0] =  AtSpeed_1_551;//To Port = 3;
	 AtSpeed_1_551 __Port[0] =  AtSpeed_2_554;//To Port = 6;
	 AtSpeed_1_551 __Port[1] =  PreBinFlow_S_552;//To Port = 4;
	 PreBinFlow_S_552 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_1_553;//To Port = 5;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_1_553 __Port[0] =  AtSpeed_2_554;//To Port = 6;
	 AtSpeed_2_554 __Port[0] =  AtSpeed_3_557;//To Port = 9;
	 AtSpeed_2_554 __Port[1] =  PreBinFlow_S_555;//To Port = 7;
	 PreBinFlow_S_555 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_2_556;//To Port = 8;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_2_556 __Port[0] =  AtSpeed_3_557;//To Port = 9;
	 AtSpeed_3_557 __Port[0] =  AtSpeed_4_560;//To Port = 12;
	 AtSpeed_3_557 __Port[1] =  PreBinFlow_S_558;//To Port = 10;
	 PreBinFlow_S_558 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_3_559;//To Port = 11;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_3_559 __Port[0] =  AtSpeed_4_560;//To Port = 12;
	 AtSpeed_4_560 __Port[0] =  AtSpeed_5_563;//To Port = 15;
	 AtSpeed_4_560 __Port[1] =  PreBinFlow_S_561;//To Port = 13;
	 PreBinFlow_S_561 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_4_562;//To Port = 14;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_4_562 __Port[0] =  AtSpeed_5_563;//To Port = 15;
	 AtSpeed_5_563 __Port[0] = FlowNode_566;//To Port = 18;
	 AtSpeed_5_563 __Port[1] =  PreBinFlow_S_564;//To Port = 16;
	 PreBinFlow_S_564 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_5_565;//To Port = 17;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_5_565 __Port[0] = FlowNode_566;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_AtSpeed_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Final_AtSpeed_S                                              ***/
/****************************************************************************/
__SubFlow Final_AtSpeed_S {
	__Node  Final_AtSpeed_Vmin_S_567 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "706";
		__Exec =  Final_AtSpeed_Vmin_S;
	}
	__Node  Final_AtSpeed_Vmax_S_568 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "707";
		__Exec =  Final_AtSpeed_Vmax_S;
	}
	__Node FlowNode_569 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "708";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_AtSpeed_Vmin_S_567;
	__PortConnections {
	 Final_AtSpeed_Vmin_S_567 __Port[0] =  Final_AtSpeed_Vmax_S_568;//To Port = 1;
	 Final_AtSpeed_Vmax_S_568 __Port[0] = FlowNode_569;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_AtSpeed_S ***/

/****************************************************************************/
/*** SubFlow Final_SpecLevels_Vmin_S                                      ***/
/****************************************************************************/
__SubFlow Final_SpecLevels_Vmin_S {
	__Node  SpecLevels_570 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "709";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_571 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "710";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmin_DC_PARA_100_572 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "711";
		__Exec =  F_FUNC_SPEC_Vmin_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmin_573 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "712";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmin;
	}
	__Node  PreBinFlow_S_574 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "713";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmin_PM86_DC_PM04_575 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "714";
		__Exec =  F_PARA_VIO_Vmin_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_576 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "715";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_570;
	__PortConnections {
	 SpecLevels_570 __Port[0] =  VoutVmin_573;//To Port = 3;
	 SpecLevels_570 __Port[1] =  PreBinFlow_S_571;//To Port = 1;
	 PreBinFlow_S_571 __Port[0] =  F_FUNC_SPEC_Vmin_DC_PARA_100_572;//To Port = 2;
	 F_FUNC_SPEC_Vmin_DC_PARA_100_572 __Port[0] =  VoutVmin_573;//To Port = 3;
	 VoutVmin_573 __Port[0] = FlowNode_576;//To Port = 6;
	 VoutVmin_573 __Port[1] =  PreBinFlow_S_574;//To Port = 4;
	 PreBinFlow_S_574 __Port[0] =  F_PARA_VIO_Vmin_PM86_DC_PM04_575;//To Port = 5;
	 F_PARA_VIO_Vmin_PM86_DC_PM04_575 __Port[0] = FlowNode_576;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_SpecLevels_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Final_SpecLevels_Vmax_S                                      ***/
/****************************************************************************/
__SubFlow Final_SpecLevels_Vmax_S {
	__Node  SpecLevels_577 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "716";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_578 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "717";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmax_DC_PARA_100_579 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "718";
		__Exec =  F_FUNC_SPEC_Vmax_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmax_580 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "719";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmax;
	}
	__Node  PreBinFlow_S_581 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "720";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmax_PM86_DC_PM04_582 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "721";
		__Exec =  F_PARA_VIO_Vmax_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_583 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "722";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_577;
	__PortConnections {
	 SpecLevels_577 __Port[0] =  VoutVmax_580;//To Port = 3;
	 SpecLevels_577 __Port[1] =  PreBinFlow_S_578;//To Port = 1;
	 PreBinFlow_S_578 __Port[0] =  F_FUNC_SPEC_Vmax_DC_PARA_100_579;//To Port = 2;
	 F_FUNC_SPEC_Vmax_DC_PARA_100_579 __Port[0] =  VoutVmax_580;//To Port = 3;
	 VoutVmax_580 __Port[0] = FlowNode_583;//To Port = 6;
	 VoutVmax_580 __Port[1] =  PreBinFlow_S_581;//To Port = 4;
	 PreBinFlow_S_581 __Port[0] =  F_PARA_VIO_Vmax_PM86_DC_PM04_582;//To Port = 5;
	 F_PARA_VIO_Vmax_PM86_DC_PM04_582 __Port[0] = FlowNode_583;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_SpecLevels_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Final_Leakage_S                                              ***/
/****************************************************************************/
__SubFlow Final_Leakage_S {
	__Node  LeakIIn_584 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "723";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIIn;
	}
	__Node  PreBinFlow_S_585 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "724";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IIN_Vmax_586 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "725";
		__Exec =  F_LEAK_IIN_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  LeakIO_587 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "726";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIO;
	}
	__Node  PreBinFlow_S_588 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "727";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IOZ_Vmax_PM85_589 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "728";
		__Exec =  F_LEAK_IOZ_Vmax_PM85;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_590 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "729";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  LeakIIn_584;
	__PortConnections {
	 LeakIIn_584 __Port[0] =  LeakIO_587;//To Port = 3;
	 LeakIIn_584 __Port[1] =  PreBinFlow_S_585;//To Port = 1;
	 PreBinFlow_S_585 __Port[0] =  F_LEAK_IIN_Vmax_586;//To Port = 2;
	 F_LEAK_IIN_Vmax_586 __Port[0] =  LeakIO_587;//To Port = 3;
	 LeakIO_587 __Port[0] = FlowNode_590;//To Port = 6;
	 LeakIO_587 __Port[1] =  PreBinFlow_S_588;//To Port = 4;
	 PreBinFlow_S_588 __Port[0] =  F_LEAK_IOZ_Vmax_PM85_589;//To Port = 5;
	 F_LEAK_IOZ_Vmax_PM85_589 __Port[0] = FlowNode_590;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Leakage_S ***/

/****************************************************************************/
/*** SubFlow Final_Parametrics_S                                          ***/
/****************************************************************************/
__SubFlow Final_Parametrics_S {
	__Node  Final_SpecLevels_Vmin_S_591 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "730";
		__Exec =  Final_SpecLevels_Vmin_S;
	}
	__Node  Final_SpecLevels_Vmax_S_592 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "731";
		__Exec =  Final_SpecLevels_Vmax_S;
	}
	__Node  Final_Leakage_S_593 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "732";
		__Exec =  Final_Leakage_S;
	}
	__Node FlowNode_594 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "733";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Final_SpecLevels_Vmin_S_591;
	__PortConnections {
	 Final_SpecLevels_Vmin_S_591 __Port[0] =  Final_SpecLevels_Vmax_S_592;//To Port = 1;
	 Final_SpecLevels_Vmax_S_592 __Port[0] =  Final_Leakage_S_593;//To Port = 2;
	 Final_Leakage_S_593 __Port[0] = FlowNode_594;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_Parametrics_S ***/

/****************************************************************************/
/*** SubFlow Final_SupplyShort_S                                          ***/
/****************************************************************************/
__SubFlow Final_SupplyShort_S {
	__Node  SupplyShorts2_595 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "734";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts2;
	}
	__Node  F_OS_SHRT_VDD_596 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "735";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node FlowNode_597 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "736";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts2_595;
	__PortConnections {
	 SupplyShorts2_595 __Port[0] = FlowNode_597;//To Port = 2;
	 SupplyShorts2_595 __Port[1] =  F_OS_SHRT_VDD_596;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Final_SupplyShort_S ***/

/****************************************************************************/
/*** SubFlow Final_CRES_S                                                 ***/
/****************************************************************************/
__SubFlow Final_CRES_S {
	__Node FlowNode_598 {
		__XCoord = (0,50);
		__Port[0] {
			__PortPosition = 90;
		}
		__Port[1] {
			__PortPosition = 175;
		}
		__InputPosition = 220;
		__TestID = "737";
		__PortSelect =  "if ( fmod( TestProgData.CurSiteSerial, 50 ) = 0, 1, 0)";
	}
	__Node  Cres_599 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "738";
		__Calibration = Bllizar_Calibration;
		__Exec =  Cres;
	}
	__Node  F_OS_CRES_600 {
		__XCoord = (-15,295);
		__InputPosition = 20;
		__TestID = "739";
		__Exec =  F_OS_CRES;
	}
	__Node FlowNode_601 {
		__XCoord = (255,150);
		__InputPosition = 270;
		__TestID = "740";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_598;
	__PortConnections {
	FlowNode_598 __Port[0] = FlowNode_601;//To Port = 3;
	FlowNode_598 __Port[1] =  Cres_599;//To Port = 1;
	 Cres_599 __Port[0] = FlowNode_601;//To Port = 3;
	 Cres_599 __Port[1] =  F_OS_CRES_600;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,255,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/Global.evo                                     */
/* Creation Date  : Tue Jan  3 17:12:34 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/************************/
/*** Tester Variables ***/
/************************/
__OperatorVariable TIFocusCal {
    __Comment = "TRUE enables running of FocusCal, FALSE loads from disk";
    __Expression = __Expression { __String = "TRUE"; }
    __UserMode = Production;
}

/***************************/
/*** Test Type Variables ***/
/***************************/
__OperatorVariable TIAdapterBoard {
    __Comment = "An expression that will select the AdapterBoard based on TITestType, TIDeviceType, etc";
    __Expression = __Expression { __String = "select(TIDeviceType,'Bllizar_PB1_AdapterBoard')"; }
    __UserMode = Production;
}

__OperatorVariable TIBinMap {
    __Comment = "An expression that will select the BinMap based on TITestType";
    __Expression = __Expression { __String = "select(TITestType, 'ATSite_BinMap_Probe','ATSite_BinMap_Final','ATSite_BinMap_Qual','ATSite_BinMap_DPSE','ATSite_BinMap_BoardChk')"; }
    __UserMode = Production;
}

__OperatorVariable TIFlow {
    __Comment = "An expression that will select the Testflow based on TITestType";
    __Expression = __Expression { __String = "select(TITestType, 'Probe_FLOW','Final_FLOW','Qual_FLOW','DPSE_FLOW','BoardChk_FLOW')"; }
    __UserMode = Production;
}

/*****************************/
/*** Engineering Variables ***/
/*****************************/

__OperatorVariable TIPrintTimings {
    __Comment = "";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable printTWPDL {
    __Comment = "Turns on TestWarePrintSpec";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable printTWLimits {
    __Comment = "Prints Test Ware variables and limits file in test program Directory";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable RunAllTests {
    __Comment = "Turns on ContinueOnFail";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable CharacterizeDevice {
    __Comment = "Turns on ContinueOnFail and Fsearch/Vsearch on every Nth device";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable charMem {
    __Comment = "Enables char microflows for memory GNG and diag tests";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable charMemVdd {
    __Comment = "Enables char of VDD supply in GNG and diag tests";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable charMemFreq {
    __Comment = "Enables char of Frequency in GNG and diag tests";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vboxlo {
    __Comment = "Do Frequency Search for Vboxlo";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vboxlo {
    __Comment = "Do Vmin Search for Vboxlo";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VboxloM {
    __Comment = "Do Frequency Search for VboxloM";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VboxloM {
    __Comment = "Do Vmin Search for VboxloM";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VboxloP {
    __Comment = "Do Frequency Search for VboxloP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VboxloP {
    __Comment = "Do Vmin Search for VboxloP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vmin {
    __Comment = "Do Frequency Search for Vmin";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vmin {
    __Comment = "Do Vmin Search for Vmin";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vnom {
    __Comment = "Do Frequency Search for Vnom";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vnom {
    __Comment = "Do Vmin Search for Vnom";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vmax {
    __Comment = "Do Frequency Search for Vmax";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vmax {
    __Comment = "Do Vmin Search for Vmax";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vboxhi {
    __Comment = "Do Frequency Search for Vboxhi";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vboxhi {
    __Comment = "Do Vmin Search for Vboxhi";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VboxhiM {
    __Comment = "Do Frequency Search for VboxhiM";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VboxhiM {
    __Comment = "Do Vmin Search for VboxhiM";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VboxhiP {
    __Comment = "Do Frequency Search for VboxhiP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VboxhiP {
    __Comment = "Do Vmin Search for VboxhiP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vstress {
    __Comment = "Do Frequency Search for Vstress";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vstress {
    __Comment = "Do Vmin Search for Vstress";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VEfuseP {
    __Comment = "Do Frequency Search for VEfuseP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VEfuseP {
    __Comment = "Do Vmin Search for VEfuseP";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_VEfuseR {
    __Comment = "Do Frequency Search for VEfuseR";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_VEfuseR {
    __Comment = "Do Vmin Search for VEfuseR";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable FSearch_Vburnin {
    __Comment = "Do Frequency Search for Vburnin";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable VSearch_Vburnin {
    __Comment = "Do Vmin Search for Vburnin";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable EnaBistDlog {
    __Comment = "Enables verbose data dump mode for TIMemoryBIST test method.";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable EnaSolnDlog {
    __Comment = "Enables verbose data dump mode for TIRedundancy MicroFlow event.";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

__OperatorVariable EnaReadOnly {
    __Comment = "Enables READ-ONLY mode in TIEfuseRepair MicroFlow event. No Fuses Programmed";
    __Expression = __Expression { __String = "FALSE OR ContinueOnFail"; }
    __UserMode = Production;
}

__OperatorVariable EnaEfuseDlog {
    __Comment = "Enables verbose data dump mode for TIEfuseRepair MicroFlow event.";
    __Expression = __Expression { __String = "FALSE"; }
    __UserMode = Production;
}

/****************************************************************/
/*** Declare all "Constants" in the Globals_Typ Spec Object.  ***/
/*** Constants here means that the parameter's .Meas will not ***/
/*** be used, only the .Typ will be used.                     ***/
/****************************************************************/

__Spec Globals_Typ {
    __Category Constants {
        GlobalIndex = "0";
        DCDataSelect = "TITestTemp";
        jzCadenceExpr = "strcat(skip('',TIPrintf('jzCadenceExpr.Meas,s',jzCadenceExpr.Meas,'')),jzCadenceExpr.Meas)";
        jzCadenceReal = "0.0";
        jzCadencePinExpr = "strcat(skip('',TIPrintf('jzCadencePinExpr.Meas,s','%p',jzCadencePinExpr.Meas)),jzCadencePinExpr.Meas)";
        jzCadenceInt = "0";
        jzCadenceRealLoLimit = "0.0";
        jzCadenceRealHiLimit = "0.0";
        jzCadenceRealArr = "SimpleArray(8,0.0)";
        jzCadenceRealArr2 = "SimpleArray(4,0.0)";
        jzCadenceString = "''";
        jzCadenceString2 = "''";
        jzCadenceTWvar = "''";
        jzCadenceTWunits = "''";
        jzCadence2twMin.Min = "TWPDLDataLogVariable(jzCadenceTWvar.Meas,jzCadenceInt.Meas,TWDataType:TWMinimumData)";
        jzCadence2twMin.Typ = "TWPDLDataLogText(jzCadenceTWvar.Meas,jzCadenceString.Meas,TWDataType:TWMinimumData)";
        jzCadence2twMin.Max = "TWPDLDataLogRealVariable(jzCadenceTWvar.Meas,jzCadenceTWunits.Meas,jzCadenceReal.Meas,TWDataType:TWMinimumData)";
        jzCadence2twNom.Min = "TWPDLDataLogVariable(jzCadenceTWvar.Meas,jzCadenceInt.Meas,TWDataType:TWNominalData)";
        jzCadence2twNom.Typ = "TWPDLDataLogText(jzCadenceTWvar.Meas,jzCadenceString.Meas,TWDataType:TWNominalData)";
        jzCadence2twNom.Max = "TWPDLDataLogRealVariable(jzCadenceTWvar.Meas,jzCadenceTWunits.Meas,jzCadenceReal.Meas,TWDataType:TWNominalData)";
        jzCadence2twExt.Min = "TWPDLDataLogVariable(jzCadenceTWvar.Meas,jzCadenceInt.Meas,TWDataType:TWExtendedData)";
        jzCadence2twExt.Typ = "TWPDLDataLogText(jzCadenceTWvar.Meas,jzCadenceString.Meas,TWDataType:TWExtendedData)";
        jzCadence2twExt.Max = "TWPDLDataLogRealVariable(jzCadenceTWvar.Meas,jzCadenceTWunits.Meas,jzCadenceReal.Meas,TWDataType:TWExtendedData)";
        jzCadence2twExh.Min = "TWPDLDataLogVariable(jzCadenceTWvar.Meas,jzCadenceInt.Meas,TWDataType:TWExhaustiveData)";
        jzCadence2twExh.Typ = "TWPDLDataLogText(jzCadenceTWvar.Meas,jzCadenceString.Meas,TWDataType:TWExhaustiveData)";
        jzCadence2twExh.Max = "TWPDLDataLogRealVariable(jzCadenceTWvar.Meas,jzCadenceTWunits.Meas,jzCadenceReal.Meas,TWDataType:TWExhaustiveData)";
    }
    __ParamGlobals {
            GlobalIndex { __Type = SCALAR; }
            DCDataSelect { __Type = SCALAR; }
            jzCadenceExpr { __Type = STRING; __Comment = "used by Cadence modules to execute enVision expressions"; }
            jzCadenceReal { __Type = SCALAR; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadencePinExpr { __Type = STRING; __Comment = "used by Cadence modules to execute enVision expressions"; }
            jzCadencePin { __Type = PIN; __Comment = "used by Cadence modules"; }
            jzCadenceInt { __Type = INTEGER; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceRealLoLimit { __Type = SCALAR; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceRealHiLimit { __Type = SCALAR; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceRealArr { __Type = SCALAR[SCALAR]; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceRealArr2 { __Type = SCALAR[SCALAR]; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceString { __Type = STRING; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceString2 { __Type = STRING; __Comment = "used by Cadence modules - holds values to be sent to TW"; }
            jzCadenceTWvar { __Type = STRING; __Comment = "used by Cadence modules - holds twVar names to be sent to TW"; }
            jzCadenceTWunits { __Type = STRING; __Comment = "used by Cadence modules - holds twVar names to be sent to TW"; }
            jzCadence2twMin { __Type = BOOLEAN; __Comment = "used by Cadence modules to send data to testware"; }
            jzCadence2twNom { __Type = BOOLEAN; __Comment = "used by Cadence modules to send data to testware"; }
            jzCadence2twExt { __Type = BOOLEAN; __Comment = "used by Cadence modules to send data to testware"; }
            jzCadence2twExh { __Type = BOOLEAN; __Comment = "used by Cadence modules to send data to testware"; }
    }
}
/***************************************************************/
/*** Declare all "Variables" in the Globals_Meas Spec Object ***/
/*** Variables here means that the parameter's .Meas will    ***/
/*** be used; the .Typ will not be used. The associated Mask ***/
/*** object uses the .Meas.                                  ***/
/***                                                         ***/
/*** When adding new parameters to Globals, also need to add ***/
/*** appropriate mask assignment in masks.evo, and           ***/
/*** initialize in utility.evo.                              ***/
/***************************************************************/

__Spec Globals_Meas {
    __Category GlobalMeasDefaults {
        GlobalMeasIndex = "0";
        TestWareDataLog = "FALSE";
        ContinueOnFail = "FALSE OR CharacterizeDevice OR RunAllTests";
        TestWarePrintSpec = "FALSE OR printTWPDL";
        newVarsFile = "FALSE";
        CharNthDevice = "int(10)";
        CharDevCount = "int(-1)";
        GlobalNotBinned = "TRUE";
        BinName = "'GOOD_UNIT'";
        GlobalResult = "FALSE";
        CurResult = "tm_rslt:PASS";
        CurThread = "-1";
        rowsPerThread = "0";
        CharCurColumnIndex = "0";
        CharCurTWPDLvarNameStr = "UNKNOWN_1";
        CharCurTWPDLvarNameBase = "UNKNOWN_";
        CharStepResult = "TRUE";
        ResetStressTime = "TRUE";
        CharPerColCountFsearch = "SimpleArray(291,0)";
        CharPerColCountVsearch = "SimpleArray(291,0)";
        CharAnySearch = "FALSE OR CharacterizeDevice";
        CharAnyFsearch = "TRUE";
        CharAnyVsearch = "TRUE";
        PerPinCharDC = "FALSE";
        CRES_worstpin_min = "AIN04_193";
        CRES_worstpin_min_read = "99Ohm";
        CRES_worstpin_max = "AIN04_193";
        CRES_worstpin_max_read = "99Ohm";
        CRES_mean_read = "99Ohm";
        OpensFailFlag = "FALSE";
        ShortsFailFlag = "FALSE";
        Pin2PinShortsFlag = "FALSE";
        AnalogOpensFailFlag = "FALSE";
        AnalogShortsFailFlag = "FALSE";
        SupplyOpensFailFlag = "FALSE";
        SupplyShortsFailFlag = "FALSE";
        GlobalRedFailFlag = "FALSE";
        PreRepair = "TRUE";
        FailsToCollect = "10000";
        binary_string = "''";
        ChkDiagsVboxhiFailFlag = "FALSE";
        LogDiagsVboxhiFailFlag = "FALSE";
        MemGNGVboxhiResultFlag = "FALSE";
        ChkDiagsVboxloFailFlag = "FALSE";
        LogDiagsVboxloFailFlag = "FALSE";
        MemGNGVboxloResultFlag = "FALSE";
        NonRepDiagFailFlag = "FALSE";
        MemRepaired = "FALSE";
        MemUnrepairable = "FALSE";
        TIReProbe = "FALSE";
        DataNDTimeOut = "2s";
        ESDAProgName = "'I1111M00'";
        twMCC = "strcat('_',twMCC_V,twMCC_F,twMCC_S,'_')";
        twMCC_S = "if( strlen(strstr(twTest,'Post'))>0,'A', if(strlen(strstr(twTest,'Pre'))>0,'B','') )";
        twBase = "strcat(twMCC, twMDC)";
        twVar = "strcat(twVar1, '_', twOPT)";
        twVar1 = "strcat(twMTC, twBase)";
        printf_str = "''";
        OCP_Res = "0.0";
        OCP_Res1 = "0.0";
        twVarsFile = "strcat(TestProgData.PathName, '/twVarLimits.vars,', if(newVarsFile, skip('n',FALSE->newVarsFile),'a'))";
        xtrSelStr = "''";
        xtrNum = "1";
        NullDutIMeas = "SimpleArray(26,0.0A)";
        NullDutErr = "SimpleArray(26,0.0V)";
        ODPResValues = "SimpleArray(100,0Ohm)";
        Iddq_Vboxlo_VDDAR_post = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDDAR_pre = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDDA_post = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDDA_pre = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDDS_post = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDDS_pre = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDD_post = "SimpleArray(20, 999.99A)";
        Iddq_Vboxlo_VDD_pre = "SimpleArray(20, 999.99A)";
        Iddq_Vburnin_VDD = "SimpleArray(20, 999.99A)";
        Iddq_Vburnin_VDDA = "SimpleArray(20, 999.99A)";
        Iddq_Vburnin_VDDAR = "SimpleArray(20, 999.99A)";
        Iddq_Vburnin_VDDS = "SimpleArray(20, 999.99A)";
        Iddq_Vmax_VDD = "SimpleArray(20, 999.99A)";
        Iddq_Vmax_VDDA = "SimpleArray(20, 999.99A)";
        Iddq_Vmax_VDDAR = "SimpleArray(20, 999.99A)";
        Iddq_Vmax_VDDS = "SimpleArray(20, 999.99A)";
    }
    __ParamGlobals {
            GlobalMeasIndex { __Type = SCALAR; }
            TestWareDataLog { __Type = BOOLEAN; __Comment = "Print TestWare variables at end"; }
            ContinueOnFail { __Type = BOOLEAN; __Comment = "Do I continue testing if I failed? - default (FALSE OR CharacterizeDevice OR RunAllTests)"; }
            TestWarePrintSpec { __Type = BOOLEAN; __Comment = "Print TestWare variable spec inline"; }
            newVarsFile { __Type = BOOLEAN; __Comment = "Creates new TestWare variables limits file"; }
            CharNthDevice { __Type = INTEGER; __Comment = "Characterize Every Nth Device"; }
            CharDevCount { __Type = INTEGER; __Comment = "Count to Nth device above"; }
            GlobalNotBinned { __Type = BOOLEAN; __Comment = "Track if binned yet - used for binning inside the flow"; }
            BinName { __Type = STRING; __Comment = "The Name of the Bin device will end up in.  Set upon the first fail?"; }
            GlobalResult { __Type = BOOLEAN; __Comment = "Whether we have already FAILED yet - globally."; }
            CurResult { __Type = tm_rslt:; __Comment = "Result of current testColumn - only availiable in PostProcessExpr, not in characterization."; }
            CurThread { __Type = INTEGER; __Comment = "The current thread for characterization, -1=no thread"; }
            rowsPerThread { __Type = INTEGER; __Comment = "The number of rows in a thread"; }
            CharCurColumnIndex { __Type = INTEGER; __Comment = "The id-number for the current column for characterization tracking"; }
            CharCurTWPDLvarNameStr { __Type = STRING; __Comment = "The variable name for the calculated testware variable"; }
            CharCurTWPDLvarNameBase { __Type = STRING; __Comment = "The variable used for as part of the calculated testware variable"; }
            CharStepResult { __Type = BOOLEAN; __Comment = "The variable used for to pass\/fail in each step of characterization searches"; }
            ResetStressTime { __Type = BOOLEAN; __Comment = "The variable used to Reset Timer 0 in Stress Test"; }
            CharPerColCountFsearch { __Type = SCALAR[INTEGER]; __Comment = "Fsearch count per column"; }
            CharPerColCountVsearch { __Type = SCALAR[INTEGER]; __Comment = "Vsearch count per column"; }
            CharRealVal { __Type = SCALAR; __Comment = "Real Characterization Value"; }
            CharRealLower { __Type = SCALAR; __Comment = "Lower Limit for Characterization Value"; }
            CharRealUpper { __Type = SCALAR; __Comment = "Upper Limit for Characterization Value"; }
            CharRealUnits { __Type = STRING; __Comment = "Unit String for Characterization Value"; }
            CharAnySearch { __Type = BOOLEAN; __Comment = "Whether to do Any per-pattern-list Characterization"; }
            CharAnyFsearch { __Type = BOOLEAN; __Comment = "Whether to do Any Frequency per-pattern-list Characterization"; }
            CharAnyVsearch { __Type = BOOLEAN; __Comment = "Whether to do Any Voltage per-pattern-list Characterization"; }
            PerPinCharDC { __Type = BOOLEAN; __Comment = "Whether to do per-pin DC Characterization"; }
            CRES_worstpin_min { __Type = PIN; }
            CRES_worstpin_min_read { __Type = Ohm; }
            CRES_worstpin_max { __Type = PIN; }
            CRES_worstpin_max_read { __Type = Ohm; }
            CRES_mean_read { __Type = Ohm; }
            OpensFailFlag { __Type = BOOLEAN; }
            ShortsFailFlag { __Type = BOOLEAN; }
            Pin2PinShortsFlag { __Type = BOOLEAN; }
            AnalogOpensFailFlag { __Type = BOOLEAN; }
            AnalogShortsFailFlag { __Type = BOOLEAN; }
            SupplyOpensFailFlag { __Type = BOOLEAN; }
            SupplyShortsFailFlag { __Type = BOOLEAN; }
            GlobalRedFailFlag { __Type = BOOLEAN; }
            PreRepair { __Type = BOOLEAN; }
            FailsToCollect { __Type = INTEGER; }
            binary_string { __Type = STRING; }
            ChkDiagsVboxhiFailFlag { __Type = BOOLEAN; }
            LogDiagsVboxhiFailFlag { __Type = BOOLEAN; }
            MemGNGVboxhiResultFlag { __Type = BOOLEAN; }
            ChkDiagsVboxloFailFlag { __Type = BOOLEAN; }
            LogDiagsVboxloFailFlag { __Type = BOOLEAN; }
            MemGNGVboxloResultFlag { __Type = BOOLEAN; }
            NonRepDiagFailFlag { __Type = BOOLEAN; }
            MemRepaired { __Type = BOOLEAN; }
            MemUnrepairable { __Type = BOOLEAN; }
            TIReProbe { __Type = BOOLEAN; }
            DataNDTimeOut { __Type = s; }
            ESDAProgName { __Type = STRING; }
            twTest { __Type = STRING; __Comment = "Indicates which test we are in"; }
            twMDC { __Type = STRING; __Comment = "Indicates Measurement Description Code"; }
            twMTC { __Type = STRING; __Comment = "Indicates Measurement __Type Code"; }
            twMCC { __Type = STRING; __Comment = "Indicates Measurement Condition Code"; }
            twMCC_S { __Type = STRING; __Comment = "Indicates Before or After Stress"; }
            twOPT { __Type = STRING; __Comment = "Indicates Optional field"; }
            twBase { __Type = STRING; __Comment = "TBD"; }
            twVar { __Type = STRING; __Comment = "TBD"; }
            twVar1 { __Type = STRING; __Comment = "TBD"; }
            printf_str { __Type = STRING; __Comment = "To store smartreflex datalog"; }
            OCP_Res { __Type = SCALAR; __Comment = "To store OCP Resistance"; }
            OCP_Res1 { __Type = SCALAR; __Comment = "To store OCP Resistance"; }
            twVarsFile { __Type = STRING; __Comment = "To store testware vars and limits"; }
            xtrSelStr { __Type = STRING; __Comment = "To store ODP Xtor Select"; }
            xtrNum { __Type = INTEGER; }
            NullDutIMeas { __Type = A[INTEGER]; }
            NullDutErr { __Type = V[INTEGER]; }
            ODPResValues { __Type = Ohm[INTEGER]; }
            Iddq_Vboxlo_VDDAR_post { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDDAR_pre { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDDA_post { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDDA_pre { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDDS_post { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDDS_pre { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDD_post { __Type = A[INTEGER]; }
            Iddq_Vboxlo_VDD_pre { __Type = A[INTEGER]; }
            Iddq_Vburnin_VDD { __Type = A[INTEGER]; }
            Iddq_Vburnin_VDDA { __Type = A[INTEGER]; }
            Iddq_Vburnin_VDDAR { __Type = A[INTEGER]; }
            Iddq_Vburnin_VDDS { __Type = A[INTEGER]; }
            Iddq_Vmax_VDD { __Type = A[INTEGER]; }
            Iddq_Vmax_VDDA { __Type = A[INTEGER]; }
            Iddq_Vmax_VDDAR { __Type = A[INTEGER]; }
            Iddq_Vmax_VDDS { __Type = A[INTEGER]; }
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/Probe_flow.evo                                 */
/* Creation Date  : Tue Jan  3 17:12:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************************************/
/*** SubFlow Probe_SUB_FLOW                                               ***/
/****************************************************************************/
__SubFlow Probe_SUB_FLOW {
	__Node  Probe_OpenShrt_S_602 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "13";
		__Exec =  Probe_OpenShrt_S;
	}
	__Node  Probe_PreStress_S_603 {
		__XCoord = (180,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "14";
		__Exec =  Probe_PreStress_S;
	}
	__Node  Probe_MemRepair_S_604 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "15";
		__Exec =  Probe_MemRepair_S;
	}
	__Node  Probe_PreStressPostRepr_S_605 {
		__XCoord = (440,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "16";
		__Exec =  Probe_PreStressPostRepr_S;
	}
	__Node  Probe_PostStressFunc_S_606 {
		__XCoord = (570,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "17";
		__Exec =  Probe_PostStressFunc_S;
	}
	__Node  Probe_PostStressSrch_S_607 {
		__XCoord = (700,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "18";
		__Exec =  Probe_PostStressSrch_S;
	}
	__Node  Probe_PostStressIddq_S_608 {
		__XCoord = (830,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "19";
		__Exec =  Probe_PostStressIddq_S;
	}
	__Node  Probe_AtSpeed_S_609 {
		__XCoord = (960,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "20";
		__Exec =  Probe_AtSpeed_S;
	}
	__Node  Probe_Parametrics_S_610 {
		__XCoord = (1090,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "21";
		__Exec =  Probe_Parametrics_S;
	}
	__Node  Probe_SupplyShort_S_611 {
		__XCoord = (1220,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "22";
		__Exec =  Probe_SupplyShort_S;
	}
	__Node  Probe_CRES_S_612 {
		__XCoord = (1350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "23";
		__Exec =  Probe_CRES_S;
	}
	__Node FlowNode_613 {
		__XCoord = (1480,150);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 220;
		__TestID = "24";
		__PortSelect =  "if(GlobalNotBinned.Meas, 0, 1)";
	}
	__Node  GOOD_UNIT_614 {
		__XCoord = (1480,280);
		__InputPosition = 0;
		__TestID = "25";
		__Exec =  GOOD_UNIT;
	}
	__Node  F021_10XCycle_S_615 {
		__XCoord = (73,313);
		__Port[0] {
			__PortPosition = 2060;
		}
		__InputPosition = 0;
		__TestID = "";
		__Exec =  F021_10XCycle_S;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_OpenShrt_S_602;
	__PortConnections {
	 Probe_OpenShrt_S_602 __Port[0] =  Probe_PreStress_S_603;//To Port = 1;
	 Probe_PreStress_S_603 __Port[0] =  Probe_MemRepair_S_604;//To Port = 2;
	 Probe_MemRepair_S_604 __Port[0] =  Probe_PreStressPostRepr_S_605;//To Port = 3;
	 Probe_PreStressPostRepr_S_605 __Port[0] =  Probe_PostStressFunc_S_606;//To Port = 4;
	 Probe_PostStressFunc_S_606 __Port[0] =  Probe_PostStressSrch_S_607;//To Port = 5;
	 Probe_PostStressSrch_S_607 __Port[0] =  Probe_PostStressIddq_S_608;//To Port = 6;
	 Probe_PostStressIddq_S_608 __Port[0] =  Probe_Parametrics_S_610;//To Port = 8;
	 Probe_AtSpeed_S_609 __Port[0] =  Probe_Parametrics_S_610;//To Port = 8;
	 Probe_Parametrics_S_610 __Port[0] =  Probe_SupplyShort_S_611;//To Port = 9;
	 Probe_SupplyShort_S_611 __Port[0] =  Probe_CRES_S_612;//To Port = 10;
	 Probe_CRES_S_612 __Port[0] = FlowNode_613;//To Port = 11;
	FlowNode_613 __Port[0] =  GOOD_UNIT_614;//To Port = 12;
	}
}
/*** END SubFlow Probe_SUB_FLOW ***/

/****************************************************************************/
/*** SubFlow Probe_OpenShrt_S                                             ***/
/****************************************************************************/
__SubFlow Probe_OpenShrt_S {
	__Node  PinOpensTest_616 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 180;
		}
		__Port[3] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "26";
		__Calibration = Bllizar_Calibration;
		__Exec =  PinOpensTest;
	}
	__Node  F_OS_OPEN_617 {
		__XCoord = (100,364);
		__InputPosition = 20;
		__TestID = "27";
		__Exec =  F_OS_OPEN;
	}
	__Node  F_OS_SHRT_PIN_618 {
		__XCoord = (21,364);
		__InputPosition = 20;
		__TestID = "28";
		__Exec =  F_OS_SHRT_PIN;
	}
	__Node  F_OS_SHRT_PTPS_619 {
		__XCoord = (-20,295);
		__InputPosition = 20;
		__TestID = "29";
		__Exec =  F_OS_SHRT_PTPS;
	}
	__Node  AnalogConty_620 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 150;
		}
		__Port[3] {
			__PortPosition = 210;
		}
		__Port[4] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "30";
		__Calibration = Bllizar_Calibration;
		__Exec =  AnalogConty;
	}
	__Node  F_OS_OPEN_ANALOG_621 {
		__XCoord = (388,328);
		__InputPosition = 20;
		__TestID = "31";
		__Exec =  F_OS_OPEN_ANALOG;
	}
	__Node  F_OS_SHRT_ANALOG_622 {
		__XCoord = (325,355);
		__InputPosition = 20;
		__TestID = "32";
		__Exec =  F_OS_SHRT_ANALOG;
	}
	__Node  F_OS_OPEN_ANALOG_1_623 {
		__XCoord = (262,328);
		__InputPosition = 20;
		__TestID = "33";
		__Exec =  F_OS_OPEN_ANALOG_1;
	}
	__Node  F_OS_SHRT_ANALOG_2_624 {
		__XCoord = (235,265);
		__InputPosition = 20;
		__TestID = "34";
		__Exec =  F_OS_SHRT_ANALOG_2;
	}
	__Node  SupplyShorts1_625 {
		__XCoord = (625,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "35";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts1;
	}
	__Node  F_OS_SHRT_VDD_626 {
		__XCoord = (625,355);
		__InputPosition = 20;
		__TestID = "36";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node  SupplyOpensTest_627 {
		__XCoord = (775,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "37";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyOpensTest;
	}
	__Node  F_OS_OPEN_VDD_628 {
		__XCoord = (775,325);
		__InputPosition = 20;
		__TestID = "38";
		__Exec =  F_OS_OPEN_VDD;
	}
	__Node FlowNode_629 {
		__XCoord = (925,150);
		__InputPosition = 270;
		__TestID = "39";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  PinOpensTest_616;
	__PortConnections {
	 PinOpensTest_616 __Port[0] =  AnalogConty_620;//To Port = 4;
	 PinOpensTest_616 __Port[1] =  F_OS_OPEN_617;//To Port = 1;
	 PinOpensTest_616 __Port[2] =  F_OS_SHRT_PIN_618;//To Port = 2;
	 PinOpensTest_616 __Port[3] =  F_OS_SHRT_PTPS_619;//To Port = 3;
	 AnalogConty_620 __Port[0] =  SupplyShorts1_625;//To Port = 9;
	 AnalogConty_620 __Port[1] =  F_OS_OPEN_ANALOG_621;//To Port = 5;
	 AnalogConty_620 __Port[2] =  F_OS_SHRT_ANALOG_622;//To Port = 6;
	 AnalogConty_620 __Port[3] =  F_OS_OPEN_ANALOG_1_623;//To Port = 7;
	 AnalogConty_620 __Port[4] =  F_OS_SHRT_ANALOG_2_624;//To Port = 8;
	 SupplyShorts1_625 __Port[0] =  SupplyOpensTest_627;//To Port = 11;
	 SupplyShorts1_625 __Port[1] =  F_OS_SHRT_VDD_626;//To Port = 10;
	 SupplyOpensTest_627 __Port[0] = FlowNode_629;//To Port = 13;
	 SupplyOpensTest_627 __Port[1] =  F_OS_OPEN_VDD_628;//To Port = 12;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,925,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_OpenShrt_S ***/

/****************************************************************************/
/*** SubFlow Probe_SrchVdd_Vmin_Pre1_S                                    ***/
/****************************************************************************/
__SubFlow Probe_SrchVdd_Vmin_Pre1_S {
	__Node  VminSearchPre1_630 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "40";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1;
	}
	__Node  PreBinFlow_S_631 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "41";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_632 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "42";
		__Exec =  F_FUNC_Vmin;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_1_633 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "43";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_1;
	}
	__Node  PreBinFlow_S_634 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "44";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_635 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "45";
		__Exec =  F_FUNC_Vmin_GROS_100_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_2_636 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "46";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_2;
	}
	__Node  PreBinFlow_S_637 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "47";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_638 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "48";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_3_639 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "49";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_3;
	}
	__Node  PreBinFlow_S_640 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "50";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_641 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "51";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_4_642 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "52";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_4;
	}
	__Node  PreBinFlow_S_643 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "53";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_644 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "54";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_5_645 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "55";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_5;
	}
	__Node  PreBinFlow_S_646 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "56";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_647 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "57";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_6_648 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "58";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_6;
	}
	__Node  PreBinFlow_S_649 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "59";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_650 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "60";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_7_651 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "61";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_7;
	}
	__Node  PreBinFlow_S_652 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "62";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_OTG_100_653 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "63";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_8_654 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "64";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_8;
	}
	__Node  PreBinFlow_S_655 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "65";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_1_656 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "66";
		__Exec =  F_FUNC_Vmin_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_9_657 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "67";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_9;
	}
	__Node  PreBinFlow_S_658 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "68";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_CHG_100_659 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "69";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_660 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "70";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPre1_630;
	__PortConnections {
	 VminSearchPre1_630 __Port[0] =  VminSearchPre1_1_633;//To Port = 3;
	 VminSearchPre1_630 __Port[1] =  PreBinFlow_S_631;//To Port = 1;
	 PreBinFlow_S_631 __Port[0] =  F_FUNC_Vmin_632;//To Port = 2;
	 F_FUNC_Vmin_632 __Port[0] =  VminSearchPre1_1_633;//To Port = 3;
	 VminSearchPre1_1_633 __Port[0] =  VminSearchPre1_2_636;//To Port = 6;
	 VminSearchPre1_1_633 __Port[1] =  PreBinFlow_S_634;//To Port = 4;
	 PreBinFlow_S_634 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_635;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_635 __Port[0] =  VminSearchPre1_2_636;//To Port = 6;
	 VminSearchPre1_2_636 __Port[0] =  VminSearchPre1_3_639;//To Port = 9;
	 VminSearchPre1_2_636 __Port[1] =  PreBinFlow_S_637;//To Port = 7;
	 PreBinFlow_S_637 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_638;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_638 __Port[0] =  VminSearchPre1_3_639;//To Port = 9;
	 VminSearchPre1_3_639 __Port[0] =  VminSearchPre1_4_642;//To Port = 12;
	 VminSearchPre1_3_639 __Port[1] =  PreBinFlow_S_640;//To Port = 10;
	 PreBinFlow_S_640 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_641;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_641 __Port[0] =  VminSearchPre1_4_642;//To Port = 12;
	 VminSearchPre1_4_642 __Port[0] =  VminSearchPre1_5_645;//To Port = 15;
	 VminSearchPre1_4_642 __Port[1] =  PreBinFlow_S_643;//To Port = 13;
	 PreBinFlow_S_643 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_644;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_644 __Port[0] =  VminSearchPre1_5_645;//To Port = 15;
	 VminSearchPre1_5_645 __Port[0] =  VminSearchPre1_6_648;//To Port = 18;
	 VminSearchPre1_5_645 __Port[1] =  PreBinFlow_S_646;//To Port = 16;
	 PreBinFlow_S_646 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_647;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_647 __Port[0] =  VminSearchPre1_6_648;//To Port = 18;
	 VminSearchPre1_6_648 __Port[0] =  VminSearchPre1_7_651;//To Port = 21;
	 VminSearchPre1_6_648 __Port[1] =  PreBinFlow_S_649;//To Port = 19;
	 PreBinFlow_S_649 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_650;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_650 __Port[0] =  VminSearchPre1_7_651;//To Port = 21;
	 VminSearchPre1_7_651 __Port[0] =  VminSearchPre1_8_654;//To Port = 24;
	 VminSearchPre1_7_651 __Port[1] =  PreBinFlow_S_652;//To Port = 22;
	 PreBinFlow_S_652 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_OTG_100_653;//To Port = 23;
	 F_FUNC_Vmin_ANALOG_USB_OTG_100_653 __Port[0] =  VminSearchPre1_8_654;//To Port = 24;
	 VminSearchPre1_8_654 __Port[0] =  VminSearchPre1_9_657;//To Port = 27;
	 VminSearchPre1_8_654 __Port[1] =  PreBinFlow_S_655;//To Port = 25;
	 PreBinFlow_S_655 __Port[0] =  F_FUNC_Vmin_1_656;//To Port = 26;
	 F_FUNC_Vmin_1_656 __Port[0] =  VminSearchPre1_9_657;//To Port = 27;
	 VminSearchPre1_9_657 __Port[0] = FlowNode_660;//To Port = 30;
	 VminSearchPre1_9_657 __Port[1] =  PreBinFlow_S_658;//To Port = 28;
	 PreBinFlow_S_658 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_CHG_100_659;//To Port = 29;
	 F_FUNC_Vmin_ANALOG_USB_CHG_100_659 __Port[0] = FlowNode_660;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_SrchVdd_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow Probe_Func_Vmin_Pre1_S                                       ***/
/****************************************************************************/
__SubFlow Probe_Func_Vmin_Pre1_S {
	__Node  FuncVminPre1_661 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "71";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1;
	}
	__Node  PreBinFlow_S_662 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "72";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_2_663 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "73";
		__Exec =  F_FUNC_Vmin_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_1_664 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "74";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_1;
	}
	__Node  PreBinFlow_S_665 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "75";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_3_666 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "76";
		__Exec =  F_FUNC_Vmin_GROS_100_pre_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_2_667 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "77";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_2;
	}
	__Node  PreBinFlow_S_668 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "78";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_4_669 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "79";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_3_670 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "80";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_3;
	}
	__Node  PreBinFlow_S_671 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "81";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_5_672 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "82";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_4_673 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "83";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_4;
	}
	__Node  PreBinFlow_S_674 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "84";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_6_675 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "85";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_5_676 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "86";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_5;
	}
	__Node  PreBinFlow_S_677 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "87";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_7_678 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "88";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_6_679 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "89";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_6;
	}
	__Node  PreBinFlow_S_680 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "90";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_8_681 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "91";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_7_682 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "92";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_7;
	}
	__Node  PreBinFlow_S_683 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "93";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_10_684 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "94";
		__Exec =  F_FUNC_Vmin_10;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_8_685 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "95";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_8;
	}
	__Node  PreBinFlow_S_686 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "96";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_11_687 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "97";
		__Exec =  F_FUNC_Vmin_11;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_9_688 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "98";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_9;
	}
	__Node  PreBinFlow_S_689 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "99";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_13_690 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "100";
		__Exec =  F_FUNC_Vmin_13;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_691 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "101";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre1_661;
	__PortConnections {
	 FuncVminPre1_661 __Port[0] =  FuncVminPre1_1_664;//To Port = 3;
	 FuncVminPre1_661 __Port[1] =  PreBinFlow_S_662;//To Port = 1;
	 PreBinFlow_S_662 __Port[0] =  F_FUNC_Vmin_2_663;//To Port = 2;
	 F_FUNC_Vmin_2_663 __Port[0] =  FuncVminPre1_1_664;//To Port = 3;
	 FuncVminPre1_1_664 __Port[0] =  FuncVminPre1_2_667;//To Port = 6;
	 FuncVminPre1_1_664 __Port[1] =  PreBinFlow_S_665;//To Port = 4;
	 PreBinFlow_S_665 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_3_666;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_3_666 __Port[0] =  FuncVminPre1_2_667;//To Port = 6;
	 FuncVminPre1_2_667 __Port[0] =  FuncVminPre1_3_670;//To Port = 9;
	 FuncVminPre1_2_667 __Port[1] =  PreBinFlow_S_668;//To Port = 7;
	 PreBinFlow_S_668 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_4_669;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_4_669 __Port[0] =  FuncVminPre1_3_670;//To Port = 9;
	 FuncVminPre1_3_670 __Port[0] =  FuncVminPre1_4_673;//To Port = 12;
	 FuncVminPre1_3_670 __Port[1] =  PreBinFlow_S_671;//To Port = 10;
	 PreBinFlow_S_671 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_5_672;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_5_672 __Port[0] =  FuncVminPre1_4_673;//To Port = 12;
	 FuncVminPre1_4_673 __Port[0] =  FuncVminPre1_5_676;//To Port = 15;
	 FuncVminPre1_4_673 __Port[1] =  PreBinFlow_S_674;//To Port = 13;
	 PreBinFlow_S_674 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_6_675;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_6_675 __Port[0] =  FuncVminPre1_5_676;//To Port = 15;
	 FuncVminPre1_5_676 __Port[0] =  FuncVminPre1_6_679;//To Port = 18;
	 FuncVminPre1_5_676 __Port[1] =  PreBinFlow_S_677;//To Port = 16;
	 PreBinFlow_S_677 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_7_678;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_7_678 __Port[0] =  FuncVminPre1_6_679;//To Port = 18;
	 FuncVminPre1_6_679 __Port[0] =  FuncVminPre1_7_682;//To Port = 21;
	 FuncVminPre1_6_679 __Port[1] =  PreBinFlow_S_680;//To Port = 19;
	 PreBinFlow_S_680 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_8_681;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_8_681 __Port[0] =  FuncVminPre1_7_682;//To Port = 21;
	 FuncVminPre1_7_682 __Port[0] =  FuncVminPre1_8_685;//To Port = 24;
	 FuncVminPre1_7_682 __Port[1] =  PreBinFlow_S_683;//To Port = 22;
	 PreBinFlow_S_683 __Port[0] =  F_FUNC_Vmin_10_684;//To Port = 23;
	 F_FUNC_Vmin_10_684 __Port[0] =  FuncVminPre1_8_685;//To Port = 24;
	 FuncVminPre1_8_685 __Port[0] =  FuncVminPre1_9_688;//To Port = 27;
	 FuncVminPre1_8_685 __Port[1] =  PreBinFlow_S_686;//To Port = 25;
	 PreBinFlow_S_686 __Port[0] =  F_FUNC_Vmin_11_687;//To Port = 26;
	 F_FUNC_Vmin_11_687 __Port[0] =  FuncVminPre1_9_688;//To Port = 27;
	 FuncVminPre1_9_688 __Port[0] = FlowNode_691;//To Port = 30;
	 FuncVminPre1_9_688 __Port[1] =  PreBinFlow_S_689;//To Port = 28;
	 PreBinFlow_S_689 __Port[0] =  F_FUNC_Vmin_13_690;//To Port = 29;
	 F_FUNC_Vmin_13_690 __Port[0] = FlowNode_691;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Func_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow Probe_DieID_Read_Pre_S                                       ***/
/****************************************************************************/
__SubFlow Probe_DieID_Read_Pre_S {
	__Node  CheckFromPre_692 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "102";
		__Calibration = Bllizar_Calibration;
		__Exec =  CheckFromPre;
	}
	__Node  F_FUSE_ROM_READ_693 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "103";
		__Exec =  F_FUSE_ROM_READ;
	}
	__Node  FFDieIDRead_694 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_VEfuseR"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "104";
		__Calibration = Bllizar_Calibration;
		__Exec =  FFDieIDRead;
	}
	__Node  F_FUSE_DIEID_PRE_READ_695 {
		__XCoord = (200,325);
		__InputPosition = 20;
		__TestID = "105";
		__Exec =  F_FUSE_DIEID_PRE_READ;
	}
	__Node FlowNode_696 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "106";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  CheckFromPre_692;
	__PortConnections {
	 CheckFromPre_692 __Port[0] =  FFDieIDRead_694;//To Port = 2;
	 CheckFromPre_692 __Port[1] =  F_FUSE_ROM_READ_693;//To Port = 1;
	 FFDieIDRead_694 __Port[0] = FlowNode_696;//To Port = 4;
	 FFDieIDRead_694 __Port[1] =  F_FUSE_DIEID_PRE_READ_695;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_DieID_Read_Pre_S ***/

/****************************************************************************/
/*** SubFlow Probe_PreStress_S                                            ***/
/****************************************************************************/
__SubFlow Probe_PreStress_S {
	__Node  Probe_SrchVdd_Vmin_Pre1_S_697 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "107";
		__Exec =  Probe_SrchVdd_Vmin_Pre1_S;
	}
	__Node  Probe_Func_Vmin_Pre1_S_698 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "108";
		__Exec =  Probe_Func_Vmin_Pre1_S;
	}
	__Node  Probe_DieID_Read_Pre_S_699 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "109";
		__Exec =  Probe_DieID_Read_Pre_S;
	}
	__Node FlowNode_700 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "110";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_SrchVdd_Vmin_Pre1_S_697;
	__PortConnections {
	 Probe_SrchVdd_Vmin_Pre1_S_697 __Port[0] =  Probe_Func_Vmin_Pre1_S_698;//To Port = 1;
	 Probe_Func_Vmin_Pre1_S_698 __Port[0] =  Probe_DieID_Read_Pre_S_699;//To Port = 2;
	 Probe_DieID_Read_Pre_S_699 __Port[0] = FlowNode_700;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PreStress_S ***/

/****************************************************************************/
/*** SubFlow Probe_PreMemRepair_S                                         ***/
/****************************************************************************/
__SubFlow Probe_PreMemRepair_S {
	__Node  MemGNGVboxLO_701 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_14"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "111";
		__Calibration = Bllizar_Calibration;
		__Exec =  MemGNGVboxLO;
	}
	__Node FlowNode_702 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "112";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  MemGNGVboxLO_701;
	__PortConnections {
	 MemGNGVboxLO_701 __Port[0] = FlowNode_702;//To Port = 1;
	 MemGNGVboxLO_701 __Port[1] = FlowNode_702;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PreMemRepair_S ***/

/****************************************************************************/
/*** SubFlow Probe_MemDatalog_S                                           ***/
/****************************************************************************/
__SubFlow Probe_MemDatalog_S {
	__Node  FuncDiagsVboxLO_DIAG_VLO_200_703 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_13"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "113";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncDiagsVboxLO_DIAG_VLO_200;
	}
	__Node  FuncDiagsVboxHI_DIAG_VHI_200_704 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_13"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxhi"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "114";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncDiagsVboxHI_DIAG_VHI_200;
	}
	__Node  SendESDA_705 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "115";
		__Calibration = Bllizar_Calibration;
		__Exec =  SendESDA;
	}
	__Node  PreBinFlow_S_706 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "116";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_REPAIR_ESDA_707 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "117";
		__Exec =  F_FUNC_REPAIR_ESDA;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_708 {
		__XCoord = (500,150);
		__InputPosition = 270;
		__TestID = "118";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncDiagsVboxLO_DIAG_VLO_200_703;
	__PortConnections {
	 FuncDiagsVboxLO_DIAG_VLO_200_703 __Port[0] =  FuncDiagsVboxHI_DIAG_VHI_200_704;//To Port = 1;
	 FuncDiagsVboxLO_DIAG_VLO_200_703 __Port[1] =  FuncDiagsVboxHI_DIAG_VHI_200_704;//To Port = 1;
	 FuncDiagsVboxHI_DIAG_VHI_200_704 __Port[0] =  SendESDA_705;//To Port = 2;
	 FuncDiagsVboxHI_DIAG_VHI_200_704 __Port[1] =  SendESDA_705;//To Port = 2;
	 SendESDA_705 __Port[0] = FlowNode_708;//To Port = 5;
	 SendESDA_705 __Port[1] =  PreBinFlow_S_706;//To Port = 3;
	 PreBinFlow_S_706 __Port[0] =  F_FUNC_REPAIR_ESDA_707;//To Port = 4;
	 F_FUNC_REPAIR_ESDA_707 __Port[0] = FlowNode_708;//To Port = 5;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_MemDatalog_S ***/

/****************************************************************************/
/*** SubFlow Probe_CheckNonDiags_S                                        ***/
/****************************************************************************/
__SubFlow Probe_CheckNonDiags_S {
	__Node  CheckNonDiagsFlag_709 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "119";
		__Calibration = Bllizar_Calibration;
		__Exec =  CheckNonDiagsFlag;
	}
	__Node  PreBinFlow_S_710 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "120";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_REPAIR_NONREPAIR_711 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "121";
		__Exec =  F_FUNC_REPAIR_NONREPAIR;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_712 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "122";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  CheckNonDiagsFlag_709;
	__PortConnections {
	 CheckNonDiagsFlag_709 __Port[0] = FlowNode_712;//To Port = 3;
	 CheckNonDiagsFlag_709 __Port[1] =  PreBinFlow_S_710;//To Port = 1;
	 PreBinFlow_S_710 __Port[0] =  F_FUNC_REPAIR_NONREPAIR_711;//To Port = 2;
	 F_FUNC_REPAIR_NONREPAIR_711 __Port[0] = FlowNode_712;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_CheckNonDiags_S ***/

/****************************************************************************/
/*** SubFlow Probe_CheckRedDiags_S                                        ***/
/****************************************************************************/
__SubFlow Probe_CheckRedDiags_S {
	__Node  CheckRedundancy_713 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "123";
		__Calibration = Bllizar_Calibration;
		__Exec =  CheckRedundancy;
	}
	__Node  PreBinFlow_S_714 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "124";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_REPAIR_REDUNDANCY_715 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "125";
		__Exec =  F_FUNC_REPAIR_REDUNDANCY;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_716 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "126";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  CheckRedundancy_713;
	__PortConnections {
	 CheckRedundancy_713 __Port[0] = FlowNode_716;//To Port = 3;
	 CheckRedundancy_713 __Port[1] =  PreBinFlow_S_714;//To Port = 1;
	 PreBinFlow_S_714 __Port[0] =  F_FUNC_REPAIR_REDUNDANCY_715;//To Port = 2;
	 F_FUNC_REPAIR_REDUNDANCY_715 __Port[0] = FlowNode_716;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_CheckRedDiags_S ***/

/****************************************************************************/
/*** SubFlow Probe_MemEfusePgm_S                                          ***/
/****************************************************************************/
__SubFlow Probe_MemEfusePgm_S {
	__Node  ProgFuseFarm_717 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "127";
		__Calibration = Bllizar_Calibration;
		__Exec =  ProgFuseFarm;
	}
	__Node  F_FUSE_MEM_UNREPAIRABLE_718 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "128";
		__Exec =  F_FUSE_MEM_UNREPAIRABLE;
	}
	__Node FlowNode_719 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "129";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  ProgFuseFarm_717;
	__PortConnections {
	 ProgFuseFarm_717 __Port[0] = FlowNode_719;//To Port = 2;
	 ProgFuseFarm_717 __Port[1] =  F_FUSE_MEM_UNREPAIRABLE_718;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_MemEfusePgm_S ***/

/****************************************************************************/
/*** SubFlow Probe_PostMemRepair_S                                        ***/
/****************************************************************************/
__SubFlow Probe_PostMemRepair_S {
	__Node  MemGNGVboxLO_720 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_14"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "130";
		__Calibration = Bllizar_Calibration;
		__Exec =  MemGNGVboxLO;
	}
	__Node  PreBinFlow_S_721 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "131";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vboxlo_722 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "132";
		__Exec =  F_FUNC_Vboxlo;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_723 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "133";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  MemGNGVboxLO_720;
	__PortConnections {
	 MemGNGVboxLO_720 __Port[0] = FlowNode_723;//To Port = 3;
	 MemGNGVboxLO_720 __Port[1] =  PreBinFlow_S_721;//To Port = 1;
	 PreBinFlow_S_721 __Port[0] =  F_FUNC_Vboxlo_722;//To Port = 2;
	 F_FUNC_Vboxlo_722 __Port[0] = FlowNode_723;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PostMemRepair_S ***/

/****************************************************************************/
/*** SubFlow Probe_MemRepair_S                                            ***/
/****************************************************************************/
__SubFlow Probe_MemRepair_S {
	__Node  Probe_PreMemRepair_S_724 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__Port[1] {
			__PortPosition = 125;
		}
		__InputPosition = 290;
		__TestID = "134";
		__Exec =  Probe_PreMemRepair_S;
	}
	__Node  Probe_MemDatalog_S_725 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "135";
		__Exec =  Probe_MemDatalog_S;
	}
	__Node  Probe_CheckNonDiags_S_726 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "136";
		__Exec =  Probe_CheckNonDiags_S;
	}
	__Node  Probe_CheckRedDiags_S_727 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "137";
		__Exec =  Probe_CheckRedDiags_S;
	}
	__Node  Probe_MemEfusePgm_S_728 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "138";
		__Exec =  Probe_MemEfusePgm_S;
	}
	__Node  Probe_PostMemRepair_S_729 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "139";
		__Exec =  Probe_PostMemRepair_S;
	}
	__Node FlowNode_730 {
		__XCoord = (950,50);
		__InputPosition = 270;
		__TestID = "140";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_PreMemRepair_S_724;
	__PortConnections {
	 Probe_PreMemRepair_S_724 __Port[0] = FlowNode_730;//To Port = 6;
	 Probe_PreMemRepair_S_724 __Port[1] = FlowNode_730;//To Port = 6;
	 Probe_MemDatalog_S_725 __Port[0] =  Probe_CheckNonDiags_S_726;//To Port = 2;
	 Probe_CheckNonDiags_S_726 __Port[0] =  Probe_CheckRedDiags_S_727;//To Port = 3;
	 Probe_CheckRedDiags_S_727 __Port[0] =  Probe_MemEfusePgm_S_728;//To Port = 4;
	 Probe_MemEfusePgm_S_728 __Port[0] =  Probe_PostMemRepair_S_729;//To Port = 5;
	 Probe_PostMemRepair_S_729 __Port[0] = FlowNode_730;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_MemRepair_S ***/

/****************************************************************************/
/*** SubFlow Probe_Func_Vmin_Pre2_S                                       ***/
/****************************************************************************/
__SubFlow Probe_Func_Vmin_Pre2_S {
	__Node  FuncVminPre2_731 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "141";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2;
	}
	__Node  PreBinFlow_S_732 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "142";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_pre_733 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "143";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre2_1_734 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "144";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2_1;
	}
	__Node  PreBinFlow_S_735 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "145";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_1_pre_736 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "146";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_737 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "147";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre2_731;
	__PortConnections {
	 FuncVminPre2_731 __Port[0] =  FuncVminPre2_1_734;//To Port = 3;
	 FuncVminPre2_731 __Port[1] =  PreBinFlow_S_732;//To Port = 1;
	 PreBinFlow_S_732 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_pre_733;//To Port = 2;
	 F_FUNC_Vmin_BIST_PROD_33_pre_733 __Port[0] =  FuncVminPre2_1_734;//To Port = 3;
	 FuncVminPre2_1_734 __Port[0] = FlowNode_737;//To Port = 6;
	 FuncVminPre2_1_734 __Port[1] =  PreBinFlow_S_735;//To Port = 4;
	 PreBinFlow_S_735 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_1_pre_736;//To Port = 5;
	 F_FUNC_Vmin_BIST_PROD_33_1_pre_736 __Port[0] = FlowNode_737;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Func_Vmin_Pre2_S ***/

/****************************************************************************/
/*** SubFlow Probe_DieID_Prog_S                                           ***/
/****************************************************************************/
__SubFlow Probe_DieID_Prog_S {
	__Node  FFDieIDProg_738 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_VEfuseP"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "148";
		__Calibration = Bllizar_Calibration;
		__Exec =  FFDieIDProg;
	}
	__Node  F_FUSE_DIEID_PROG_739 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "149";
		__Exec =  F_FUSE_DIEID_PROG;
	}
	__Node FlowNode_740 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "150";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FFDieIDProg_738;
	__PortConnections {
	 FFDieIDProg_738 __Port[0] = FlowNode_740;//To Port = 2;
	 FFDieIDProg_738 __Port[1] =  F_FUSE_DIEID_PROG_739;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_DieID_Prog_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq0_VboxLO_S                                         ***/
/****************************************************************************/
__SubFlow Probe_Iddq0_VboxLO_S {
	__Node  IddqVboxLOPre_741 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "151";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPre;
	}
	__Node  PreBinFlow_S_742 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "152";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_pre_VDDS_743 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "153";
		__Exec =  F_LEAK_IDDQ_Vboxlo_pre_VDDS;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVboxLOPre_1_744 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "154";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPre_1;
	}
	__Node  PreBinFlow_S_745 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "155";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_pre_VDDS_1_746 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "156";
		__Exec =  F_LEAK_IDDQ_Vboxlo_pre_VDDS_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_747 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "157";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVboxLOPre_741;
	__PortConnections {
	 IddqVboxLOPre_741 __Port[0] =  IddqVboxLOPre_1_744;//To Port = 3;
	 IddqVboxLOPre_741 __Port[1] =  PreBinFlow_S_742;//To Port = 1;
	 PreBinFlow_S_742 __Port[0] =  F_LEAK_IDDQ_Vboxlo_pre_VDDS_743;//To Port = 2;
	 F_LEAK_IDDQ_Vboxlo_pre_VDDS_743 __Port[0] =  IddqVboxLOPre_1_744;//To Port = 3;
	 IddqVboxLOPre_1_744 __Port[0] = FlowNode_747;//To Port = 6;
	 IddqVboxLOPre_1_744 __Port[1] =  PreBinFlow_S_745;//To Port = 4;
	 PreBinFlow_S_745 __Port[0] =  F_LEAK_IDDQ_Vboxlo_pre_VDDS_1_746;//To Port = 5;
	 F_LEAK_IDDQ_Vboxlo_pre_VDDS_1_746 __Port[0] = FlowNode_747;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq0_VboxLO_S ***/

/****************************************************************************/
/*** SubFlow Probe_PreStressPostRepr_S                                    ***/
/****************************************************************************/
__SubFlow Probe_PreStressPostRepr_S {
	__Node  Probe_Func_Vmin_Pre2_S_748 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "158";
		__Exec =  Probe_Func_Vmin_Pre2_S;
	}
	__Node  Probe_DieID_Prog_S_749 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "159";
		__Exec =  Probe_DieID_Prog_S;
	}
	__Node  Probe_Iddq0_VboxLO_S_750 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "160";
		__Exec =  Probe_Iddq0_VboxLO_S;
	}
	__Node FlowNode_751 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "161";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_Func_Vmin_Pre2_S_748;
	__PortConnections {
	 Probe_Func_Vmin_Pre2_S_748 __Port[0] =  Probe_DieID_Prog_S_749;//To Port = 1;
	 Probe_DieID_Prog_S_749 __Port[0] =  Probe_Iddq0_VboxLO_S_750;//To Port = 2;
	 Probe_Iddq0_VboxLO_S_750 __Port[0] = FlowNode_751;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PreStressPostRepr_S ***/

/****************************************************************************/
/*** SubFlow Probe_Func_NonVbox_S                                         ***/
/****************************************************************************/
__SubFlow Probe_Func_NonVbox_S {
	__Node  FuncVmaxNonVboxTDL_752 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "162";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL;
	}
	__Node  FuncVmaxNonVboxTDL_1_753 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "163";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_1;
	}
	__Node  FuncVmaxNonVboxTDL_2_754 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "164";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_2;
	}
	__Node  FuncVmaxNonVboxTDL_3_755 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "165";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_3;
	}
	__Node  FuncVmaxNonVboxTDL_4_756 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "166";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_4;
	}
	__Node  FuncVmaxNonVboxTDL_5_757 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "167";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_5;
	}
	__Node  FuncVmaxNonVboxTDL_6_758 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "168";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_6;
	}
	__Node  FuncVmaxNonVboxTDL_7_759 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "169";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_7;
	}
	__Node  FuncVmaxNonVboxTDL_8_760 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "170";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_8;
	}
	__Node  FuncVmaxNonVboxTDL_9_761 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "171";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_9;
	}
	__Node  FuncVmaxNonVboxTDL_10_762 {
		__XCoord = (1550,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "172";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_10;
	}
	__Node  FuncVmaxNonVboxTDL_11_763 {
		__XCoord = (1700,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "173";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxNonVboxTDL_11;
	}
	__Node  FuncVnomNonVboxTDL_764 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "174";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL;
	}
	__Node  PreBinFlow_S_765 {
		__XCoord = (55,465);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "175";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_766 {
		__XCoord = (55,595);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "176";
		__Exec =  F_FUNC_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_767 {
		__XCoord = (-15,395);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "177";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_768 {
		__XCoord = (-15,525);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "178";
		__Exec =  F_FUNC_Vnom;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_1_769 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "179";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_1;
	}
	__Node  PreBinFlow_S_770 {
		__XCoord = (205,435);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "180";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_post_771 {
		__XCoord = (205,565);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "181";
		__Exec =  F_FUNC_Vmax_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_772 {
		__XCoord = (135,365);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "182";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_post_773 {
		__XCoord = (135,495);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "183";
		__Exec =  F_FUNC_Vnom_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_2_774 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "184";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_2;
	}
	__Node  PreBinFlow_S_775 {
		__XCoord = (355,465);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "185";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_1_post_776 {
		__XCoord = (355,595);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "186";
		__Exec =  F_FUNC_Vmax_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_777 {
		__XCoord = (285,395);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "187";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_1_post_778 {
		__XCoord = (285,525);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "188";
		__Exec =  F_FUNC_Vnom_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_3_779 {
		__XCoord = (500,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "189";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_3;
	}
	__Node  PreBinFlow_S_780 {
		__XCoord = (505,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "190";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_2_post_781 {
		__XCoord = (505,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "191";
		__Exec =  F_FUNC_Vmax_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_782 {
		__XCoord = (435,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "192";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_2_post_783 {
		__XCoord = (435,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "193";
		__Exec =  F_FUNC_Vnom_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_4_784 {
		__XCoord = (650,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "194";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_4;
	}
	__Node  PreBinFlow_S_785 {
		__XCoord = (655,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "195";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_3_post_786 {
		__XCoord = (655,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "196";
		__Exec =  F_FUNC_Vmax_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_787 {
		__XCoord = (585,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "197";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_3_post_788 {
		__XCoord = (585,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "198";
		__Exec =  F_FUNC_Vnom_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_5_789 {
		__XCoord = (800,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "199";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_5;
	}
	__Node  PreBinFlow_S_790 {
		__XCoord = (805,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "200";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_4_post_791 {
		__XCoord = (805,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "201";
		__Exec =  F_FUNC_Vmax_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_792 {
		__XCoord = (735,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "202";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_4_post_793 {
		__XCoord = (735,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "203";
		__Exec =  F_FUNC_Vnom_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_6_794 {
		__XCoord = (950,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "204";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_6;
	}
	__Node  PreBinFlow_S_795 {
		__XCoord = (955,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "205";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_166p66_post_796 {
		__XCoord = (955,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "206";
		__Exec =  F_FUNC_Vmax_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_797 {
		__XCoord = (885,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "207";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_166p66_post_798 {
		__XCoord = (885,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "208";
		__Exec =  F_FUNC_Vnom_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_7_799 {
		__XCoord = (1100,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "209";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_7;
	}
	__Node  PreBinFlow_S_800 {
		__XCoord = (1105,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "210";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_OTG_100_801 {
		__XCoord = (1105,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "211";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_802 {
		__XCoord = (1035,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "212";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_ANALOG_USB_OTG_100_803 {
		__XCoord = (1035,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "213";
		__Exec =  F_FUNC_Vnom_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_8_804 {
		__XCoord = (1250,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "214";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_8;
	}
	__Node  PreBinFlow_S_805 {
		__XCoord = (1255,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "215";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_post_806 {
		__XCoord = (1255,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "216";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_807 {
		__XCoord = (1185,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "217";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_BIST_PROD_33_post_808 {
		__XCoord = (1185,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "218";
		__Exec =  F_FUNC_Vnom_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_9_809 {
		__XCoord = (1400,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "219";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_9;
	}
	__Node  PreBinFlow_S_810 {
		__XCoord = (1405,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "220";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_1_811 {
		__XCoord = (1405,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "221";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_812 {
		__XCoord = (1335,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "222";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_BIST_PROD_33_1_813 {
		__XCoord = (1335,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "223";
		__Exec =  F_FUNC_Vnom_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_10_814 {
		__XCoord = (1550,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "224";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_10;
	}
	__Node  PreBinFlow_S_815 {
		__XCoord = (1555,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "225";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_1_816 {
		__XCoord = (1555,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "226";
		__Exec =  F_FUNC_Vmax_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_817 {
		__XCoord = (1485,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "227";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_2_818 {
		__XCoord = (1485,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "228";
		__Exec =  F_FUNC_Vnom_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_11_819 {
		__XCoord = (1700,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "229";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_11;
	}
	__Node  PreBinFlow_S_820 {
		__XCoord = (1705,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "230";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_CHG_100_821 {
		__XCoord = (1705,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "231";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_822 {
		__XCoord = (1635,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "232";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_ANALOG_USB_CHG_100_823 {
		__XCoord = (1635,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "233";
		__Exec =  F_FUNC_Vnom_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_824 {
		__XCoord = (1605,700);
		__InputPosition = 90;
		__TestID = "234";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVmaxNonVboxTDL_752;
	__PortConnections {
	 FuncVmaxNonVboxTDL_752 __Port[0] =  FuncVmaxNonVboxTDL_1_753;//To Port = 1;
	 FuncVmaxNonVboxTDL_752 __Port[1] =  FuncVnomNonVboxTDL_764;//To Port = 12;
	 FuncVmaxNonVboxTDL_1_753 __Port[0] =  FuncVmaxNonVboxTDL_2_754;//To Port = 2;
	 FuncVmaxNonVboxTDL_1_753 __Port[1] =  FuncVnomNonVboxTDL_1_769;//To Port = 17;
	 FuncVmaxNonVboxTDL_2_754 __Port[0] =  FuncVmaxNonVboxTDL_3_755;//To Port = 3;
	 FuncVmaxNonVboxTDL_2_754 __Port[1] =  FuncVnomNonVboxTDL_2_774;//To Port = 22;
	 FuncVmaxNonVboxTDL_3_755 __Port[0] =  FuncVmaxNonVboxTDL_4_756;//To Port = 4;
	 FuncVmaxNonVboxTDL_3_755 __Port[1] =  FuncVnomNonVboxTDL_3_779;//To Port = 27;
	 FuncVmaxNonVboxTDL_4_756 __Port[0] =  FuncVmaxNonVboxTDL_5_757;//To Port = 5;
	 FuncVmaxNonVboxTDL_4_756 __Port[1] =  FuncVnomNonVboxTDL_4_784;//To Port = 32;
	 FuncVmaxNonVboxTDL_5_757 __Port[0] =  FuncVmaxNonVboxTDL_6_758;//To Port = 6;
	 FuncVmaxNonVboxTDL_5_757 __Port[1] =  FuncVnomNonVboxTDL_5_789;//To Port = 37;
	 FuncVmaxNonVboxTDL_6_758 __Port[0] =  FuncVmaxNonVboxTDL_7_759;//To Port = 7;
	 FuncVmaxNonVboxTDL_6_758 __Port[1] =  FuncVnomNonVboxTDL_6_794;//To Port = 42;
	 FuncVmaxNonVboxTDL_7_759 __Port[0] =  FuncVmaxNonVboxTDL_8_760;//To Port = 8;
	 FuncVmaxNonVboxTDL_7_759 __Port[1] =  FuncVnomNonVboxTDL_7_799;//To Port = 47;
	 FuncVmaxNonVboxTDL_8_760 __Port[0] =  FuncVmaxNonVboxTDL_9_761;//To Port = 9;
	 FuncVmaxNonVboxTDL_8_760 __Port[1] =  FuncVnomNonVboxTDL_8_804;//To Port = 52;
	 FuncVmaxNonVboxTDL_9_761 __Port[0] =  FuncVmaxNonVboxTDL_10_762;//To Port = 10;
	 FuncVmaxNonVboxTDL_9_761 __Port[1] =  FuncVnomNonVboxTDL_9_809;//To Port = 57;
	 FuncVmaxNonVboxTDL_10_762 __Port[0] =  FuncVmaxNonVboxTDL_11_763;//To Port = 11;
	 FuncVmaxNonVboxTDL_10_762 __Port[1] =  FuncVnomNonVboxTDL_10_814;//To Port = 62;
	 FuncVmaxNonVboxTDL_11_763 __Port[0] = FlowNode_824;//To Port = 72;
	 FuncVmaxNonVboxTDL_11_763 __Port[1] =  FuncVnomNonVboxTDL_11_819;//To Port = 67;
	 FuncVnomNonVboxTDL_764 __Port[0] =  PreBinFlow_S_765;//To Port = 13;
	 FuncVnomNonVboxTDL_764 __Port[1] =  PreBinFlow_S_767;//To Port = 15;
	 PreBinFlow_S_765 __Port[0] =  F_FUNC_Vmax_766;//To Port = 14;
	 F_FUNC_Vmax_766 __Port[0] =  FuncVmaxNonVboxTDL_1_753;//To Port = 1;
	 PreBinFlow_S_767 __Port[0] =  F_FUNC_Vnom_768;//To Port = 16;
	 F_FUNC_Vnom_768 __Port[0] =  FuncVmaxNonVboxTDL_1_753;//To Port = 1;
	 FuncVnomNonVboxTDL_1_769 __Port[0] =  PreBinFlow_S_770;//To Port = 18;
	 FuncVnomNonVboxTDL_1_769 __Port[1] =  PreBinFlow_S_772;//To Port = 20;
	 PreBinFlow_S_770 __Port[0] =  F_FUNC_Vmax_GROS_100_post_771;//To Port = 19;
	 F_FUNC_Vmax_GROS_100_post_771 __Port[0] =  FuncVmaxNonVboxTDL_2_754;//To Port = 2;
	 PreBinFlow_S_772 __Port[0] =  F_FUNC_Vnom_GROS_100_post_773;//To Port = 21;
	 F_FUNC_Vnom_GROS_100_post_773 __Port[0] =  FuncVmaxNonVboxTDL_2_754;//To Port = 2;
	 FuncVnomNonVboxTDL_2_774 __Port[0] =  PreBinFlow_S_775;//To Port = 23;
	 FuncVnomNonVboxTDL_2_774 __Port[1] =  PreBinFlow_S_777;//To Port = 25;
	 PreBinFlow_S_775 __Port[0] =  F_FUNC_Vmax_GROS_100_1_post_776;//To Port = 24;
	 F_FUNC_Vmax_GROS_100_1_post_776 __Port[0] =  FuncVmaxNonVboxTDL_3_755;//To Port = 3;
	 PreBinFlow_S_777 __Port[0] =  F_FUNC_Vnom_GROS_100_1_post_778;//To Port = 26;
	 F_FUNC_Vnom_GROS_100_1_post_778 __Port[0] =  FuncVmaxNonVboxTDL_3_755;//To Port = 3;
	 FuncVnomNonVboxTDL_3_779 __Port[0] =  PreBinFlow_S_780;//To Port = 28;
	 FuncVnomNonVboxTDL_3_779 __Port[1] =  PreBinFlow_S_782;//To Port = 30;
	 PreBinFlow_S_780 __Port[0] =  F_FUNC_Vmax_GROS_100_2_post_781;//To Port = 29;
	 F_FUNC_Vmax_GROS_100_2_post_781 __Port[0] =  FuncVmaxNonVboxTDL_4_756;//To Port = 4;
	 PreBinFlow_S_782 __Port[0] =  F_FUNC_Vnom_GROS_100_2_post_783;//To Port = 31;
	 F_FUNC_Vnom_GROS_100_2_post_783 __Port[0] =  FuncVmaxNonVboxTDL_4_756;//To Port = 4;
	 FuncVnomNonVboxTDL_4_784 __Port[0] =  PreBinFlow_S_785;//To Port = 33;
	 FuncVnomNonVboxTDL_4_784 __Port[1] =  PreBinFlow_S_787;//To Port = 35;
	 PreBinFlow_S_785 __Port[0] =  F_FUNC_Vmax_GROS_100_3_post_786;//To Port = 34;
	 F_FUNC_Vmax_GROS_100_3_post_786 __Port[0] =  FuncVmaxNonVboxTDL_5_757;//To Port = 5;
	 PreBinFlow_S_787 __Port[0] =  F_FUNC_Vnom_GROS_100_3_post_788;//To Port = 36;
	 F_FUNC_Vnom_GROS_100_3_post_788 __Port[0] =  FuncVmaxNonVboxTDL_5_757;//To Port = 5;
	 FuncVnomNonVboxTDL_5_789 __Port[0] =  PreBinFlow_S_790;//To Port = 38;
	 FuncVnomNonVboxTDL_5_789 __Port[1] =  PreBinFlow_S_792;//To Port = 40;
	 PreBinFlow_S_790 __Port[0] =  F_FUNC_Vmax_GROS_100_4_post_791;//To Port = 39;
	 F_FUNC_Vmax_GROS_100_4_post_791 __Port[0] =  FuncVmaxNonVboxTDL_6_758;//To Port = 6;
	 PreBinFlow_S_792 __Port[0] =  F_FUNC_Vnom_GROS_100_4_post_793;//To Port = 41;
	 F_FUNC_Vnom_GROS_100_4_post_793 __Port[0] =  FuncVmaxNonVboxTDL_6_758;//To Port = 6;
	 FuncVnomNonVboxTDL_6_794 __Port[0] =  PreBinFlow_S_795;//To Port = 43;
	 FuncVnomNonVboxTDL_6_794 __Port[1] =  PreBinFlow_S_797;//To Port = 45;
	 PreBinFlow_S_795 __Port[0] =  F_FUNC_Vmax_GROS_166p66_post_796;//To Port = 44;
	 F_FUNC_Vmax_GROS_166p66_post_796 __Port[0] =  FuncVmaxNonVboxTDL_7_759;//To Port = 7;
	 PreBinFlow_S_797 __Port[0] =  F_FUNC_Vnom_GROS_166p66_post_798;//To Port = 46;
	 F_FUNC_Vnom_GROS_166p66_post_798 __Port[0] =  FuncVmaxNonVboxTDL_7_759;//To Port = 7;
	 FuncVnomNonVboxTDL_7_799 __Port[0] =  PreBinFlow_S_800;//To Port = 48;
	 FuncVnomNonVboxTDL_7_799 __Port[1] =  PreBinFlow_S_802;//To Port = 50;
	 PreBinFlow_S_800 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_OTG_100_801;//To Port = 49;
	 F_FUNC_Vmax_ANALOG_USB_OTG_100_801 __Port[0] =  FuncVmaxNonVboxTDL_8_760;//To Port = 8;
	 PreBinFlow_S_802 __Port[0] =  F_FUNC_Vnom_ANALOG_USB_OTG_100_803;//To Port = 51;
	 F_FUNC_Vnom_ANALOG_USB_OTG_100_803 __Port[0] =  FuncVmaxNonVboxTDL_8_760;//To Port = 8;
	 FuncVnomNonVboxTDL_8_804 __Port[0] =  PreBinFlow_S_805;//To Port = 53;
	 FuncVnomNonVboxTDL_8_804 __Port[1] =  PreBinFlow_S_807;//To Port = 55;
	 PreBinFlow_S_805 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_post_806;//To Port = 54;
	 F_FUNC_Vmax_BIST_PROD_33_post_806 __Port[0] =  FuncVmaxNonVboxTDL_9_761;//To Port = 9;
	 PreBinFlow_S_807 __Port[0] =  F_FUNC_Vnom_BIST_PROD_33_post_808;//To Port = 56;
	 F_FUNC_Vnom_BIST_PROD_33_post_808 __Port[0] =  FuncVmaxNonVboxTDL_9_761;//To Port = 9;
	 FuncVnomNonVboxTDL_9_809 __Port[0] =  PreBinFlow_S_810;//To Port = 58;
	 FuncVnomNonVboxTDL_9_809 __Port[1] =  PreBinFlow_S_812;//To Port = 60;
	 PreBinFlow_S_810 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_1_811;//To Port = 59;
	 F_FUNC_Vmax_BIST_PROD_33_1_811 __Port[0] =  FuncVmaxNonVboxTDL_10_762;//To Port = 10;
	 PreBinFlow_S_812 __Port[0] =  F_FUNC_Vnom_BIST_PROD_33_1_813;//To Port = 61;
	 F_FUNC_Vnom_BIST_PROD_33_1_813 __Port[0] =  FuncVmaxNonVboxTDL_10_762;//To Port = 10;
	 FuncVnomNonVboxTDL_10_814 __Port[0] =  PreBinFlow_S_815;//To Port = 63;
	 FuncVnomNonVboxTDL_10_814 __Port[1] =  PreBinFlow_S_817;//To Port = 65;
	 PreBinFlow_S_815 __Port[0] =  F_FUNC_Vmax_1_816;//To Port = 64;
	 F_FUNC_Vmax_1_816 __Port[0] =  FuncVmaxNonVboxTDL_11_763;//To Port = 11;
	 PreBinFlow_S_817 __Port[0] =  F_FUNC_Vnom_2_818;//To Port = 66;
	 F_FUNC_Vnom_2_818 __Port[0] =  FuncVmaxNonVboxTDL_11_763;//To Port = 11;
	 FuncVnomNonVboxTDL_11_819 __Port[0] =  PreBinFlow_S_820;//To Port = 68;
	 FuncVnomNonVboxTDL_11_819 __Port[1] =  PreBinFlow_S_822;//To Port = 70;
	 PreBinFlow_S_820 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_CHG_100_821;//To Port = 69;
	 F_FUNC_Vmax_ANALOG_USB_CHG_100_821 __Port[0] = FlowNode_824;//To Port = 72;
	 PreBinFlow_S_822 __Port[0] =  F_FUNC_Vnom_ANALOG_USB_CHG_100_823;//To Port = 71;
	 F_FUNC_Vnom_ANALOG_USB_CHG_100_823 __Port[0] = FlowNode_824;//To Port = 72;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1605,685,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Func_NonVbox_S ***/

/****************************************************************************/
/*** SubFlow Probe_Func_Vmin_NonVbox_S                                    ***/
/****************************************************************************/
__SubFlow Probe_Func_Vmin_NonVbox_S {
	__Node  FuncNonVboxTDL_825 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "235";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL;
	}
	__Node  FuncNonVboxTDL_1_826 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "236";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_1;
	}
	__Node  FuncNonVboxTDL_2_827 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "237";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_2;
	}
	__Node  FuncNonVboxTDL_3_828 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "238";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_3;
	}
	__Node  FuncNonVboxTDL_4_829 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "239";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_4;
	}
	__Node  FuncNonVboxTDL_5_830 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "240";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_5;
	}
	__Node  FuncNonVboxTDL_6_831 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "241";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_6;
	}
	__Node  FuncNonVboxTDL_7_832 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "242";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_7;
	}
	__Node  FuncNonVboxTDL_8_833 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "243";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_8;
	}
	__Node  FuncNonVboxTDL_9_834 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "244";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_9;
	}
	__Node  FuncNonVboxTDL_10_835 {
		__XCoord = (1550,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "245";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_10;
	}
	__Node  FuncNonVboxTDL_11_836 {
		__XCoord = (1700,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "246";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncNonVboxTDL_11;
	}
	__Node  FuncVnomNonVboxTDL_837 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "247";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL;
	}
	__Node  PreBinFlow_S_838 {
		__XCoord = (55,465);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "248";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_3_839 {
		__XCoord = (55,595);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "249";
		__Exec =  F_FUNC_Vmin_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_840 {
		__XCoord = (-15,395);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "250";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_4_841 {
		__XCoord = (-15,525);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "251";
		__Exec =  F_FUNC_Vnom_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_1_842 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "252";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_1;
	}
	__Node  PreBinFlow_S_843 {
		__XCoord = (205,435);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "253";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_844 {
		__XCoord = (205,565);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "254";
		__Exec =  F_FUNC_Vmin_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_845 {
		__XCoord = (135,365);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "255";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_post_5_846 {
		__XCoord = (135,495);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "256";
		__Exec =  F_FUNC_Vnom_GROS_100_post_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_2_847 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "257";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_2;
	}
	__Node  PreBinFlow_S_848 {
		__XCoord = (355,465);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "258";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_849 {
		__XCoord = (355,595);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "259";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_850 {
		__XCoord = (285,395);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "260";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_1_post_6_851 {
		__XCoord = (285,525);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "261";
		__Exec =  F_FUNC_Vnom_GROS_100_1_post_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_3_852 {
		__XCoord = (500,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "262";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_3;
	}
	__Node  PreBinFlow_S_853 {
		__XCoord = (505,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "263";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_854 {
		__XCoord = (505,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "264";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_855 {
		__XCoord = (435,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "265";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_2_post_7_856 {
		__XCoord = (435,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "266";
		__Exec =  F_FUNC_Vnom_GROS_100_2_post_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_4_857 {
		__XCoord = (650,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "267";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_4;
	}
	__Node  PreBinFlow_S_858 {
		__XCoord = (655,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "268";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_859 {
		__XCoord = (655,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "269";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_860 {
		__XCoord = (585,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "270";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_3_post_8_861 {
		__XCoord = (585,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "271";
		__Exec =  F_FUNC_Vnom_GROS_100_3_post_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_5_862 {
		__XCoord = (800,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "272";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_5;
	}
	__Node  PreBinFlow_S_863 {
		__XCoord = (805,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "273";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_864 {
		__XCoord = (805,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "274";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_865 {
		__XCoord = (735,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "275";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_100_4_post_9_866 {
		__XCoord = (735,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "276";
		__Exec =  F_FUNC_Vnom_GROS_100_4_post_9;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_6_867 {
		__XCoord = (950,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "277";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_6;
	}
	__Node  PreBinFlow_S_868 {
		__XCoord = (955,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "278";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_post_869 {
		__XCoord = (955,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "279";
		__Exec =  F_FUNC_Vmin_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_870 {
		__XCoord = (885,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "280";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_GROS_166p66_871 {
		__XCoord = (885,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "281";
		__Exec =  F_FUNC_Vnom_GROS_166p66;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_7_872 {
		__XCoord = (1100,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "282";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_7;
	}
	__Node  PreBinFlow_S_873 {
		__XCoord = (1105,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "283";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_12_874 {
		__XCoord = (1105,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "284";
		__Exec =  F_FUNC_Vmin_12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_875 {
		__XCoord = (1035,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "285";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_14_876 {
		__XCoord = (1035,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "286";
		__Exec =  F_FUNC_Vnom_14;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_8_877 {
		__XCoord = (1250,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "287";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_8;
	}
	__Node  PreBinFlow_S_878 {
		__XCoord = (1255,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "288";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_post_879 {
		__XCoord = (1255,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "289";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_880 {
		__XCoord = (1185,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "290";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_BIST_PROD_33_881 {
		__XCoord = (1185,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "291";
		__Exec =  F_FUNC_Vnom_BIST_PROD_33;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_9_882 {
		__XCoord = (1400,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "292";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_9;
	}
	__Node  PreBinFlow_S_883 {
		__XCoord = (1405,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "293";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_1_884 {
		__XCoord = (1405,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "294";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_885 {
		__XCoord = (1335,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "295";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_BIST_PROD_33_1_16_886 {
		__XCoord = (1335,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "296";
		__Exec =  F_FUNC_Vnom_BIST_PROD_33_1_16;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_10_887 {
		__XCoord = (1550,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "297";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_10;
	}
	__Node  PreBinFlow_S_888 {
		__XCoord = (1555,915);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "298";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_17_889 {
		__XCoord = (1555,1045);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "299";
		__Exec =  F_FUNC_Vmin_17;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_890 {
		__XCoord = (1485,845);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "300";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_18_891 {
		__XCoord = (1485,975);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "301";
		__Exec =  F_FUNC_Vnom_18;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVnomNonVboxTDL_11_892 {
		__XCoord = (1700,700);
		__Port[0] {
			__PortPosition = 295;
		}
		__Port[1] {
			__PortPosition = 270;
		}
		__InputPosition = 65;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "302";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVnomNonVboxTDL_11;
	}
	__Node  PreBinFlow_S_893 {
		__XCoord = (1705,885);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "303";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_20_894 {
		__XCoord = (1705,1015);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "304";
		__Exec =  F_FUNC_Vmin_20;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  PreBinFlow_S_895 {
		__XCoord = (1635,815);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "305";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vnom_22_896 {
		__XCoord = (1635,945);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "306";
		__Exec =  F_FUNC_Vnom_22;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_897 {
		__XCoord = (1605,700);
		__InputPosition = 90;
		__TestID = "307";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncNonVboxTDL_825;
	__PortConnections {
	 FuncNonVboxTDL_825 __Port[0] =  FuncNonVboxTDL_1_826;//To Port = 1;
	 FuncNonVboxTDL_825 __Port[1] =  FuncVnomNonVboxTDL_837;//To Port = 12;
	 FuncNonVboxTDL_1_826 __Port[0] =  FuncNonVboxTDL_2_827;//To Port = 2;
	 FuncNonVboxTDL_1_826 __Port[1] =  FuncVnomNonVboxTDL_1_842;//To Port = 17;
	 FuncNonVboxTDL_2_827 __Port[0] =  FuncNonVboxTDL_3_828;//To Port = 3;
	 FuncNonVboxTDL_2_827 __Port[1] =  FuncVnomNonVboxTDL_2_847;//To Port = 22;
	 FuncNonVboxTDL_3_828 __Port[0] =  FuncNonVboxTDL_4_829;//To Port = 4;
	 FuncNonVboxTDL_3_828 __Port[1] =  FuncVnomNonVboxTDL_3_852;//To Port = 27;
	 FuncNonVboxTDL_4_829 __Port[0] =  FuncNonVboxTDL_5_830;//To Port = 5;
	 FuncNonVboxTDL_4_829 __Port[1] =  FuncVnomNonVboxTDL_4_857;//To Port = 32;
	 FuncNonVboxTDL_5_830 __Port[0] =  FuncNonVboxTDL_6_831;//To Port = 6;
	 FuncNonVboxTDL_5_830 __Port[1] =  FuncVnomNonVboxTDL_5_862;//To Port = 37;
	 FuncNonVboxTDL_6_831 __Port[0] =  FuncNonVboxTDL_7_832;//To Port = 7;
	 FuncNonVboxTDL_6_831 __Port[1] =  FuncVnomNonVboxTDL_6_867;//To Port = 42;
	 FuncNonVboxTDL_7_832 __Port[0] =  FuncNonVboxTDL_8_833;//To Port = 8;
	 FuncNonVboxTDL_7_832 __Port[1] =  FuncVnomNonVboxTDL_7_872;//To Port = 47;
	 FuncNonVboxTDL_8_833 __Port[0] =  FuncNonVboxTDL_9_834;//To Port = 9;
	 FuncNonVboxTDL_8_833 __Port[1] =  FuncVnomNonVboxTDL_8_877;//To Port = 52;
	 FuncNonVboxTDL_9_834 __Port[0] =  FuncNonVboxTDL_10_835;//To Port = 10;
	 FuncNonVboxTDL_9_834 __Port[1] =  FuncVnomNonVboxTDL_9_882;//To Port = 57;
	 FuncNonVboxTDL_10_835 __Port[0] =  FuncNonVboxTDL_11_836;//To Port = 11;
	 FuncNonVboxTDL_10_835 __Port[1] =  FuncVnomNonVboxTDL_10_887;//To Port = 62;
	 FuncNonVboxTDL_11_836 __Port[0] = FlowNode_897;//To Port = 72;
	 FuncNonVboxTDL_11_836 __Port[1] =  FuncVnomNonVboxTDL_11_892;//To Port = 67;
	 FuncVnomNonVboxTDL_837 __Port[0] =  PreBinFlow_S_838;//To Port = 13;
	 FuncVnomNonVboxTDL_837 __Port[1] =  PreBinFlow_S_840;//To Port = 15;
	 PreBinFlow_S_838 __Port[0] =  F_FUNC_Vmin_3_839;//To Port = 14;
	 F_FUNC_Vmin_3_839 __Port[0] =  FuncNonVboxTDL_1_826;//To Port = 1;
	 PreBinFlow_S_840 __Port[0] =  F_FUNC_Vnom_4_841;//To Port = 16;
	 F_FUNC_Vnom_4_841 __Port[0] =  FuncNonVboxTDL_1_826;//To Port = 1;
	 FuncVnomNonVboxTDL_1_842 __Port[0] =  PreBinFlow_S_843;//To Port = 18;
	 FuncVnomNonVboxTDL_1_842 __Port[1] =  PreBinFlow_S_845;//To Port = 20;
	 PreBinFlow_S_843 __Port[0] =  F_FUNC_Vmin_GROS_100_post_844;//To Port = 19;
	 F_FUNC_Vmin_GROS_100_post_844 __Port[0] =  FuncNonVboxTDL_2_827;//To Port = 2;
	 PreBinFlow_S_845 __Port[0] =  F_FUNC_Vnom_GROS_100_post_5_846;//To Port = 21;
	 F_FUNC_Vnom_GROS_100_post_5_846 __Port[0] =  FuncNonVboxTDL_2_827;//To Port = 2;
	 FuncVnomNonVboxTDL_2_847 __Port[0] =  PreBinFlow_S_848;//To Port = 23;
	 FuncVnomNonVboxTDL_2_847 __Port[1] =  PreBinFlow_S_850;//To Port = 25;
	 PreBinFlow_S_848 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_849;//To Port = 24;
	 F_FUNC_Vmin_GROS_100_1_post_849 __Port[0] =  FuncNonVboxTDL_3_828;//To Port = 3;
	 PreBinFlow_S_850 __Port[0] =  F_FUNC_Vnom_GROS_100_1_post_6_851;//To Port = 26;
	 F_FUNC_Vnom_GROS_100_1_post_6_851 __Port[0] =  FuncNonVboxTDL_3_828;//To Port = 3;
	 FuncVnomNonVboxTDL_3_852 __Port[0] =  PreBinFlow_S_853;//To Port = 28;
	 FuncVnomNonVboxTDL_3_852 __Port[1] =  PreBinFlow_S_855;//To Port = 30;
	 PreBinFlow_S_853 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_854;//To Port = 29;
	 F_FUNC_Vmin_GROS_100_2_post_854 __Port[0] =  FuncNonVboxTDL_4_829;//To Port = 4;
	 PreBinFlow_S_855 __Port[0] =  F_FUNC_Vnom_GROS_100_2_post_7_856;//To Port = 31;
	 F_FUNC_Vnom_GROS_100_2_post_7_856 __Port[0] =  FuncNonVboxTDL_4_829;//To Port = 4;
	 FuncVnomNonVboxTDL_4_857 __Port[0] =  PreBinFlow_S_858;//To Port = 33;
	 FuncVnomNonVboxTDL_4_857 __Port[1] =  PreBinFlow_S_860;//To Port = 35;
	 PreBinFlow_S_858 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_859;//To Port = 34;
	 F_FUNC_Vmin_GROS_100_3_post_859 __Port[0] =  FuncNonVboxTDL_5_830;//To Port = 5;
	 PreBinFlow_S_860 __Port[0] =  F_FUNC_Vnom_GROS_100_3_post_8_861;//To Port = 36;
	 F_FUNC_Vnom_GROS_100_3_post_8_861 __Port[0] =  FuncNonVboxTDL_5_830;//To Port = 5;
	 FuncVnomNonVboxTDL_5_862 __Port[0] =  PreBinFlow_S_863;//To Port = 38;
	 FuncVnomNonVboxTDL_5_862 __Port[1] =  PreBinFlow_S_865;//To Port = 40;
	 PreBinFlow_S_863 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_864;//To Port = 39;
	 F_FUNC_Vmin_GROS_100_4_post_864 __Port[0] =  FuncNonVboxTDL_6_831;//To Port = 6;
	 PreBinFlow_S_865 __Port[0] =  F_FUNC_Vnom_GROS_100_4_post_9_866;//To Port = 41;
	 F_FUNC_Vnom_GROS_100_4_post_9_866 __Port[0] =  FuncNonVboxTDL_6_831;//To Port = 6;
	 FuncVnomNonVboxTDL_6_867 __Port[0] =  PreBinFlow_S_868;//To Port = 43;
	 FuncVnomNonVboxTDL_6_867 __Port[1] =  PreBinFlow_S_870;//To Port = 45;
	 PreBinFlow_S_868 __Port[0] =  F_FUNC_Vmin_GROS_166p66_post_869;//To Port = 44;
	 F_FUNC_Vmin_GROS_166p66_post_869 __Port[0] =  FuncNonVboxTDL_7_832;//To Port = 7;
	 PreBinFlow_S_870 __Port[0] =  F_FUNC_Vnom_GROS_166p66_871;//To Port = 46;
	 F_FUNC_Vnom_GROS_166p66_871 __Port[0] =  FuncNonVboxTDL_7_832;//To Port = 7;
	 FuncVnomNonVboxTDL_7_872 __Port[0] =  PreBinFlow_S_873;//To Port = 48;
	 FuncVnomNonVboxTDL_7_872 __Port[1] =  PreBinFlow_S_875;//To Port = 50;
	 PreBinFlow_S_873 __Port[0] =  F_FUNC_Vmin_12_874;//To Port = 49;
	 F_FUNC_Vmin_12_874 __Port[0] =  FuncNonVboxTDL_8_833;//To Port = 8;
	 PreBinFlow_S_875 __Port[0] =  F_FUNC_Vnom_14_876;//To Port = 51;
	 F_FUNC_Vnom_14_876 __Port[0] =  FuncNonVboxTDL_8_833;//To Port = 8;
	 FuncVnomNonVboxTDL_8_877 __Port[0] =  PreBinFlow_S_878;//To Port = 53;
	 FuncVnomNonVboxTDL_8_877 __Port[1] =  PreBinFlow_S_880;//To Port = 55;
	 PreBinFlow_S_878 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_post_879;//To Port = 54;
	 F_FUNC_Vmin_BIST_PROD_33_post_879 __Port[0] =  FuncNonVboxTDL_9_834;//To Port = 9;
	 PreBinFlow_S_880 __Port[0] =  F_FUNC_Vnom_BIST_PROD_33_881;//To Port = 56;
	 F_FUNC_Vnom_BIST_PROD_33_881 __Port[0] =  FuncNonVboxTDL_9_834;//To Port = 9;
	 FuncVnomNonVboxTDL_9_882 __Port[0] =  PreBinFlow_S_883;//To Port = 58;
	 FuncVnomNonVboxTDL_9_882 __Port[1] =  PreBinFlow_S_885;//To Port = 60;
	 PreBinFlow_S_883 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_1_884;//To Port = 59;
	 F_FUNC_Vmin_BIST_PROD_33_1_884 __Port[0] =  FuncNonVboxTDL_10_835;//To Port = 10;
	 PreBinFlow_S_885 __Port[0] =  F_FUNC_Vnom_BIST_PROD_33_1_16_886;//To Port = 61;
	 F_FUNC_Vnom_BIST_PROD_33_1_16_886 __Port[0] =  FuncNonVboxTDL_10_835;//To Port = 10;
	 FuncVnomNonVboxTDL_10_887 __Port[0] =  PreBinFlow_S_888;//To Port = 63;
	 FuncVnomNonVboxTDL_10_887 __Port[1] =  PreBinFlow_S_890;//To Port = 65;
	 PreBinFlow_S_888 __Port[0] =  F_FUNC_Vmin_17_889;//To Port = 64;
	 F_FUNC_Vmin_17_889 __Port[0] =  FuncNonVboxTDL_11_836;//To Port = 11;
	 PreBinFlow_S_890 __Port[0] =  F_FUNC_Vnom_18_891;//To Port = 66;
	 F_FUNC_Vnom_18_891 __Port[0] =  FuncNonVboxTDL_11_836;//To Port = 11;
	 FuncVnomNonVboxTDL_11_892 __Port[0] =  PreBinFlow_S_893;//To Port = 68;
	 FuncVnomNonVboxTDL_11_892 __Port[1] =  PreBinFlow_S_895;//To Port = 70;
	 PreBinFlow_S_893 __Port[0] =  F_FUNC_Vmin_20_894;//To Port = 69;
	 F_FUNC_Vmin_20_894 __Port[0] = FlowNode_897;//To Port = 72;
	 PreBinFlow_S_895 __Port[0] =  F_FUNC_Vnom_22_896;//To Port = 71;
	 F_FUNC_Vnom_22_896 __Port[0] = FlowNode_897;//To Port = 72;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1605,685,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Func_Vmin_NonVbox_S ***/

/****************************************************************************/
/*** SubFlow Probe_PostStressFunc_S                                       ***/
/****************************************************************************/
__SubFlow Probe_PostStressFunc_S {
	__Node  Probe_Func_NonVbox_S_898 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "308";
		__Exec =  Probe_Func_NonVbox_S;
	}
	__Node  Probe_Func_Vmin_NonVbox_S_899 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "309";
		__Exec =  Probe_Func_Vmin_NonVbox_S;
	}
	__Node FlowNode_900 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "310";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_Func_NonVbox_S_898;
	__PortConnections {
	 Probe_Func_NonVbox_S_898 __Port[0] =  Probe_Func_Vmin_NonVbox_S_899;//To Port = 1;
	 Probe_Func_Vmin_NonVbox_S_899 __Port[0] = FlowNode_900;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PostStressFunc_S ***/

/****************************************************************************/
/*** SubFlow Probe_SrchVdd_Post_S                                         ***/
/****************************************************************************/
__SubFlow Probe_SrchVdd_Post_S {
	__Node  VminSearchPost_901 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "311";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost;
	}
	__Node  PreBinFlow_S_902 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "312";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_4_903 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "313";
		__Exec =  F_FUNC_Vmin_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_1_904 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "314";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_1;
	}
	__Node  PreBinFlow_S_905 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "315";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_5_906 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "316";
		__Exec =  F_FUNC_Vmin_GROS_100_post_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_2_907 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "317";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_2;
	}
	__Node  PreBinFlow_S_908 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "318";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_6_909 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "319";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_3_910 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "320";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_3;
	}
	__Node  PreBinFlow_S_911 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "321";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_7_912 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "322";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_4_913 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "323";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_4;
	}
	__Node  PreBinFlow_S_914 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "324";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_8_915 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "325";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_5_916 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "326";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_5;
	}
	__Node  PreBinFlow_S_917 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "327";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_9_918 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "328";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post_9;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_6_919 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "329";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_6;
	}
	__Node  PreBinFlow_S_920 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "330";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_921 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "331";
		__Exec =  F_FUNC_Vmin_GROS_166p66;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_7_922 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "332";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_7;
	}
	__Node  PreBinFlow_S_923 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "333";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_14_924 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "334";
		__Exec =  F_FUNC_Vmin_14;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_8_925 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "335";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_8;
	}
	__Node  PreBinFlow_S_926 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "336";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_15_927 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "337";
		__Exec =  F_FUNC_Vmin_15;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_9_928 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "338";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_9;
	}
	__Node  PreBinFlow_S_929 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "339";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_18_930 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "340";
		__Exec =  F_FUNC_Vmin_18;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_931 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "341";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPost_901;
	__PortConnections {
	 VminSearchPost_901 __Port[0] =  VminSearchPost_1_904;//To Port = 3;
	 VminSearchPost_901 __Port[1] =  PreBinFlow_S_902;//To Port = 1;
	 PreBinFlow_S_902 __Port[0] =  F_FUNC_Vmin_4_903;//To Port = 2;
	 F_FUNC_Vmin_4_903 __Port[0] =  VminSearchPost_1_904;//To Port = 3;
	 VminSearchPost_1_904 __Port[0] =  VminSearchPost_2_907;//To Port = 6;
	 VminSearchPost_1_904 __Port[1] =  PreBinFlow_S_905;//To Port = 4;
	 PreBinFlow_S_905 __Port[0] =  F_FUNC_Vmin_GROS_100_post_5_906;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_5_906 __Port[0] =  VminSearchPost_2_907;//To Port = 6;
	 VminSearchPost_2_907 __Port[0] =  VminSearchPost_3_910;//To Port = 9;
	 VminSearchPost_2_907 __Port[1] =  PreBinFlow_S_908;//To Port = 7;
	 PreBinFlow_S_908 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_6_909;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_6_909 __Port[0] =  VminSearchPost_3_910;//To Port = 9;
	 VminSearchPost_3_910 __Port[0] =  VminSearchPost_4_913;//To Port = 12;
	 VminSearchPost_3_910 __Port[1] =  PreBinFlow_S_911;//To Port = 10;
	 PreBinFlow_S_911 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_7_912;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_7_912 __Port[0] =  VminSearchPost_4_913;//To Port = 12;
	 VminSearchPost_4_913 __Port[0] =  VminSearchPost_5_916;//To Port = 15;
	 VminSearchPost_4_913 __Port[1] =  PreBinFlow_S_914;//To Port = 13;
	 PreBinFlow_S_914 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_8_915;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_8_915 __Port[0] =  VminSearchPost_5_916;//To Port = 15;
	 VminSearchPost_5_916 __Port[0] =  VminSearchPost_6_919;//To Port = 18;
	 VminSearchPost_5_916 __Port[1] =  PreBinFlow_S_917;//To Port = 16;
	 PreBinFlow_S_917 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_9_918;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_9_918 __Port[0] =  VminSearchPost_6_919;//To Port = 18;
	 VminSearchPost_6_919 __Port[0] =  VminSearchPost_7_922;//To Port = 21;
	 VminSearchPost_6_919 __Port[1] =  PreBinFlow_S_920;//To Port = 19;
	 PreBinFlow_S_920 __Port[0] =  F_FUNC_Vmin_GROS_166p66_921;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_921 __Port[0] =  VminSearchPost_7_922;//To Port = 21;
	 VminSearchPost_7_922 __Port[0] =  VminSearchPost_8_925;//To Port = 24;
	 VminSearchPost_7_922 __Port[1] =  PreBinFlow_S_923;//To Port = 22;
	 PreBinFlow_S_923 __Port[0] =  F_FUNC_Vmin_14_924;//To Port = 23;
	 F_FUNC_Vmin_14_924 __Port[0] =  VminSearchPost_8_925;//To Port = 24;
	 VminSearchPost_8_925 __Port[0] =  VminSearchPost_9_928;//To Port = 27;
	 VminSearchPost_8_925 __Port[1] =  PreBinFlow_S_926;//To Port = 25;
	 PreBinFlow_S_926 __Port[0] =  F_FUNC_Vmin_15_927;//To Port = 26;
	 F_FUNC_Vmin_15_927 __Port[0] =  VminSearchPost_9_928;//To Port = 27;
	 VminSearchPost_9_928 __Port[0] = FlowNode_931;//To Port = 30;
	 VminSearchPost_9_928 __Port[1] =  PreBinFlow_S_929;//To Port = 28;
	 PreBinFlow_S_929 __Port[0] =  F_FUNC_Vmin_18_930;//To Port = 29;
	 F_FUNC_Vmin_18_930 __Port[0] = FlowNode_931;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_SrchVdd_Post_S ***/

/****************************************************************************/
/*** SubFlow Probe_PostStressSrch_S                                       ***/
/****************************************************************************/
__SubFlow Probe_PostStressSrch_S {
	__Node  Probe_SrchVdd_Post_S_932 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "342";
		__Exec =  Probe_SrchVdd_Post_S;
	}
	__Node FlowNode_933 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "343";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_SrchVdd_Post_S_932;
	__PortConnections {
	 Probe_SrchVdd_Post_S_932 __Port[0] = FlowNode_933;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PostStressSrch_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq_VboxLO_Post_S                                     ***/
/****************************************************************************/
__SubFlow Probe_Iddq_VboxLO_Post_S {
	__Node  IddqVboxLOPost_934 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "344";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost;
	}
	__Node  PreBinFlow_S_935 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "345";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_936 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "346";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVboxLOPost_1_937 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "347";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost_1;
	}
	__Node  PreBinFlow_S_938 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "348";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_939 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "349";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_940 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "350";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVboxLOPost_934;
	__PortConnections {
	 IddqVboxLOPost_934 __Port[0] =  IddqVboxLOPost_1_937;//To Port = 3;
	 IddqVboxLOPost_934 __Port[1] =  PreBinFlow_S_935;//To Port = 1;
	 PreBinFlow_S_935 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_936;//To Port = 2;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_936 __Port[0] =  IddqVboxLOPost_1_937;//To Port = 3;
	 IddqVboxLOPost_1_937 __Port[0] = FlowNode_940;//To Port = 6;
	 IddqVboxLOPost_1_937 __Port[1] =  PreBinFlow_S_938;//To Port = 4;
	 PreBinFlow_S_938 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_939;//To Port = 5;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_1_939 __Port[0] = FlowNode_940;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq_VboxLO_Post_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq_Vburnin_Post_S                                    ***/
/****************************************************************************/
__SubFlow Probe_Iddq_Vburnin_Post_S {
	__Node  IddqVburnin_941 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vburnin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "351";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVburnin;
	}
	__Node  PreBinFlow_S_942 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "352";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vburnin_VDDS_PM12_943 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "353";
		__Exec =  F_LEAK_IDDQ_Vburnin_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVburnin_1_944 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vburnin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "354";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVburnin_1;
	}
	__Node  PreBinFlow_S_945 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "355";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vburnin_VDDS_PM411_946 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "356";
		__Exec =  F_LEAK_IDDQ_Vburnin_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_947 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "357";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVburnin_941;
	__PortConnections {
	 IddqVburnin_941 __Port[0] =  IddqVburnin_1_944;//To Port = 3;
	 IddqVburnin_941 __Port[1] =  PreBinFlow_S_942;//To Port = 1;
	 PreBinFlow_S_942 __Port[0] =  F_LEAK_IDDQ_Vburnin_VDDS_PM12_943;//To Port = 2;
	 F_LEAK_IDDQ_Vburnin_VDDS_PM12_943 __Port[0] =  IddqVburnin_1_944;//To Port = 3;
	 IddqVburnin_1_944 __Port[0] = FlowNode_947;//To Port = 6;
	 IddqVburnin_1_944 __Port[1] =  PreBinFlow_S_945;//To Port = 4;
	 PreBinFlow_S_945 __Port[0] =  F_LEAK_IDDQ_Vburnin_VDDS_PM411_946;//To Port = 5;
	 F_LEAK_IDDQ_Vburnin_VDDS_PM411_946 __Port[0] = FlowNode_947;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq_Vburnin_Post_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq_Vmax_Post_S                                       ***/
/****************************************************************************/
__SubFlow Probe_Iddq_Vmax_Post_S {
	__Node  IddqVmax_948 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "358";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax;
	}
	__Node  PreBinFlow_S_949 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "359";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM12_950 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "360";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVmax_1_951 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "361";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax_1;
	}
	__Node  PreBinFlow_S_952 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "362";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM411_953 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "363";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_954 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "364";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVmax_948;
	__PortConnections {
	 IddqVmax_948 __Port[0] =  IddqVmax_1_951;//To Port = 3;
	 IddqVmax_948 __Port[1] =  PreBinFlow_S_949;//To Port = 1;
	 PreBinFlow_S_949 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM12_950;//To Port = 2;
	 F_LEAK_IDDQ_Vmax_VDDS_PM12_950 __Port[0] =  IddqVmax_1_951;//To Port = 3;
	 IddqVmax_1_951 __Port[0] = FlowNode_954;//To Port = 6;
	 IddqVmax_1_951 __Port[1] =  PreBinFlow_S_952;//To Port = 4;
	 PreBinFlow_S_952 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM411_953;//To Port = 5;
	 F_LEAK_IDDQ_Vmax_VDDS_PM411_953 __Port[0] = FlowNode_954;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq_Delta_S                                           ***/
/****************************************************************************/
__SubFlow Probe_Iddq_Delta_S {
	__Node  IddqDelta_955 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "365";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDelta;
	}
	__Node  PreBinFlow_S_956 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "366";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Delta_957 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "367";
		__Exec =  F_LEAK_IDDQ_Delta;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_958 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "368";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDelta_955;
	__PortConnections {
	 IddqDelta_955 __Port[0] = FlowNode_958;//To Port = 3;
	 IddqDelta_955 __Port[1] =  PreBinFlow_S_956;//To Port = 1;
	 PreBinFlow_S_956 __Port[0] =  F_LEAK_IDDQ_Delta_957;//To Port = 2;
	 F_LEAK_IDDQ_Delta_957 __Port[0] = FlowNode_958;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq_Delta_S ***/

/****************************************************************************/
/*** SubFlow Probe_Iddq_Drift_S                                           ***/
/****************************************************************************/
__SubFlow Probe_Iddq_Drift_S {
	__Node  IddqDrift_959 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "369";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDrift;
	}
	__Node  PreBinFlow_S_960 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "370";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Drift_961 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "371";
		__Exec =  F_LEAK_IDDQ_Drift;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_962 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "372";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDrift_959;
	__PortConnections {
	 IddqDrift_959 __Port[0] = FlowNode_962;//To Port = 3;
	 IddqDrift_959 __Port[1] =  PreBinFlow_S_960;//To Port = 1;
	 PreBinFlow_S_960 __Port[0] =  F_LEAK_IDDQ_Drift_961;//To Port = 2;
	 F_LEAK_IDDQ_Drift_961 __Port[0] = FlowNode_962;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Iddq_Drift_S ***/

/****************************************************************************/
/*** SubFlow Probe_PostStressIddq_S                                       ***/
/****************************************************************************/
__SubFlow Probe_PostStressIddq_S {
	__Node  Probe_Iddq_VboxLO_Post_S_963 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "373";
		__Exec =  Probe_Iddq_VboxLO_Post_S;
	}
	__Node  Probe_Iddq_Vburnin_Post_S_964 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "374";
		__Exec =  Probe_Iddq_Vburnin_Post_S;
	}
	__Node  Probe_Iddq_Vmax_Post_S_965 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "375";
		__Exec =  Probe_Iddq_Vmax_Post_S;
	}
	__Node  Probe_Iddq_Delta_S_966 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "376";
		__Exec =  Probe_Iddq_Delta_S;
	}
	__Node  Probe_Iddq_Drift_S_967 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "377";
		__Exec =  Probe_Iddq_Drift_S;
	}
	__Node FlowNode_968 {
		__XCoord = (800,50);
		__InputPosition = 270;
		__TestID = "378";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_Iddq_VboxLO_Post_S_963;
	__PortConnections {
	 Probe_Iddq_VboxLO_Post_S_963 __Port[0] =  Probe_Iddq_Delta_S_966;//To Port = 3;
	 Probe_Iddq_Vburnin_Post_S_964 __Port[0] =  Probe_Iddq_Delta_S_966;//To Port = 3;
	 Probe_Iddq_Vmax_Post_S_965 __Port[0] =  Probe_Iddq_Delta_S_966;//To Port = 3;
	 Probe_Iddq_Delta_S_966 __Port[0] =  Probe_Iddq_Drift_S_967;//To Port = 4;
	 Probe_Iddq_Drift_S_967 __Port[0] = FlowNode_968;//To Port = 5;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,800,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_PostStressIddq_S ***/

/****************************************************************************/
/*** SubFlow Probe_AtSpeed_Vmin_S                                         ***/
/****************************************************************************/
__SubFlow Probe_AtSpeed_Vmin_S {
	__Node  AtSpeed_969 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "379";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_970 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "380";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_971 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "381";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_972 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "382";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_973 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "383";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_1_974 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "384";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_975 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "385";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_976 {
		__XCoord = (350,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "386";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_2_977 {
		__XCoord = (350,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "387";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_978 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "388";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_979 {
		__XCoord = (500,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "389";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_3_980 {
		__XCoord = (500,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "390";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_981 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "391";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_982 {
		__XCoord = (650,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "392";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_4_983 {
		__XCoord = (650,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "393";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_984 {
		__XCoord = (800,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "394";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_985 {
		__XCoord = (800,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "395";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_5_986 {
		__XCoord = (800,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "396";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_987 {
		__XCoord = (950,250);
		__InputPosition = 270;
		__TestID = "397";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_969;
	__PortConnections {
	 AtSpeed_969 __Port[0] =  AtSpeed_1_972;//To Port = 3;
	 AtSpeed_969 __Port[1] =  PreBinFlow_S_970;//To Port = 1;
	 PreBinFlow_S_970 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_971;//To Port = 2;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_971 __Port[0] =  AtSpeed_1_972;//To Port = 3;
	 AtSpeed_1_972 __Port[0] =  AtSpeed_2_975;//To Port = 6;
	 AtSpeed_1_972 __Port[1] =  PreBinFlow_S_973;//To Port = 4;
	 PreBinFlow_S_973 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_1_974;//To Port = 5;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_1_974 __Port[0] =  AtSpeed_2_975;//To Port = 6;
	 AtSpeed_2_975 __Port[0] =  AtSpeed_3_978;//To Port = 9;
	 AtSpeed_2_975 __Port[1] =  PreBinFlow_S_976;//To Port = 7;
	 PreBinFlow_S_976 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_2_977;//To Port = 8;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_2_977 __Port[0] =  AtSpeed_3_978;//To Port = 9;
	 AtSpeed_3_978 __Port[0] =  AtSpeed_4_981;//To Port = 12;
	 AtSpeed_3_978 __Port[1] =  PreBinFlow_S_979;//To Port = 10;
	 PreBinFlow_S_979 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_3_980;//To Port = 11;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_3_980 __Port[0] =  AtSpeed_4_981;//To Port = 12;
	 AtSpeed_4_981 __Port[0] =  AtSpeed_5_984;//To Port = 15;
	 AtSpeed_4_981 __Port[1] =  PreBinFlow_S_982;//To Port = 13;
	 PreBinFlow_S_982 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_4_983;//To Port = 14;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_4_983 __Port[0] =  AtSpeed_5_984;//To Port = 15;
	 AtSpeed_5_984 __Port[0] = FlowNode_987;//To Port = 18;
	 AtSpeed_5_984 __Port[1] =  PreBinFlow_S_985;//To Port = 16;
	 PreBinFlow_S_985 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_5_986;//To Port = 17;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_5_986 __Port[0] = FlowNode_987;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_AtSpeed_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Probe_AtSpeed_Vmax_S                                         ***/
/****************************************************************************/
__SubFlow Probe_AtSpeed_Vmax_S {
	__Node  AtSpeed_988 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "398";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_989 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "399";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_990 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "400";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_991 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "401";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_992 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "402";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_1_993 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "403";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_994 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "404";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_995 {
		__XCoord = (350,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "405";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_2_996 {
		__XCoord = (350,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "406";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_997 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "407";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_998 {
		__XCoord = (500,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "408";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_3_999 {
		__XCoord = (500,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "409";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_1000 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "410";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_1001 {
		__XCoord = (650,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "411";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_4_1002 {
		__XCoord = (650,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "412";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_1003 {
		__XCoord = (800,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "413";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_1004 {
		__XCoord = (800,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "414";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_5_1005 {
		__XCoord = (800,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "415";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1006 {
		__XCoord = (950,250);
		__InputPosition = 270;
		__TestID = "416";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_988;
	__PortConnections {
	 AtSpeed_988 __Port[0] =  AtSpeed_1_991;//To Port = 3;
	 AtSpeed_988 __Port[1] =  PreBinFlow_S_989;//To Port = 1;
	 PreBinFlow_S_989 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_990;//To Port = 2;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_990 __Port[0] =  AtSpeed_1_991;//To Port = 3;
	 AtSpeed_1_991 __Port[0] =  AtSpeed_2_994;//To Port = 6;
	 AtSpeed_1_991 __Port[1] =  PreBinFlow_S_992;//To Port = 4;
	 PreBinFlow_S_992 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_1_993;//To Port = 5;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_1_993 __Port[0] =  AtSpeed_2_994;//To Port = 6;
	 AtSpeed_2_994 __Port[0] =  AtSpeed_3_997;//To Port = 9;
	 AtSpeed_2_994 __Port[1] =  PreBinFlow_S_995;//To Port = 7;
	 PreBinFlow_S_995 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_2_996;//To Port = 8;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_2_996 __Port[0] =  AtSpeed_3_997;//To Port = 9;
	 AtSpeed_3_997 __Port[0] =  AtSpeed_4_1000;//To Port = 12;
	 AtSpeed_3_997 __Port[1] =  PreBinFlow_S_998;//To Port = 10;
	 PreBinFlow_S_998 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_3_999;//To Port = 11;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_3_999 __Port[0] =  AtSpeed_4_1000;//To Port = 12;
	 AtSpeed_4_1000 __Port[0] =  AtSpeed_5_1003;//To Port = 15;
	 AtSpeed_4_1000 __Port[1] =  PreBinFlow_S_1001;//To Port = 13;
	 PreBinFlow_S_1001 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_4_1002;//To Port = 14;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_4_1002 __Port[0] =  AtSpeed_5_1003;//To Port = 15;
	 AtSpeed_5_1003 __Port[0] = FlowNode_1006;//To Port = 18;
	 AtSpeed_5_1003 __Port[1] =  PreBinFlow_S_1004;//To Port = 16;
	 PreBinFlow_S_1004 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_5_1005;//To Port = 17;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_5_1005 __Port[0] = FlowNode_1006;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_AtSpeed_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Probe_AtSpeed_S                                              ***/
/****************************************************************************/
__SubFlow Probe_AtSpeed_S {
	__Node  Probe_AtSpeed_Vmin_S_1007 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "417";
		__Exec =  Probe_AtSpeed_Vmin_S;
	}
	__Node  Probe_AtSpeed_Vmax_S_1008 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "418";
		__Exec =  Probe_AtSpeed_Vmax_S;
	}
	__Node FlowNode_1009 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "419";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1009;
	__PortConnections {
	 Probe_AtSpeed_Vmin_S_1007 __Port[0] = FlowNode_1009;//To Port = 2;
	 Probe_AtSpeed_Vmax_S_1008 __Port[0] = FlowNode_1009;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_AtSpeed_S ***/

/****************************************************************************/
/*** SubFlow Probe_SpecLevels_Vmin_S                                      ***/
/****************************************************************************/
__SubFlow Probe_SpecLevels_Vmin_S {
	__Node  SpecLevels_1010 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "420";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_1011 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "421";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmin_DC_PARA_100_1012 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "422";
		__Exec =  F_FUNC_SPEC_Vmin_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmin_1013 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "423";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmin;
	}
	__Node  PreBinFlow_S_1014 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "424";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmin_PM86_DC_PM04_1015 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "425";
		__Exec =  F_PARA_VIO_Vmin_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1016 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "426";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_1010;
	__PortConnections {
	 SpecLevels_1010 __Port[0] =  VoutVmin_1013;//To Port = 3;
	 SpecLevels_1010 __Port[1] =  PreBinFlow_S_1011;//To Port = 1;
	 PreBinFlow_S_1011 __Port[0] =  F_FUNC_SPEC_Vmin_DC_PARA_100_1012;//To Port = 2;
	 F_FUNC_SPEC_Vmin_DC_PARA_100_1012 __Port[0] =  VoutVmin_1013;//To Port = 3;
	 VoutVmin_1013 __Port[0] = FlowNode_1016;//To Port = 6;
	 VoutVmin_1013 __Port[1] =  PreBinFlow_S_1014;//To Port = 4;
	 PreBinFlow_S_1014 __Port[0] =  F_PARA_VIO_Vmin_PM86_DC_PM04_1015;//To Port = 5;
	 F_PARA_VIO_Vmin_PM86_DC_PM04_1015 __Port[0] = FlowNode_1016;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_SpecLevels_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Probe_SpecLevels_Vmax_S                                      ***/
/****************************************************************************/
__SubFlow Probe_SpecLevels_Vmax_S {
	__Node  SpecLevels_1017 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "427";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_1018 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "428";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmax_DC_PARA_100_1019 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "429";
		__Exec =  F_FUNC_SPEC_Vmax_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmax_1020 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "430";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmax;
	}
	__Node  PreBinFlow_S_1021 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "431";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmax_PM86_DC_PM04_1022 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "432";
		__Exec =  F_PARA_VIO_Vmax_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1023 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "433";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_1017;
	__PortConnections {
	 SpecLevels_1017 __Port[0] =  VoutVmax_1020;//To Port = 3;
	 SpecLevels_1017 __Port[1] =  PreBinFlow_S_1018;//To Port = 1;
	 PreBinFlow_S_1018 __Port[0] =  F_FUNC_SPEC_Vmax_DC_PARA_100_1019;//To Port = 2;
	 F_FUNC_SPEC_Vmax_DC_PARA_100_1019 __Port[0] =  VoutVmax_1020;//To Port = 3;
	 VoutVmax_1020 __Port[0] = FlowNode_1023;//To Port = 6;
	 VoutVmax_1020 __Port[1] =  PreBinFlow_S_1021;//To Port = 4;
	 PreBinFlow_S_1021 __Port[0] =  F_PARA_VIO_Vmax_PM86_DC_PM04_1022;//To Port = 5;
	 F_PARA_VIO_Vmax_PM86_DC_PM04_1022 __Port[0] = FlowNode_1023;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_SpecLevels_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Probe_Leakage_S                                              ***/
/****************************************************************************/
__SubFlow Probe_Leakage_S {
	__Node  LeakIIn_1024 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "434";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIIn;
	}
	__Node  PreBinFlow_S_1025 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "435";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IIN_Vmax_1026 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "436";
		__Exec =  F_LEAK_IIN_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  LeakIO_1027 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "437";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIO;
	}
	__Node  PreBinFlow_S_1028 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "438";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IOZ_Vmax_PM85_1029 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "439";
		__Exec =  F_LEAK_IOZ_Vmax_PM85;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1030 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "440";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  LeakIIn_1024;
	__PortConnections {
	 LeakIIn_1024 __Port[0] =  LeakIO_1027;//To Port = 3;
	 LeakIIn_1024 __Port[1] =  PreBinFlow_S_1025;//To Port = 1;
	 PreBinFlow_S_1025 __Port[0] =  F_LEAK_IIN_Vmax_1026;//To Port = 2;
	 F_LEAK_IIN_Vmax_1026 __Port[0] =  LeakIO_1027;//To Port = 3;
	 LeakIO_1027 __Port[0] = FlowNode_1030;//To Port = 6;
	 LeakIO_1027 __Port[1] =  PreBinFlow_S_1028;//To Port = 4;
	 PreBinFlow_S_1028 __Port[0] =  F_LEAK_IOZ_Vmax_PM85_1029;//To Port = 5;
	 F_LEAK_IOZ_Vmax_PM85_1029 __Port[0] = FlowNode_1030;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Leakage_S ***/

/****************************************************************************/
/*** SubFlow Probe_Parametrics_S                                          ***/
/****************************************************************************/
__SubFlow Probe_Parametrics_S {
	__Node  Probe_SpecLevels_Vmin_S_1031 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "441";
		__Exec =  Probe_SpecLevels_Vmin_S;
	}
	__Node  Probe_SpecLevels_Vmax_S_1032 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "442";
		__Exec =  Probe_SpecLevels_Vmax_S;
	}
	__Node  Probe_Leakage_S_1033 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "443";
		__Exec =  Probe_Leakage_S;
	}
	__Node FlowNode_1034 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "444";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Probe_Leakage_S_1033;
	__PortConnections {
	 Probe_SpecLevels_Vmin_S_1031 __Port[0] =  Probe_Leakage_S_1033;//To Port = 2;
	 Probe_SpecLevels_Vmax_S_1032 __Port[0] =  Probe_Leakage_S_1033;//To Port = 2;
	 Probe_Leakage_S_1033 __Port[0] = FlowNode_1034;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_Parametrics_S ***/

/****************************************************************************/
/*** SubFlow Probe_SupplyShort_S                                          ***/
/****************************************************************************/
__SubFlow Probe_SupplyShort_S {
	__Node  SupplyShorts2_1035 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "445";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts2;
	}
	__Node  F_OS_SHRT_VDD_1036 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "446";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node FlowNode_1037 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "447";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts2_1035;
	__PortConnections {
	 SupplyShorts2_1035 __Port[0] = FlowNode_1037;//To Port = 2;
	 SupplyShorts2_1035 __Port[1] =  F_OS_SHRT_VDD_1036;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Probe_SupplyShort_S ***/

/****************************************************************************/
/*** SubFlow Probe_CRES_S                                                 ***/
/****************************************************************************/
__SubFlow Probe_CRES_S {
	__Node FlowNode_1038 {
		__XCoord = (0,50);
		__Port[0] {
			__PortPosition = 90;
		}
		__Port[1] {
			__PortPosition = 175;
		}
		__InputPosition = 220;
		__TestID = "448";
		__PortSelect =  "if ( fmod( TestProgData.CurSiteSerial, 50 ) = 0, 1, 0)";
	}
	__Node  Cres_1039 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "449";
		__Calibration = Bllizar_Calibration;
		__Exec =  Cres;
	}
	__Node  F_OS_CRES_1040 {
		__XCoord = (-15,295);
		__InputPosition = 20;
		__TestID = "450";
		__Exec =  F_OS_CRES;
	}
	__Node FlowNode_1041 {
		__XCoord = (255,150);
		__InputPosition = 270;
		__TestID = "451";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1038;
	__PortConnections {
	FlowNode_1038 __Port[0] = FlowNode_1041;//To Port = 3;
	FlowNode_1038 __Port[1] =  Cres_1039;//To Port = 1;
	 Cres_1039 __Port[0] = FlowNode_1041;//To Port = 3;
	 Cres_1039 __Port[1] =  F_OS_CRES_1040;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,255,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/Qual_flow.evo                                  */
/* Creation Date  : Tue Jan  3 17:12:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************************************/
/*** SubFlow Qual_SUB_FLOW                                                ***/
/****************************************************************************/
__SubFlow Qual_SUB_FLOW {
	__Node  Qual_ShrtAndDieID_S_1042 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "741";
		__Exec =  Qual_ShrtAndDieID_S;
	}
	__Node  Qual_OpenShrt_S_1043 {
		__XCoord = (180,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "742";
		__Exec =  Qual_OpenShrt_S;
	}
	__Node  Qual_PreStress_S_1044 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "743";
		__Exec =  Qual_PreStress_S;
	}
	__Node  Qual_PreStressPostRepr_S_1045 {
		__XCoord = (440,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "744";
		__Exec =  Qual_PreStressPostRepr_S;
	}
	__Node  Qual_PostStressFunc_S_1046 {
		__XCoord = (570,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "745";
		__Exec =  Qual_PostStressFunc_S;
	}
	__Node  Qual_PostStressSrch_S_1047 {
		__XCoord = (700,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "746";
		__Exec =  Qual_PostStressSrch_S;
	}
	__Node  Qual_PostStressIddq_S_1048 {
		__XCoord = (830,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "747";
		__Exec =  Qual_PostStressIddq_S;
	}
	__Node  Qual_AtSpeed_S_1049 {
		__XCoord = (960,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "748";
		__Exec =  Qual_AtSpeed_S;
	}
	__Node  Qual_Parametrics_S_1050 {
		__XCoord = (1090,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "749";
		__Exec =  Qual_Parametrics_S;
	}
	__Node  Qual_SupplyShort_S_1051 {
		__XCoord = (1220,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "750";
		__Exec =  Qual_SupplyShort_S;
	}
	__Node  Qual_CRES_S_1052 {
		__XCoord = (1350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "751";
		__Exec =  Qual_CRES_S;
	}
	__Node FlowNode_1053 {
		__XCoord = (1480,150);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 220;
		__TestID = "752";
		__PortSelect =  "if(GlobalNotBinned.Meas, 0, 1)";
	}
	__Node  GOOD_UNIT_1054 {
		__XCoord = (1480,280);
		__InputPosition = 0;
		__TestID = "753";
		__Exec =  GOOD_UNIT;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_ShrtAndDieID_S_1042;
	__PortConnections {
	 Qual_ShrtAndDieID_S_1042 __Port[0] =  Qual_OpenShrt_S_1043;//To Port = 1;
	 Qual_OpenShrt_S_1043 __Port[0] =  Qual_PreStress_S_1044;//To Port = 2;
	 Qual_PreStress_S_1044 __Port[0] =  Qual_PostStressFunc_S_1046;//To Port = 4;
	 Qual_PreStressPostRepr_S_1045 __Port[0] =  Qual_PostStressFunc_S_1046;//To Port = 4;
	 Qual_PostStressFunc_S_1046 __Port[0] =  Qual_PostStressSrch_S_1047;//To Port = 5;
	 Qual_PostStressSrch_S_1047 __Port[0] =  Qual_PostStressIddq_S_1048;//To Port = 6;
	 Qual_PostStressIddq_S_1048 __Port[0] =  Qual_AtSpeed_S_1049;//To Port = 7;
	 Qual_AtSpeed_S_1049 __Port[0] =  Qual_Parametrics_S_1050;//To Port = 8;
	 Qual_Parametrics_S_1050 __Port[0] =  Qual_SupplyShort_S_1051;//To Port = 9;
	 Qual_SupplyShort_S_1051 __Port[0] =  Qual_CRES_S_1052;//To Port = 10;
	 Qual_CRES_S_1052 __Port[0] = FlowNode_1053;//To Port = 11;
	FlowNode_1053 __Port[0] =  GOOD_UNIT_1054;//To Port = 12;
	}
}
/*** END SubFlow Qual_SUB_FLOW ***/

/****************************************************************************/
/*** SubFlow Qual_ShrtAndDieID_S                                          ***/
/****************************************************************************/
__SubFlow Qual_ShrtAndDieID_S {
	__Node  SupplyShorts1_1055 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "754";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts1;
	}
	__Node  F_OS_SHRT_VDD_1056 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "755";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node  FFDieIDRead_1057 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_8"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_VEfuseR"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "756";
		__Calibration = Bllizar_Calibration;
		__Exec =  FFDieIDRead;
	}
	__Node  F_FUSE_DIEID_PRE_READ_1058 {
		__XCoord = (200,325);
		__InputPosition = 20;
		__TestID = "757";
		__Exec =  F_FUSE_DIEID_PRE_READ;
	}
	__Node FlowNode_1059 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "758";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts1_1055;
	__PortConnections {
	 SupplyShorts1_1055 __Port[0] =  FFDieIDRead_1057;//To Port = 2;
	 SupplyShorts1_1055 __Port[1] =  F_OS_SHRT_VDD_1056;//To Port = 1;
	 FFDieIDRead_1057 __Port[0] = FlowNode_1059;//To Port = 4;
	 FFDieIDRead_1057 __Port[1] =  F_FUSE_DIEID_PRE_READ_1058;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_ShrtAndDieID_S ***/

/****************************************************************************/
/*** SubFlow Qual_OpenShrt_S                                              ***/
/****************************************************************************/
__SubFlow Qual_OpenShrt_S {
	__Node  PinOpensTest_1060 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 180;
		}
		__Port[3] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "759";
		__Calibration = Bllizar_Calibration;
		__Exec =  PinOpensTest;
	}
	__Node  F_OS_OPEN_1061 {
		__XCoord = (100,364);
		__InputPosition = 20;
		__TestID = "760";
		__Exec =  F_OS_OPEN;
	}
	__Node  F_OS_SHRT_PIN_1062 {
		__XCoord = (21,364);
		__InputPosition = 20;
		__TestID = "761";
		__Exec =  F_OS_SHRT_PIN;
	}
	__Node  F_OS_SHRT_PTPS_1063 {
		__XCoord = (-20,295);
		__InputPosition = 20;
		__TestID = "762";
		__Exec =  F_OS_SHRT_PTPS;
	}
	__Node  AnalogConty_1064 {
		__XCoord = (310,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__Port[2] {
			__PortPosition = 150;
		}
		__Port[3] {
			__PortPosition = 210;
		}
		__Port[4] {
			__PortPosition = 270;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "763";
		__Calibration = Bllizar_Calibration;
		__Exec =  AnalogConty;
	}
	__Node  F_OS_OPEN_ANALOG_1065 {
		__XCoord = (388,328);
		__InputPosition = 20;
		__TestID = "764";
		__Exec =  F_OS_OPEN_ANALOG;
	}
	__Node  F_OS_SHRT_ANALOG_1066 {
		__XCoord = (325,355);
		__InputPosition = 20;
		__TestID = "765";
		__Exec =  F_OS_SHRT_ANALOG;
	}
	__Node  F_OS_OPEN_ANALOG_1_1067 {
		__XCoord = (262,328);
		__InputPosition = 20;
		__TestID = "766";
		__Exec =  F_OS_OPEN_ANALOG_1;
	}
	__Node  F_OS_SHRT_ANALOG_2_1068 {
		__XCoord = (235,265);
		__InputPosition = 20;
		__TestID = "767";
		__Exec =  F_OS_SHRT_ANALOG_2;
	}
	__Node  SupplyOpensTest_1069 {
		__XCoord = (625,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "768";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyOpensTest;
	}
	__Node  F_OS_OPEN_VDD_1070 {
		__XCoord = (625,355);
		__InputPosition = 20;
		__TestID = "769";
		__Exec =  F_OS_OPEN_VDD;
	}
	__Node FlowNode_1071 {
		__XCoord = (775,150);
		__InputPosition = 270;
		__TestID = "770";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  PinOpensTest_1060;
	__PortConnections {
	 PinOpensTest_1060 __Port[0] =  AnalogConty_1064;//To Port = 4;
	 PinOpensTest_1060 __Port[1] =  F_OS_OPEN_1061;//To Port = 1;
	 PinOpensTest_1060 __Port[2] =  F_OS_SHRT_PIN_1062;//To Port = 2;
	 PinOpensTest_1060 __Port[3] =  F_OS_SHRT_PTPS_1063;//To Port = 3;
	 AnalogConty_1064 __Port[0] =  SupplyOpensTest_1069;//To Port = 9;
	 AnalogConty_1064 __Port[1] =  F_OS_OPEN_ANALOG_1065;//To Port = 5;
	 AnalogConty_1064 __Port[2] =  F_OS_SHRT_ANALOG_1066;//To Port = 6;
	 AnalogConty_1064 __Port[3] =  F_OS_OPEN_ANALOG_1_1067;//To Port = 7;
	 AnalogConty_1064 __Port[4] =  F_OS_SHRT_ANALOG_2_1068;//To Port = 8;
	 SupplyOpensTest_1069 __Port[0] = FlowNode_1071;//To Port = 11;
	 SupplyOpensTest_1069 __Port[1] =  F_OS_OPEN_VDD_1070;//To Port = 10;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,775,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_OpenShrt_S ***/

/****************************************************************************/
/*** SubFlow Qual_SrchVdd_Vmin_Pre1_S                                     ***/
/****************************************************************************/
__SubFlow Qual_SrchVdd_Vmin_Pre1_S {
	__Node  VminSearchPre1_1072 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "771";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1;
	}
	__Node  PreBinFlow_S_1073 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "772";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_1074 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "773";
		__Exec =  F_FUNC_Vmin;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_1_1075 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "774";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_1;
	}
	__Node  PreBinFlow_S_1076 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "775";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_1077 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "776";
		__Exec =  F_FUNC_Vmin_GROS_100_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_2_1078 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "777";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_2;
	}
	__Node  PreBinFlow_S_1079 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "778";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_1080 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "779";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_3_1081 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "780";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_3;
	}
	__Node  PreBinFlow_S_1082 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "781";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_1083 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "782";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_4_1084 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "783";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_4;
	}
	__Node  PreBinFlow_S_1085 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "784";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_1086 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "785";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_5_1087 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "786";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_5;
	}
	__Node  PreBinFlow_S_1088 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "787";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_1089 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "788";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_6_1090 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "789";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_6;
	}
	__Node  PreBinFlow_S_1091 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "790";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_1092 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "791";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_7_1093 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "792";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_7;
	}
	__Node  PreBinFlow_S_1094 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "793";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_OTG_100_1095 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "794";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_8_1096 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "795";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_8;
	}
	__Node  PreBinFlow_S_1097 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "796";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_1_1098 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "797";
		__Exec =  F_FUNC_Vmin_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPre1_9_1099 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "798";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPre1_9;
	}
	__Node  PreBinFlow_S_1100 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "799";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_ANALOG_USB_CHG_100_1101 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "800";
		__Exec =  F_FUNC_Vmin_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1102 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "801";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPre1_1072;
	__PortConnections {
	 VminSearchPre1_1072 __Port[0] =  VminSearchPre1_1_1075;//To Port = 3;
	 VminSearchPre1_1072 __Port[1] =  PreBinFlow_S_1073;//To Port = 1;
	 PreBinFlow_S_1073 __Port[0] =  F_FUNC_Vmin_1074;//To Port = 2;
	 F_FUNC_Vmin_1074 __Port[0] =  VminSearchPre1_1_1075;//To Port = 3;
	 VminSearchPre1_1_1075 __Port[0] =  VminSearchPre1_2_1078;//To Port = 6;
	 VminSearchPre1_1_1075 __Port[1] =  PreBinFlow_S_1076;//To Port = 4;
	 PreBinFlow_S_1076 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_1077;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_1077 __Port[0] =  VminSearchPre1_2_1078;//To Port = 6;
	 VminSearchPre1_2_1078 __Port[0] =  VminSearchPre1_3_1081;//To Port = 9;
	 VminSearchPre1_2_1078 __Port[1] =  PreBinFlow_S_1079;//To Port = 7;
	 PreBinFlow_S_1079 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_1080;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_1080 __Port[0] =  VminSearchPre1_3_1081;//To Port = 9;
	 VminSearchPre1_3_1081 __Port[0] =  VminSearchPre1_4_1084;//To Port = 12;
	 VminSearchPre1_3_1081 __Port[1] =  PreBinFlow_S_1082;//To Port = 10;
	 PreBinFlow_S_1082 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_1083;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_1083 __Port[0] =  VminSearchPre1_4_1084;//To Port = 12;
	 VminSearchPre1_4_1084 __Port[0] =  VminSearchPre1_5_1087;//To Port = 15;
	 VminSearchPre1_4_1084 __Port[1] =  PreBinFlow_S_1085;//To Port = 13;
	 PreBinFlow_S_1085 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_1086;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_1086 __Port[0] =  VminSearchPre1_5_1087;//To Port = 15;
	 VminSearchPre1_5_1087 __Port[0] =  VminSearchPre1_6_1090;//To Port = 18;
	 VminSearchPre1_5_1087 __Port[1] =  PreBinFlow_S_1088;//To Port = 16;
	 PreBinFlow_S_1088 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_1089;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_1089 __Port[0] =  VminSearchPre1_6_1090;//To Port = 18;
	 VminSearchPre1_6_1090 __Port[0] =  VminSearchPre1_7_1093;//To Port = 21;
	 VminSearchPre1_6_1090 __Port[1] =  PreBinFlow_S_1091;//To Port = 19;
	 PreBinFlow_S_1091 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_1092;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_1092 __Port[0] =  VminSearchPre1_7_1093;//To Port = 21;
	 VminSearchPre1_7_1093 __Port[0] =  VminSearchPre1_8_1096;//To Port = 24;
	 VminSearchPre1_7_1093 __Port[1] =  PreBinFlow_S_1094;//To Port = 22;
	 PreBinFlow_S_1094 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_OTG_100_1095;//To Port = 23;
	 F_FUNC_Vmin_ANALOG_USB_OTG_100_1095 __Port[0] =  VminSearchPre1_8_1096;//To Port = 24;
	 VminSearchPre1_8_1096 __Port[0] =  VminSearchPre1_9_1099;//To Port = 27;
	 VminSearchPre1_8_1096 __Port[1] =  PreBinFlow_S_1097;//To Port = 25;
	 PreBinFlow_S_1097 __Port[0] =  F_FUNC_Vmin_1_1098;//To Port = 26;
	 F_FUNC_Vmin_1_1098 __Port[0] =  VminSearchPre1_9_1099;//To Port = 27;
	 VminSearchPre1_9_1099 __Port[0] = FlowNode_1102;//To Port = 30;
	 VminSearchPre1_9_1099 __Port[1] =  PreBinFlow_S_1100;//To Port = 28;
	 PreBinFlow_S_1100 __Port[0] =  F_FUNC_Vmin_ANALOG_USB_CHG_100_1101;//To Port = 29;
	 F_FUNC_Vmin_ANALOG_USB_CHG_100_1101 __Port[0] = FlowNode_1102;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_SrchVdd_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow Qual_Func_Vmin_Pre1_S                                        ***/
/****************************************************************************/
__SubFlow Qual_Func_Vmin_Pre1_S {
	__Node  FuncVminPre1_1103 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "802";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1;
	}
	__Node  PreBinFlow_S_1104 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "803";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_2_1105 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "804";
		__Exec =  F_FUNC_Vmin_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_1_1106 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "805";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_1;
	}
	__Node  PreBinFlow_S_1107 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "806";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_pre_3_1108 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "807";
		__Exec =  F_FUNC_Vmin_GROS_100_pre_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_2_1109 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "808";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_2;
	}
	__Node  PreBinFlow_S_1110 {
		__XCoord = (350,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "809";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_pre_4_1111 {
		__XCoord = (350,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "810";
		__Exec =  F_FUNC_Vmin_GROS_100_1_pre_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_3_1112 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "811";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_3;
	}
	__Node  PreBinFlow_S_1113 {
		__XCoord = (500,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "812";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_pre_5_1114 {
		__XCoord = (500,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "813";
		__Exec =  F_FUNC_Vmin_GROS_100_2_pre_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_4_1115 {
		__XCoord = (650,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "814";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_4;
	}
	__Node  PreBinFlow_S_1116 {
		__XCoord = (650,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "815";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_pre_6_1117 {
		__XCoord = (650,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "816";
		__Exec =  F_FUNC_Vmin_GROS_100_3_pre_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_5_1118 {
		__XCoord = (800,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "817";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_5;
	}
	__Node  PreBinFlow_S_1119 {
		__XCoord = (800,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "818";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_pre_7_1120 {
		__XCoord = (800,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "819";
		__Exec =  F_FUNC_Vmin_GROS_100_4_pre_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_6_1121 {
		__XCoord = (950,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "820";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_6;
	}
	__Node  PreBinFlow_S_1122 {
		__XCoord = (950,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "821";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_pre_8_1123 {
		__XCoord = (950,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "822";
		__Exec =  F_FUNC_Vmin_GROS_166p66_pre_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_7_1124 {
		__XCoord = (1100,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "823";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_7;
	}
	__Node  PreBinFlow_S_1125 {
		__XCoord = (1100,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "824";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_10_1126 {
		__XCoord = (1100,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "825";
		__Exec =  F_FUNC_Vmin_10;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_8_1127 {
		__XCoord = (1250,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "826";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_8;
	}
	__Node  PreBinFlow_S_1128 {
		__XCoord = (1250,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "827";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_11_1129 {
		__XCoord = (1250,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "828";
		__Exec =  F_FUNC_Vmin_11;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre1_9_1130 {
		__XCoord = (1400,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "829";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre1_9;
	}
	__Node  PreBinFlow_S_1131 {
		__XCoord = (1400,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "830";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_13_1132 {
		__XCoord = (1400,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "831";
		__Exec =  F_FUNC_Vmin_13;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1133 {
		__XCoord = (1550,250);
		__InputPosition = 270;
		__TestID = "832";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre1_1103;
	__PortConnections {
	 FuncVminPre1_1103 __Port[0] =  FuncVminPre1_1_1106;//To Port = 3;
	 FuncVminPre1_1103 __Port[1] =  PreBinFlow_S_1104;//To Port = 1;
	 PreBinFlow_S_1104 __Port[0] =  F_FUNC_Vmin_2_1105;//To Port = 2;
	 F_FUNC_Vmin_2_1105 __Port[0] =  FuncVminPre1_1_1106;//To Port = 3;
	 FuncVminPre1_1_1106 __Port[0] =  FuncVminPre1_2_1109;//To Port = 6;
	 FuncVminPre1_1_1106 __Port[1] =  PreBinFlow_S_1107;//To Port = 4;
	 PreBinFlow_S_1107 __Port[0] =  F_FUNC_Vmin_GROS_100_pre_3_1108;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_pre_3_1108 __Port[0] =  FuncVminPre1_2_1109;//To Port = 6;
	 FuncVminPre1_2_1109 __Port[0] =  FuncVminPre1_3_1112;//To Port = 9;
	 FuncVminPre1_2_1109 __Port[1] =  PreBinFlow_S_1110;//To Port = 7;
	 PreBinFlow_S_1110 __Port[0] =  F_FUNC_Vmin_GROS_100_1_pre_4_1111;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_pre_4_1111 __Port[0] =  FuncVminPre1_3_1112;//To Port = 9;
	 FuncVminPre1_3_1112 __Port[0] =  FuncVminPre1_4_1115;//To Port = 12;
	 FuncVminPre1_3_1112 __Port[1] =  PreBinFlow_S_1113;//To Port = 10;
	 PreBinFlow_S_1113 __Port[0] =  F_FUNC_Vmin_GROS_100_2_pre_5_1114;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_pre_5_1114 __Port[0] =  FuncVminPre1_4_1115;//To Port = 12;
	 FuncVminPre1_4_1115 __Port[0] =  FuncVminPre1_5_1118;//To Port = 15;
	 FuncVminPre1_4_1115 __Port[1] =  PreBinFlow_S_1116;//To Port = 13;
	 PreBinFlow_S_1116 __Port[0] =  F_FUNC_Vmin_GROS_100_3_pre_6_1117;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_pre_6_1117 __Port[0] =  FuncVminPre1_5_1118;//To Port = 15;
	 FuncVminPre1_5_1118 __Port[0] =  FuncVminPre1_6_1121;//To Port = 18;
	 FuncVminPre1_5_1118 __Port[1] =  PreBinFlow_S_1119;//To Port = 16;
	 PreBinFlow_S_1119 __Port[0] =  F_FUNC_Vmin_GROS_100_4_pre_7_1120;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_pre_7_1120 __Port[0] =  FuncVminPre1_6_1121;//To Port = 18;
	 FuncVminPre1_6_1121 __Port[0] =  FuncVminPre1_7_1124;//To Port = 21;
	 FuncVminPre1_6_1121 __Port[1] =  PreBinFlow_S_1122;//To Port = 19;
	 PreBinFlow_S_1122 __Port[0] =  F_FUNC_Vmin_GROS_166p66_pre_8_1123;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_pre_8_1123 __Port[0] =  FuncVminPre1_7_1124;//To Port = 21;
	 FuncVminPre1_7_1124 __Port[0] =  FuncVminPre1_8_1127;//To Port = 24;
	 FuncVminPre1_7_1124 __Port[1] =  PreBinFlow_S_1125;//To Port = 22;
	 PreBinFlow_S_1125 __Port[0] =  F_FUNC_Vmin_10_1126;//To Port = 23;
	 F_FUNC_Vmin_10_1126 __Port[0] =  FuncVminPre1_8_1127;//To Port = 24;
	 FuncVminPre1_8_1127 __Port[0] =  FuncVminPre1_9_1130;//To Port = 27;
	 FuncVminPre1_8_1127 __Port[1] =  PreBinFlow_S_1128;//To Port = 25;
	 PreBinFlow_S_1128 __Port[0] =  F_FUNC_Vmin_11_1129;//To Port = 26;
	 F_FUNC_Vmin_11_1129 __Port[0] =  FuncVminPre1_9_1130;//To Port = 27;
	 FuncVminPre1_9_1130 __Port[0] = FlowNode_1133;//To Port = 30;
	 FuncVminPre1_9_1130 __Port[1] =  PreBinFlow_S_1131;//To Port = 28;
	 PreBinFlow_S_1131 __Port[0] =  F_FUNC_Vmin_13_1132;//To Port = 29;
	 F_FUNC_Vmin_13_1132 __Port[0] = FlowNode_1133;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Func_Vmin_Pre1_S ***/

/****************************************************************************/
/*** SubFlow Qual_PreStress_S                                             ***/
/****************************************************************************/
__SubFlow Qual_PreStress_S {
	__Node  Qual_SrchVdd_Vmin_Pre1_S_1134 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "833";
		__Exec =  Qual_SrchVdd_Vmin_Pre1_S;
	}
	__Node  Qual_Func_Vmin_Pre1_S_1135 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "834";
		__Exec =  Qual_Func_Vmin_Pre1_S;
	}
	__Node FlowNode_1136 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "835";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_SrchVdd_Vmin_Pre1_S_1134;
	__PortConnections {
	 Qual_SrchVdd_Vmin_Pre1_S_1134 __Port[0] = FlowNode_1136;//To Port = 2;
	 Qual_Func_Vmin_Pre1_S_1135 __Port[0] = FlowNode_1136;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_PreStress_S ***/

/****************************************************************************/
/*** SubFlow Qual_Func_Vmin_Pre2_S                                        ***/
/****************************************************************************/
__SubFlow Qual_Func_Vmin_Pre2_S {
	__Node  FuncVminPre2_1137 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "836";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2;
	}
	__Node  PreBinFlow_S_1138 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "837";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_pre_1139 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "838";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPre2_1_1140 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "839";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPre2_1;
	}
	__Node  PreBinFlow_S_1141 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "840";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_BIST_PROD_33_1_pre_1142 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "841";
		__Exec =  F_FUNC_Vmin_BIST_PROD_33_1_pre;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1143 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "842";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPre2_1137;
	__PortConnections {
	 FuncVminPre2_1137 __Port[0] =  FuncVminPre2_1_1140;//To Port = 3;
	 FuncVminPre2_1137 __Port[1] =  PreBinFlow_S_1138;//To Port = 1;
	 PreBinFlow_S_1138 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_pre_1139;//To Port = 2;
	 F_FUNC_Vmin_BIST_PROD_33_pre_1139 __Port[0] =  FuncVminPre2_1_1140;//To Port = 3;
	 FuncVminPre2_1_1140 __Port[0] = FlowNode_1143;//To Port = 6;
	 FuncVminPre2_1_1140 __Port[1] =  PreBinFlow_S_1141;//To Port = 4;
	 PreBinFlow_S_1141 __Port[0] =  F_FUNC_Vmin_BIST_PROD_33_1_pre_1142;//To Port = 5;
	 F_FUNC_Vmin_BIST_PROD_33_1_pre_1142 __Port[0] = FlowNode_1143;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Func_Vmin_Pre2_S ***/

/****************************************************************************/
/*** SubFlow Qual_PreStressPostRepr_S                                     ***/
/****************************************************************************/
__SubFlow Qual_PreStressPostRepr_S {
	__Node  Qual_Func_Vmin_Pre2_S_1144 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "843";
		__Exec =  Qual_Func_Vmin_Pre2_S;
	}
	__Node FlowNode_1145 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "844";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1145;
	__PortConnections {
	 Qual_Func_Vmin_Pre2_S_1144 __Port[0] = FlowNode_1145;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_PreStressPostRepr_S ***/

/****************************************************************************/
/*** SubFlow Qual_Func_Vmax_Post_S                                        ***/
/****************************************************************************/
__SubFlow Qual_Func_Vmax_Post_S {
	__Node  FuncVmaxPost_1146 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "845";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost;
	}
	__Node  PreBinFlow_S_1147 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "846";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_1148 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "847";
		__Exec =  F_FUNC_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_1_1149 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "848";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_1;
	}
	__Node  PreBinFlow_S_1150 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "849";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_post_1151 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "850";
		__Exec =  F_FUNC_Vmax_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_2_1152 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "851";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_2;
	}
	__Node  PreBinFlow_S_1153 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "852";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_1_post_1154 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "853";
		__Exec =  F_FUNC_Vmax_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_3_1155 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "854";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_3;
	}
	__Node  PreBinFlow_S_1156 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "855";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_2_post_1157 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "856";
		__Exec =  F_FUNC_Vmax_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_4_1158 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "857";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_4;
	}
	__Node  PreBinFlow_S_1159 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "858";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_3_post_1160 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "859";
		__Exec =  F_FUNC_Vmax_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_5_1161 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "860";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_5;
	}
	__Node  PreBinFlow_S_1162 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "861";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_100_4_post_1163 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "862";
		__Exec =  F_FUNC_Vmax_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_6_1164 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "863";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_6;
	}
	__Node  PreBinFlow_S_1165 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "864";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_GROS_166p66_post_1166 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "865";
		__Exec =  F_FUNC_Vmax_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_7_1167 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "866";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_7;
	}
	__Node  PreBinFlow_S_1168 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "867";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_OTG_100_1169 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "868";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_OTG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_8_1170 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_11"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "869";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_8;
	}
	__Node  PreBinFlow_S_1171 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "870";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_post_1172 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "871";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_9_1173 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_12"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "872";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_9;
	}
	__Node  PreBinFlow_S_1174 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "873";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_BIST_PROD_33_1_1175 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "874";
		__Exec =  F_FUNC_Vmax_BIST_PROD_33_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_10_1176 {
		__XCoord = (1550,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "875";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_10;
	}
	__Node  PreBinFlow_S_1177 {
		__XCoord = (1550,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "876";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_1_1178 {
		__XCoord = (1550,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "877";
		__Exec =  F_FUNC_Vmax_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVmaxPost_11_1179 {
		__XCoord = (1700,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "878";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVmaxPost_11;
	}
	__Node  PreBinFlow_S_1180 {
		__XCoord = (1700,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "879";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmax_ANALOG_USB_CHG_100_1181 {
		__XCoord = (1700,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "880";
		__Exec =  F_FUNC_Vmax_ANALOG_USB_CHG_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1182 {
		__XCoord = (1850,150);
		__InputPosition = 270;
		__TestID = "881";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVmaxPost_1146;
	__PortConnections {
	 FuncVmaxPost_1146 __Port[0] =  FuncVmaxPost_1_1149;//To Port = 3;
	 FuncVmaxPost_1146 __Port[1] =  PreBinFlow_S_1147;//To Port = 1;
	 PreBinFlow_S_1147 __Port[0] =  F_FUNC_Vmax_1148;//To Port = 2;
	 F_FUNC_Vmax_1148 __Port[0] =  FuncVmaxPost_1_1149;//To Port = 3;
	 FuncVmaxPost_1_1149 __Port[0] =  FuncVmaxPost_2_1152;//To Port = 6;
	 FuncVmaxPost_1_1149 __Port[1] =  PreBinFlow_S_1150;//To Port = 4;
	 PreBinFlow_S_1150 __Port[0] =  F_FUNC_Vmax_GROS_100_post_1151;//To Port = 5;
	 F_FUNC_Vmax_GROS_100_post_1151 __Port[0] =  FuncVmaxPost_2_1152;//To Port = 6;
	 FuncVmaxPost_2_1152 __Port[0] =  FuncVmaxPost_3_1155;//To Port = 9;
	 FuncVmaxPost_2_1152 __Port[1] =  PreBinFlow_S_1153;//To Port = 7;
	 PreBinFlow_S_1153 __Port[0] =  F_FUNC_Vmax_GROS_100_1_post_1154;//To Port = 8;
	 F_FUNC_Vmax_GROS_100_1_post_1154 __Port[0] =  FuncVmaxPost_3_1155;//To Port = 9;
	 FuncVmaxPost_3_1155 __Port[0] =  FuncVmaxPost_4_1158;//To Port = 12;
	 FuncVmaxPost_3_1155 __Port[1] =  PreBinFlow_S_1156;//To Port = 10;
	 PreBinFlow_S_1156 __Port[0] =  F_FUNC_Vmax_GROS_100_2_post_1157;//To Port = 11;
	 F_FUNC_Vmax_GROS_100_2_post_1157 __Port[0] =  FuncVmaxPost_4_1158;//To Port = 12;
	 FuncVmaxPost_4_1158 __Port[0] =  FuncVmaxPost_5_1161;//To Port = 15;
	 FuncVmaxPost_4_1158 __Port[1] =  PreBinFlow_S_1159;//To Port = 13;
	 PreBinFlow_S_1159 __Port[0] =  F_FUNC_Vmax_GROS_100_3_post_1160;//To Port = 14;
	 F_FUNC_Vmax_GROS_100_3_post_1160 __Port[0] =  FuncVmaxPost_5_1161;//To Port = 15;
	 FuncVmaxPost_5_1161 __Port[0] =  FuncVmaxPost_6_1164;//To Port = 18;
	 FuncVmaxPost_5_1161 __Port[1] =  PreBinFlow_S_1162;//To Port = 16;
	 PreBinFlow_S_1162 __Port[0] =  F_FUNC_Vmax_GROS_100_4_post_1163;//To Port = 17;
	 F_FUNC_Vmax_GROS_100_4_post_1163 __Port[0] =  FuncVmaxPost_6_1164;//To Port = 18;
	 FuncVmaxPost_6_1164 __Port[0] =  FuncVmaxPost_7_1167;//To Port = 21;
	 FuncVmaxPost_6_1164 __Port[1] =  PreBinFlow_S_1165;//To Port = 19;
	 PreBinFlow_S_1165 __Port[0] =  F_FUNC_Vmax_GROS_166p66_post_1166;//To Port = 20;
	 F_FUNC_Vmax_GROS_166p66_post_1166 __Port[0] =  FuncVmaxPost_7_1167;//To Port = 21;
	 FuncVmaxPost_7_1167 __Port[0] =  FuncVmaxPost_8_1170;//To Port = 24;
	 FuncVmaxPost_7_1167 __Port[1] =  PreBinFlow_S_1168;//To Port = 22;
	 PreBinFlow_S_1168 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_OTG_100_1169;//To Port = 23;
	 F_FUNC_Vmax_ANALOG_USB_OTG_100_1169 __Port[0] =  FuncVmaxPost_8_1170;//To Port = 24;
	 FuncVmaxPost_8_1170 __Port[0] =  FuncVmaxPost_9_1173;//To Port = 27;
	 FuncVmaxPost_8_1170 __Port[1] =  PreBinFlow_S_1171;//To Port = 25;
	 PreBinFlow_S_1171 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_post_1172;//To Port = 26;
	 F_FUNC_Vmax_BIST_PROD_33_post_1172 __Port[0] =  FuncVmaxPost_9_1173;//To Port = 27;
	 FuncVmaxPost_9_1173 __Port[0] =  FuncVmaxPost_10_1176;//To Port = 30;
	 FuncVmaxPost_9_1173 __Port[1] =  PreBinFlow_S_1174;//To Port = 28;
	 PreBinFlow_S_1174 __Port[0] =  F_FUNC_Vmax_BIST_PROD_33_1_1175;//To Port = 29;
	 F_FUNC_Vmax_BIST_PROD_33_1_1175 __Port[0] =  FuncVmaxPost_10_1176;//To Port = 30;
	 FuncVmaxPost_10_1176 __Port[0] =  FuncVmaxPost_11_1179;//To Port = 33;
	 FuncVmaxPost_10_1176 __Port[1] =  PreBinFlow_S_1177;//To Port = 31;
	 PreBinFlow_S_1177 __Port[0] =  F_FUNC_Vmax_1_1178;//To Port = 32;
	 F_FUNC_Vmax_1_1178 __Port[0] =  FuncVmaxPost_11_1179;//To Port = 33;
	 FuncVmaxPost_11_1179 __Port[0] = FlowNode_1182;//To Port = 36;
	 FuncVmaxPost_11_1179 __Port[1] =  PreBinFlow_S_1180;//To Port = 34;
	 PreBinFlow_S_1180 __Port[0] =  F_FUNC_Vmax_ANALOG_USB_CHG_100_1181;//To Port = 35;
	 F_FUNC_Vmax_ANALOG_USB_CHG_100_1181 __Port[0] = FlowNode_1182;//To Port = 36;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1850,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Func_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow Qual_Func_Vmin_Post_S                                        ***/
/****************************************************************************/
__SubFlow Qual_Func_Vmin_Post_S {
	__Node  FuncVminPost_1183 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "882";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost;
	}
	__Node  PreBinFlow_S_1184 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "883";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_3_1185 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "884";
		__Exec =  F_FUNC_Vmin_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_1_1186 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "885";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_1;
	}
	__Node  PreBinFlow_S_1187 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "886";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_1188 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "887";
		__Exec =  F_FUNC_Vmin_GROS_100_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_2_1189 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "888";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_2;
	}
	__Node  PreBinFlow_S_1190 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "889";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_1191 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "890";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_3_1192 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "891";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_3;
	}
	__Node  PreBinFlow_S_1193 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "892";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_1194 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "893";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_4_1195 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "894";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_4;
	}
	__Node  PreBinFlow_S_1196 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "895";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_1197 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "896";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_5_1198 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "897";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_5;
	}
	__Node  PreBinFlow_S_1199 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "898";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_1200 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "899";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_6_1201 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "900";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_6;
	}
	__Node  PreBinFlow_S_1202 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "901";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_post_1203 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "902";
		__Exec =  F_FUNC_Vmin_GROS_166p66_post;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_7_1204 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "903";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_7;
	}
	__Node  PreBinFlow_S_1205 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "904";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_5_1206 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "905";
		__Exec =  F_FUNC_Vmin_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_8_1207 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "906";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_8;
	}
	__Node  PreBinFlow_S_1208 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "907";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_6_1209 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "908";
		__Exec =  F_FUNC_Vmin_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  FuncVminPost_9_1210 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "909";
		__Calibration = Bllizar_Calibration;
		__Exec =  FuncVminPost_9;
	}
	__Node  PreBinFlow_S_1211 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "910";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_8_1212 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "911";
		__Exec =  F_FUNC_Vmin_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1213 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "912";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FuncVminPost_1183;
	__PortConnections {
	 FuncVminPost_1183 __Port[0] =  FuncVminPost_1_1186;//To Port = 3;
	 FuncVminPost_1183 __Port[1] =  PreBinFlow_S_1184;//To Port = 1;
	 PreBinFlow_S_1184 __Port[0] =  F_FUNC_Vmin_3_1185;//To Port = 2;
	 F_FUNC_Vmin_3_1185 __Port[0] =  FuncVminPost_1_1186;//To Port = 3;
	 FuncVminPost_1_1186 __Port[0] =  FuncVminPost_2_1189;//To Port = 6;
	 FuncVminPost_1_1186 __Port[1] =  PreBinFlow_S_1187;//To Port = 4;
	 PreBinFlow_S_1187 __Port[0] =  F_FUNC_Vmin_GROS_100_post_1188;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_1188 __Port[0] =  FuncVminPost_2_1189;//To Port = 6;
	 FuncVminPost_2_1189 __Port[0] =  FuncVminPost_3_1192;//To Port = 9;
	 FuncVminPost_2_1189 __Port[1] =  PreBinFlow_S_1190;//To Port = 7;
	 PreBinFlow_S_1190 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_1191;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_1191 __Port[0] =  FuncVminPost_3_1192;//To Port = 9;
	 FuncVminPost_3_1192 __Port[0] =  FuncVminPost_4_1195;//To Port = 12;
	 FuncVminPost_3_1192 __Port[1] =  PreBinFlow_S_1193;//To Port = 10;
	 PreBinFlow_S_1193 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_1194;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_1194 __Port[0] =  FuncVminPost_4_1195;//To Port = 12;
	 FuncVminPost_4_1195 __Port[0] =  FuncVminPost_5_1198;//To Port = 15;
	 FuncVminPost_4_1195 __Port[1] =  PreBinFlow_S_1196;//To Port = 13;
	 PreBinFlow_S_1196 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_1197;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_1197 __Port[0] =  FuncVminPost_5_1198;//To Port = 15;
	 FuncVminPost_5_1198 __Port[0] =  FuncVminPost_6_1201;//To Port = 18;
	 FuncVminPost_5_1198 __Port[1] =  PreBinFlow_S_1199;//To Port = 16;
	 PreBinFlow_S_1199 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_1200;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_1200 __Port[0] =  FuncVminPost_6_1201;//To Port = 18;
	 FuncVminPost_6_1201 __Port[0] =  FuncVminPost_7_1204;//To Port = 21;
	 FuncVminPost_6_1201 __Port[1] =  PreBinFlow_S_1202;//To Port = 19;
	 PreBinFlow_S_1202 __Port[0] =  F_FUNC_Vmin_GROS_166p66_post_1203;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_post_1203 __Port[0] =  FuncVminPost_7_1204;//To Port = 21;
	 FuncVminPost_7_1204 __Port[0] =  FuncVminPost_8_1207;//To Port = 24;
	 FuncVminPost_7_1204 __Port[1] =  PreBinFlow_S_1205;//To Port = 22;
	 PreBinFlow_S_1205 __Port[0] =  F_FUNC_Vmin_5_1206;//To Port = 23;
	 F_FUNC_Vmin_5_1206 __Port[0] =  FuncVminPost_8_1207;//To Port = 24;
	 FuncVminPost_8_1207 __Port[0] =  FuncVminPost_9_1210;//To Port = 27;
	 FuncVminPost_8_1207 __Port[1] =  PreBinFlow_S_1208;//To Port = 25;
	 PreBinFlow_S_1208 __Port[0] =  F_FUNC_Vmin_6_1209;//To Port = 26;
	 F_FUNC_Vmin_6_1209 __Port[0] =  FuncVminPost_9_1210;//To Port = 27;
	 FuncVminPost_9_1210 __Port[0] = FlowNode_1213;//To Port = 30;
	 FuncVminPost_9_1210 __Port[1] =  PreBinFlow_S_1211;//To Port = 28;
	 PreBinFlow_S_1211 __Port[0] =  F_FUNC_Vmin_8_1212;//To Port = 29;
	 F_FUNC_Vmin_8_1212 __Port[0] = FlowNode_1213;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Func_Vmin_Post_S ***/

/****************************************************************************/
/*** SubFlow Qual_PostStressFunc_S                                        ***/
/****************************************************************************/
__SubFlow Qual_PostStressFunc_S {
	__Node  Qual_Func_Vmax_Post_S_1214 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "913";
		__Exec =  Qual_Func_Vmax_Post_S;
	}
	__Node  Qual_Func_Vmin_Post_S_1215 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "914";
		__Exec =  Qual_Func_Vmin_Post_S;
	}
	__Node FlowNode_1216 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "915";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_Func_Vmax_Post_S_1214;
	__PortConnections {
	 Qual_Func_Vmax_Post_S_1214 __Port[0] =  Qual_Func_Vmin_Post_S_1215;//To Port = 1;
	 Qual_Func_Vmin_Post_S_1215 __Port[0] = FlowNode_1216;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_PostStressFunc_S ***/

/****************************************************************************/
/*** SubFlow Qual_SrchVdd_Post_S                                          ***/
/****************************************************************************/
__SubFlow Qual_SrchVdd_Post_S {
	__Node  VminSearchPost_1217 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "916";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost;
	}
	__Node  PreBinFlow_S_1218 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "917";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_4_1219 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "918";
		__Exec =  F_FUNC_Vmin_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_1_1220 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "919";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_1;
	}
	__Node  PreBinFlow_S_1221 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "920";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_post_5_1222 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "921";
		__Exec =  F_FUNC_Vmin_GROS_100_post_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_2_1223 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_15"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "922";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_2;
	}
	__Node  PreBinFlow_S_1224 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "923";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_1_post_6_1225 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "924";
		__Exec =  F_FUNC_Vmin_GROS_100_1_post_6;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_3_1226 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_16"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "925";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_3;
	}
	__Node  PreBinFlow_S_1227 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "926";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_2_post_7_1228 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "927";
		__Exec =  F_FUNC_Vmin_GROS_100_2_post_7;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_4_1229 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "928";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_4;
	}
	__Node  PreBinFlow_S_1230 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "929";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_3_post_8_1231 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "930";
		__Exec =  F_FUNC_Vmin_GROS_100_3_post_8;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_5_1232 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_18"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "931";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_5;
	}
	__Node  PreBinFlow_S_1233 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "932";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_100_4_post_9_1234 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "933";
		__Exec =  F_FUNC_Vmin_GROS_100_4_post_9;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_6_1235 {
		__XCoord = (950,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_9"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "934";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_6;
	}
	__Node  PreBinFlow_S_1236 {
		__XCoord = (950,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "935";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_GROS_166p66_1237 {
		__XCoord = (950,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "936";
		__Exec =  F_FUNC_Vmin_GROS_166p66;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_7_1238 {
		__XCoord = (1100,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "937";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_7;
	}
	__Node  PreBinFlow_S_1239 {
		__XCoord = (1100,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "938";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_12_1240 {
		__XCoord = (1100,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "939";
		__Exec =  F_FUNC_Vmin_12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_8_1241 {
		__XCoord = (1250,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "940";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_8;
	}
	__Node  PreBinFlow_S_1242 {
		__XCoord = (1250,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "941";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_14_1243 {
		__XCoord = (1250,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "942";
		__Exec =  F_FUNC_Vmin_14;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VminSearchPost_9_1244 {
		__XCoord = (1400,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "943";
		__Calibration = Bllizar_Calibration;
		__Exec =  VminSearchPost_9;
	}
	__Node  PreBinFlow_S_1245 {
		__XCoord = (1400,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "944";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_Vmin_16_1246 {
		__XCoord = (1400,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "945";
		__Exec =  F_FUNC_Vmin_16;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1247 {
		__XCoord = (1550,150);
		__InputPosition = 270;
		__TestID = "946";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  VminSearchPost_1217;
	__PortConnections {
	 VminSearchPost_1217 __Port[0] =  VminSearchPost_1_1220;//To Port = 3;
	 VminSearchPost_1217 __Port[1] =  PreBinFlow_S_1218;//To Port = 1;
	 PreBinFlow_S_1218 __Port[0] =  F_FUNC_Vmin_4_1219;//To Port = 2;
	 F_FUNC_Vmin_4_1219 __Port[0] =  VminSearchPost_1_1220;//To Port = 3;
	 VminSearchPost_1_1220 __Port[0] =  VminSearchPost_2_1223;//To Port = 6;
	 VminSearchPost_1_1220 __Port[1] =  PreBinFlow_S_1221;//To Port = 4;
	 PreBinFlow_S_1221 __Port[0] =  F_FUNC_Vmin_GROS_100_post_5_1222;//To Port = 5;
	 F_FUNC_Vmin_GROS_100_post_5_1222 __Port[0] =  VminSearchPost_2_1223;//To Port = 6;
	 VminSearchPost_2_1223 __Port[0] =  VminSearchPost_3_1226;//To Port = 9;
	 VminSearchPost_2_1223 __Port[1] =  PreBinFlow_S_1224;//To Port = 7;
	 PreBinFlow_S_1224 __Port[0] =  F_FUNC_Vmin_GROS_100_1_post_6_1225;//To Port = 8;
	 F_FUNC_Vmin_GROS_100_1_post_6_1225 __Port[0] =  VminSearchPost_3_1226;//To Port = 9;
	 VminSearchPost_3_1226 __Port[0] =  VminSearchPost_4_1229;//To Port = 12;
	 VminSearchPost_3_1226 __Port[1] =  PreBinFlow_S_1227;//To Port = 10;
	 PreBinFlow_S_1227 __Port[0] =  F_FUNC_Vmin_GROS_100_2_post_7_1228;//To Port = 11;
	 F_FUNC_Vmin_GROS_100_2_post_7_1228 __Port[0] =  VminSearchPost_4_1229;//To Port = 12;
	 VminSearchPost_4_1229 __Port[0] =  VminSearchPost_5_1232;//To Port = 15;
	 VminSearchPost_4_1229 __Port[1] =  PreBinFlow_S_1230;//To Port = 13;
	 PreBinFlow_S_1230 __Port[0] =  F_FUNC_Vmin_GROS_100_3_post_8_1231;//To Port = 14;
	 F_FUNC_Vmin_GROS_100_3_post_8_1231 __Port[0] =  VminSearchPost_5_1232;//To Port = 15;
	 VminSearchPost_5_1232 __Port[0] =  VminSearchPost_6_1235;//To Port = 18;
	 VminSearchPost_5_1232 __Port[1] =  PreBinFlow_S_1233;//To Port = 16;
	 PreBinFlow_S_1233 __Port[0] =  F_FUNC_Vmin_GROS_100_4_post_9_1234;//To Port = 17;
	 F_FUNC_Vmin_GROS_100_4_post_9_1234 __Port[0] =  VminSearchPost_6_1235;//To Port = 18;
	 VminSearchPost_6_1235 __Port[0] =  VminSearchPost_7_1238;//To Port = 21;
	 VminSearchPost_6_1235 __Port[1] =  PreBinFlow_S_1236;//To Port = 19;
	 PreBinFlow_S_1236 __Port[0] =  F_FUNC_Vmin_GROS_166p66_1237;//To Port = 20;
	 F_FUNC_Vmin_GROS_166p66_1237 __Port[0] =  VminSearchPost_7_1238;//To Port = 21;
	 VminSearchPost_7_1238 __Port[0] =  VminSearchPost_8_1241;//To Port = 24;
	 VminSearchPost_7_1238 __Port[1] =  PreBinFlow_S_1239;//To Port = 22;
	 PreBinFlow_S_1239 __Port[0] =  F_FUNC_Vmin_12_1240;//To Port = 23;
	 F_FUNC_Vmin_12_1240 __Port[0] =  VminSearchPost_8_1241;//To Port = 24;
	 VminSearchPost_8_1241 __Port[0] =  VminSearchPost_9_1244;//To Port = 27;
	 VminSearchPost_8_1241 __Port[1] =  PreBinFlow_S_1242;//To Port = 25;
	 PreBinFlow_S_1242 __Port[0] =  F_FUNC_Vmin_14_1243;//To Port = 26;
	 F_FUNC_Vmin_14_1243 __Port[0] =  VminSearchPost_9_1244;//To Port = 27;
	 VminSearchPost_9_1244 __Port[0] = FlowNode_1247;//To Port = 30;
	 VminSearchPost_9_1244 __Port[1] =  PreBinFlow_S_1245;//To Port = 28;
	 PreBinFlow_S_1245 __Port[0] =  F_FUNC_Vmin_16_1246;//To Port = 29;
	 F_FUNC_Vmin_16_1246 __Port[0] = FlowNode_1247;//To Port = 30;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,1550,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_SrchVdd_Post_S ***/

/****************************************************************************/
/*** SubFlow Qual_PostStressSrch_S                                        ***/
/****************************************************************************/
__SubFlow Qual_PostStressSrch_S {
	__Node  Qual_SrchVdd_Post_S_1248 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "947";
		__Exec =  Qual_SrchVdd_Post_S;
	}
	__Node FlowNode_1249 {
		__XCoord = (200,50);
		__InputPosition = 270;
		__TestID = "948";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_SrchVdd_Post_S_1248;
	__PortConnections {
	 Qual_SrchVdd_Post_S_1248 __Port[0] = FlowNode_1249;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_PostStressSrch_S ***/

/****************************************************************************/
/*** SubFlow Qual_Iddq_VboxLO_Post_S                                      ***/
/****************************************************************************/
__SubFlow Qual_Iddq_VboxLO_Post_S {
	__Node  IddqVboxLOPost_1250 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "949";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost;
	}
	__Node  PreBinFlow_S_1251 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "950";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_1252 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "951";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVboxLOPost_1_1253 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vboxlo"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "952";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVboxLOPost_1;
	}
	__Node  PreBinFlow_S_1254 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "953";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_1255 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "954";
		__Exec =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1256 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "955";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVboxLOPost_1250;
	__PortConnections {
	 IddqVboxLOPost_1250 __Port[0] =  IddqVboxLOPost_1_1253;//To Port = 3;
	 IddqVboxLOPost_1250 __Port[1] =  PreBinFlow_S_1251;//To Port = 1;
	 PreBinFlow_S_1251 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1252;//To Port = 2;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_1252 __Port[0] =  IddqVboxLOPost_1_1253;//To Port = 3;
	 IddqVboxLOPost_1_1253 __Port[0] = FlowNode_1256;//To Port = 6;
	 IddqVboxLOPost_1_1253 __Port[1] =  PreBinFlow_S_1254;//To Port = 4;
	 PreBinFlow_S_1254 __Port[0] =  F_LEAK_IDDQ_Vboxlo_post_VDDS_1_1255;//To Port = 5;
	 F_LEAK_IDDQ_Vboxlo_post_VDDS_1_1255 __Port[0] = FlowNode_1256;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Iddq_VboxLO_Post_S ***/

/****************************************************************************/
/*** SubFlow Qual_Iddq_Vmax_Post_S                                        ***/
/****************************************************************************/
__SubFlow Qual_Iddq_Vmax_Post_S {
	__Node  IddqVmax_1257 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "956";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax;
	}
	__Node  PreBinFlow_S_1258 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "957";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM12_1259 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "958";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM12;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  IddqVmax_1_1260 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_10"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "959";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqVmax_1;
	}
	__Node  PreBinFlow_S_1261 {
		__XCoord = (200,425);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "960";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Vmax_VDDS_PM411_1262 {
		__XCoord = (200,555);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "961";
		__Exec =  F_LEAK_IDDQ_Vmax_VDDS_PM411;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1263 {
		__XCoord = (350,250);
		__InputPosition = 270;
		__TestID = "962";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqVmax_1257;
	__PortConnections {
	 IddqVmax_1257 __Port[0] =  IddqVmax_1_1260;//To Port = 3;
	 IddqVmax_1257 __Port[1] =  PreBinFlow_S_1258;//To Port = 1;
	 PreBinFlow_S_1258 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM12_1259;//To Port = 2;
	 F_LEAK_IDDQ_Vmax_VDDS_PM12_1259 __Port[0] =  IddqVmax_1_1260;//To Port = 3;
	 IddqVmax_1_1260 __Port[0] = FlowNode_1263;//To Port = 6;
	 IddqVmax_1_1260 __Port[1] =  PreBinFlow_S_1261;//To Port = 4;
	 PreBinFlow_S_1261 __Port[0] =  F_LEAK_IDDQ_Vmax_VDDS_PM411_1262;//To Port = 5;
	 F_LEAK_IDDQ_Vmax_VDDS_PM411_1262 __Port[0] = FlowNode_1263;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Iddq_Vmax_Post_S ***/

/****************************************************************************/
/*** SubFlow Qual_Iddq_Delta_S                                            ***/
/****************************************************************************/
__SubFlow Qual_Iddq_Delta_S {
	__Node  IddqDelta_1264 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "963";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDelta;
	}
	__Node  PreBinFlow_S_1265 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "964";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Delta_1266 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "965";
		__Exec =  F_LEAK_IDDQ_Delta;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1267 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "966";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDelta_1264;
	__PortConnections {
	 IddqDelta_1264 __Port[0] = FlowNode_1267;//To Port = 3;
	 IddqDelta_1264 __Port[1] =  PreBinFlow_S_1265;//To Port = 1;
	 PreBinFlow_S_1265 __Port[0] =  F_LEAK_IDDQ_Delta_1266;//To Port = 2;
	 F_LEAK_IDDQ_Delta_1266 __Port[0] = FlowNode_1267;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Iddq_Delta_S ***/

/****************************************************************************/
/*** SubFlow Qual_Iddq_Drift_S                                            ***/
/****************************************************************************/
__SubFlow Qual_Iddq_Drift_S {
	__Node  IddqDrift_1268 {
		__XCoord = (50,250);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "967";
		__Calibration = Bllizar_Calibration;
		__Exec =  IddqDrift;
	}
	__Node  PreBinFlow_S_1269 {
		__XCoord = (50,455);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "968";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IDDQ_Drift_1270 {
		__XCoord = (50,585);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "969";
		__Exec =  F_LEAK_IDDQ_Drift;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1271 {
		__XCoord = (200,250);
		__InputPosition = 270;
		__TestID = "970";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  IddqDrift_1268;
	__PortConnections {
	 IddqDrift_1268 __Port[0] = FlowNode_1271;//To Port = 3;
	 IddqDrift_1268 __Port[1] =  PreBinFlow_S_1269;//To Port = 1;
	 PreBinFlow_S_1269 __Port[0] =  F_LEAK_IDDQ_Drift_1270;//To Port = 2;
	 F_LEAK_IDDQ_Drift_1270 __Port[0] = FlowNode_1271;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,235,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Iddq_Drift_S ***/

/****************************************************************************/
/*** SubFlow Qual_PostStressIddq_S                                        ***/
/****************************************************************************/
__SubFlow Qual_PostStressIddq_S {
	__Node  Qual_Iddq_VboxLO_Post_S_1272 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "971";
		__Exec =  Qual_Iddq_VboxLO_Post_S;
	}
	__Node  Qual_Iddq_Vmax_Post_S_1273 {
		__XCoord = (200,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "972";
		__Exec =  Qual_Iddq_Vmax_Post_S;
	}
	__Node  Qual_Iddq_Delta_S_1274 {
		__XCoord = (350,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "973";
		__Exec =  Qual_Iddq_Delta_S;
	}
	__Node  Qual_Iddq_Drift_S_1275 {
		__XCoord = (500,250);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "974";
		__Exec =  Qual_Iddq_Drift_S;
	}
	__Node FlowNode_1276 {
		__XCoord = (650,50);
		__InputPosition = 270;
		__TestID = "975";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_Iddq_VboxLO_Post_S_1272;
	__PortConnections {
	 Qual_Iddq_VboxLO_Post_S_1272 __Port[0] = FlowNode_1276;//To Port = 4;
	 Qual_Iddq_Vmax_Post_S_1273 __Port[0] = FlowNode_1276;//To Port = 4;
	 Qual_Iddq_Delta_S_1274 __Port[0] = FlowNode_1276;//To Port = 4;
	 Qual_Iddq_Drift_S_1275 __Port[0] = FlowNode_1276;//To Port = 4;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,650,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_PostStressIddq_S ***/

/****************************************************************************/
/*** SubFlow Qual_AtSpeed_Vmin_S                                          ***/
/****************************************************************************/
__SubFlow Qual_AtSpeed_Vmin_S {
	__Node  AtSpeed_1277 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "976";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_1278 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "977";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_1279 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "978";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_1280 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "979";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_1281 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "980";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_1_1282 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "981";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_1283 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "982";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_1284 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "983";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_2_1285 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "984";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_1286 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "985";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_1287 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "986";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_3_1288 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "987";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_1289 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "988";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_1290 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "989";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_4_1291 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "990";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_1292 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "991";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_1293 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "992";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmin_SCAN_AC_50_5_1294 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "993";
		__Exec =  F_FUNC_FAST_Vmin_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1295 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "994";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_1277;
	__PortConnections {
	 AtSpeed_1277 __Port[0] =  AtSpeed_1_1280;//To Port = 3;
	 AtSpeed_1277 __Port[1] =  PreBinFlow_S_1278;//To Port = 1;
	 PreBinFlow_S_1278 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_1279;//To Port = 2;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_1279 __Port[0] =  AtSpeed_1_1280;//To Port = 3;
	 AtSpeed_1_1280 __Port[0] =  AtSpeed_2_1283;//To Port = 6;
	 AtSpeed_1_1280 __Port[1] =  PreBinFlow_S_1281;//To Port = 4;
	 PreBinFlow_S_1281 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_1_1282;//To Port = 5;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_1_1282 __Port[0] =  AtSpeed_2_1283;//To Port = 6;
	 AtSpeed_2_1283 __Port[0] =  AtSpeed_3_1286;//To Port = 9;
	 AtSpeed_2_1283 __Port[1] =  PreBinFlow_S_1284;//To Port = 7;
	 PreBinFlow_S_1284 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_2_1285;//To Port = 8;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_2_1285 __Port[0] =  AtSpeed_3_1286;//To Port = 9;
	 AtSpeed_3_1286 __Port[0] =  AtSpeed_4_1289;//To Port = 12;
	 AtSpeed_3_1286 __Port[1] =  PreBinFlow_S_1287;//To Port = 10;
	 PreBinFlow_S_1287 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_3_1288;//To Port = 11;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_3_1288 __Port[0] =  AtSpeed_4_1289;//To Port = 12;
	 AtSpeed_4_1289 __Port[0] =  AtSpeed_5_1292;//To Port = 15;
	 AtSpeed_4_1289 __Port[1] =  PreBinFlow_S_1290;//To Port = 13;
	 PreBinFlow_S_1290 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_4_1291;//To Port = 14;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_4_1291 __Port[0] =  AtSpeed_5_1292;//To Port = 15;
	 AtSpeed_5_1292 __Port[0] = FlowNode_1295;//To Port = 18;
	 AtSpeed_5_1292 __Port[1] =  PreBinFlow_S_1293;//To Port = 16;
	 PreBinFlow_S_1293 __Port[0] =  F_FUNC_FAST_Vmin_SCAN_AC_50_5_1294;//To Port = 17;
	 F_FUNC_FAST_Vmin_SCAN_AC_50_5_1294 __Port[0] = FlowNode_1295;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_AtSpeed_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Qual_AtSpeed_Vmax_S                                          ***/
/****************************************************************************/
__SubFlow Qual_AtSpeed_Vmax_S {
	__Node  AtSpeed_1296 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "995";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed;
	}
	__Node  PreBinFlow_S_1297 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "996";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_1298 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "997";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_1_1299 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_2"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "998";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_1;
	}
	__Node  PreBinFlow_S_1300 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "999";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_1_1301 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1000";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_1;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_2_1302 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_3"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1001";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_2;
	}
	__Node  PreBinFlow_S_1303 {
		__XCoord = (350,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1002";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_2_1304 {
		__XCoord = (350,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1003";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_2;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_3_1305 {
		__XCoord = (500,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_4"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1004";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_3;
	}
	__Node  PreBinFlow_S_1306 {
		__XCoord = (500,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1005";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_3_1307 {
		__XCoord = (500,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1006";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_3;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_4_1308 {
		__XCoord = (650,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_5"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1007";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_4;
	}
	__Node  PreBinFlow_S_1309 {
		__XCoord = (650,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1008";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_4_1310 {
		__XCoord = (650,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1009";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_4;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  AtSpeed_5_1311 {
		__XCoord = (800,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_6"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1010";
		__Calibration = Bllizar_Calibration;
		__Exec =  AtSpeed_5;
	}
	__Node  PreBinFlow_S_1312 {
		__XCoord = (800,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1011";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_FAST_Vmax_SCAN_AC_50_5_1313 {
		__XCoord = (800,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1012";
		__Exec =  F_FUNC_FAST_Vmax_SCAN_AC_50_5;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1314 {
		__XCoord = (950,150);
		__InputPosition = 270;
		__TestID = "1013";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  AtSpeed_1296;
	__PortConnections {
	 AtSpeed_1296 __Port[0] =  AtSpeed_1_1299;//To Port = 3;
	 AtSpeed_1296 __Port[1] =  PreBinFlow_S_1297;//To Port = 1;
	 PreBinFlow_S_1297 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_1298;//To Port = 2;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_1298 __Port[0] =  AtSpeed_1_1299;//To Port = 3;
	 AtSpeed_1_1299 __Port[0] =  AtSpeed_2_1302;//To Port = 6;
	 AtSpeed_1_1299 __Port[1] =  PreBinFlow_S_1300;//To Port = 4;
	 PreBinFlow_S_1300 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_1_1301;//To Port = 5;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_1_1301 __Port[0] =  AtSpeed_2_1302;//To Port = 6;
	 AtSpeed_2_1302 __Port[0] =  AtSpeed_3_1305;//To Port = 9;
	 AtSpeed_2_1302 __Port[1] =  PreBinFlow_S_1303;//To Port = 7;
	 PreBinFlow_S_1303 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_2_1304;//To Port = 8;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_2_1304 __Port[0] =  AtSpeed_3_1305;//To Port = 9;
	 AtSpeed_3_1305 __Port[0] =  AtSpeed_4_1308;//To Port = 12;
	 AtSpeed_3_1305 __Port[1] =  PreBinFlow_S_1306;//To Port = 10;
	 PreBinFlow_S_1306 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_3_1307;//To Port = 11;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_3_1307 __Port[0] =  AtSpeed_4_1308;//To Port = 12;
	 AtSpeed_4_1308 __Port[0] =  AtSpeed_5_1311;//To Port = 15;
	 AtSpeed_4_1308 __Port[1] =  PreBinFlow_S_1309;//To Port = 13;
	 PreBinFlow_S_1309 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_4_1310;//To Port = 14;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_4_1310 __Port[0] =  AtSpeed_5_1311;//To Port = 15;
	 AtSpeed_5_1311 __Port[0] = FlowNode_1314;//To Port = 18;
	 AtSpeed_5_1311 __Port[1] =  PreBinFlow_S_1312;//To Port = 16;
	 PreBinFlow_S_1312 __Port[0] =  F_FUNC_FAST_Vmax_SCAN_AC_50_5_1313;//To Port = 17;
	 F_FUNC_FAST_Vmax_SCAN_AC_50_5_1313 __Port[0] = FlowNode_1314;//To Port = 18;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,950,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_AtSpeed_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Qual_AtSpeed_S                                               ***/
/****************************************************************************/
__SubFlow Qual_AtSpeed_S {
	__Node  Qual_AtSpeed_Vmin_S_1315 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1014";
		__Exec =  Qual_AtSpeed_Vmin_S;
	}
	__Node  Qual_AtSpeed_Vmax_S_1316 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1015";
		__Exec =  Qual_AtSpeed_Vmax_S;
	}
	__Node FlowNode_1317 {
		__XCoord = (350,50);
		__InputPosition = 270;
		__TestID = "1016";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_AtSpeed_Vmin_S_1315;
	__PortConnections {
	 Qual_AtSpeed_Vmin_S_1315 __Port[0] =  Qual_AtSpeed_Vmax_S_1316;//To Port = 1;
	 Qual_AtSpeed_Vmax_S_1316 __Port[0] = FlowNode_1317;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_AtSpeed_S ***/

/****************************************************************************/
/*** SubFlow Qual_SpecLevels_Vmin_S                                       ***/
/****************************************************************************/
__SubFlow Qual_SpecLevels_Vmin_S {
	__Node  SpecLevels_1318 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1017";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_1319 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1018";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmin_DC_PARA_100_1320 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1019";
		__Exec =  F_FUNC_SPEC_Vmin_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmin_1321 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmin"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1020";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmin;
	}
	__Node  PreBinFlow_S_1322 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1021";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmin_PM86_DC_PM04_1323 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1022";
		__Exec =  F_PARA_VIO_Vmin_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1324 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1023";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_1318;
	__PortConnections {
	 SpecLevels_1318 __Port[0] =  VoutVmin_1321;//To Port = 3;
	 SpecLevels_1318 __Port[1] =  PreBinFlow_S_1319;//To Port = 1;
	 PreBinFlow_S_1319 __Port[0] =  F_FUNC_SPEC_Vmin_DC_PARA_100_1320;//To Port = 2;
	 F_FUNC_SPEC_Vmin_DC_PARA_100_1320 __Port[0] =  VoutVmin_1321;//To Port = 3;
	 VoutVmin_1321 __Port[0] = FlowNode_1324;//To Port = 6;
	 VoutVmin_1321 __Port[1] =  PreBinFlow_S_1322;//To Port = 4;
	 PreBinFlow_S_1322 __Port[0] =  F_PARA_VIO_Vmin_PM86_DC_PM04_1323;//To Port = 5;
	 F_PARA_VIO_Vmin_PM86_DC_PM04_1323 __Port[0] = FlowNode_1324;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_SpecLevels_Vmin_S ***/

/****************************************************************************/
/*** SubFlow Qual_SpecLevels_Vmax_S                                       ***/
/****************************************************************************/
__SubFlow Qual_SpecLevels_Vmax_S {
	__Node  SpecLevels_1325 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1024";
		__Calibration = Bllizar_Calibration;
		__Exec =  SpecLevels;
	}
	__Node  PreBinFlow_S_1326 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1025";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_FUNC_SPEC_Vmax_DC_PARA_100_1327 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1026";
		__Exec =  F_FUNC_SPEC_Vmax_DC_PARA_100;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  VoutVmax_1328 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1027";
		__Calibration = Bllizar_Calibration;
		__Exec =  VoutVmax;
	}
	__Node  PreBinFlow_S_1329 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1028";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_PARA_VIO_Vmax_PM86_DC_PM04_1330 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1029";
		__Exec =  F_PARA_VIO_Vmax_PM86_DC_PM04;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1331 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1030";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SpecLevels_1325;
	__PortConnections {
	 SpecLevels_1325 __Port[0] =  VoutVmax_1328;//To Port = 3;
	 SpecLevels_1325 __Port[1] =  PreBinFlow_S_1326;//To Port = 1;
	 PreBinFlow_S_1326 __Port[0] =  F_FUNC_SPEC_Vmax_DC_PARA_100_1327;//To Port = 2;
	 F_FUNC_SPEC_Vmax_DC_PARA_100_1327 __Port[0] =  VoutVmax_1328;//To Port = 3;
	 VoutVmax_1328 __Port[0] = FlowNode_1331;//To Port = 6;
	 VoutVmax_1328 __Port[1] =  PreBinFlow_S_1329;//To Port = 4;
	 PreBinFlow_S_1329 __Port[0] =  F_PARA_VIO_Vmax_PM86_DC_PM04_1330;//To Port = 5;
	 F_PARA_VIO_Vmax_PM86_DC_PM04_1330 __Port[0] = FlowNode_1331;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_SpecLevels_Vmax_S ***/

/****************************************************************************/
/*** SubFlow Qual_Leakage_S                                               ***/
/****************************************************************************/
__SubFlow Qual_Leakage_S {
	__Node  LeakIIn_1332 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1031";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIIn;
	}
	__Node  PreBinFlow_S_1333 {
		__XCoord = (50,355);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1032";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IIN_Vmax_1334 {
		__XCoord = (50,485);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1033";
		__Exec =  F_LEAK_IIN_Vmax;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node  LeakIO_1335 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.AC_cat_17"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vmax"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1034";
		__Calibration = Bllizar_Calibration;
		__Exec =  LeakIO;
	}
	__Node  PreBinFlow_S_1336 {
		__XCoord = (200,325);
		__Port[0] {
			__PortPosition = 175;
		}
		__InputPosition = 20;
		__TestID = "1035";
		__Exec =  PreBinFlow_S;
	}
	__Node  F_LEAK_IOZ_Vmax_PM85_1337 {
		__XCoord = (200,455);
		__Port[0] {
			__PortPosition = 115;
		}
		__InputPosition = 20;
		__TestID = "1036";
		__Exec =  F_LEAK_IOZ_Vmax_PM85;
		__PortSelect =  "skip( if(ContinueOnFail, 0, 1), FALSE->GlobalNotBinned )";
	}
	__Node FlowNode_1338 {
		__XCoord = (350,150);
		__InputPosition = 270;
		__TestID = "1037";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  LeakIIn_1332;
	__PortConnections {
	 LeakIIn_1332 __Port[0] =  LeakIO_1335;//To Port = 3;
	 LeakIIn_1332 __Port[1] =  PreBinFlow_S_1333;//To Port = 1;
	 PreBinFlow_S_1333 __Port[0] =  F_LEAK_IIN_Vmax_1334;//To Port = 2;
	 F_LEAK_IIN_Vmax_1334 __Port[0] =  LeakIO_1335;//To Port = 3;
	 LeakIO_1335 __Port[0] = FlowNode_1338;//To Port = 6;
	 LeakIO_1335 __Port[1] =  PreBinFlow_S_1336;//To Port = 4;
	 PreBinFlow_S_1336 __Port[0] =  F_LEAK_IOZ_Vmax_PM85_1337;//To Port = 5;
	 F_LEAK_IOZ_Vmax_PM85_1337 __Port[0] = FlowNode_1338;//To Port = 6;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,350,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Leakage_S ***/

/****************************************************************************/
/*** SubFlow Qual_Parametrics_S                                           ***/
/****************************************************************************/
__SubFlow Qual_Parametrics_S {
	__Node  Qual_SpecLevels_Vmin_S_1339 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1038";
		__Exec =  Qual_SpecLevels_Vmin_S;
	}
	__Node  Qual_SpecLevels_Vmax_S_1340 {
		__XCoord = (200,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1039";
		__Exec =  Qual_SpecLevels_Vmax_S;
	}
	__Node  Qual_Leakage_S_1341 {
		__XCoord = (350,150);
		__Port[0] {
			__PortPosition = 55;
		}
		__InputPosition = 290;
		__TestID = "1040";
		__Exec =  Qual_Leakage_S;
	}
	__Node FlowNode_1342 {
		__XCoord = (500,50);
		__InputPosition = 270;
		__TestID = "1041";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Qual_SpecLevels_Vmin_S_1339;
	__PortConnections {
	 Qual_SpecLevels_Vmin_S_1339 __Port[0] =  Qual_SpecLevels_Vmax_S_1340;//To Port = 1;
	 Qual_SpecLevels_Vmax_S_1340 __Port[0] =  Qual_Leakage_S_1341;//To Port = 2;
	 Qual_Leakage_S_1341 __Port[0] = FlowNode_1342;//To Port = 3;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,500,35,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_Parametrics_S ***/

/****************************************************************************/
/*** SubFlow Qual_SupplyShort_S                                           ***/
/****************************************************************************/
__SubFlow Qual_SupplyShort_S {
	__Node  SupplyShorts2_1343 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1042";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyShorts2;
	}
	__Node  F_OS_SHRT_VDD_1344 {
		__XCoord = (50,355);
		__InputPosition = 20;
		__TestID = "1043";
		__Exec =  F_OS_SHRT_VDD;
	}
	__Node FlowNode_1345 {
		__XCoord = (200,150);
		__InputPosition = 270;
		__TestID = "1044";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SupplyShorts2_1343;
	__PortConnections {
	 SupplyShorts2_1343 __Port[0] = FlowNode_1345;//To Port = 2;
	 SupplyShorts2_1343 __Port[1] =  F_OS_SHRT_VDD_1344;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,200,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
/*** END SubFlow Qual_SupplyShort_S ***/

/****************************************************************************/
/*** SubFlow Qual_CRES_S                                                  ***/
/****************************************************************************/
__SubFlow Qual_CRES_S {
	__Node FlowNode_1346 {
		__XCoord = (0,50);
		__Port[0] {
			__PortPosition = 90;
		}
		__Port[1] {
			__PortPosition = 175;
		}
		__InputPosition = 220;
		__TestID = "1045";
		__PortSelect =  "if ( fmod( TestProgData.CurSiteSerial, 50 ) = 0, 1, 0)";
	}
	__Node  Cres_1347 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "1046";
		__Calibration = Bllizar_Calibration;
		__Exec =  Cres;
	}
	__Node  F_OS_CRES_1348 {
		__XCoord = (-15,295);
		__InputPosition = 20;
		__TestID = "1047";
		__Exec =  F_OS_CRES;
	}
	__Node FlowNode_1349 {
		__XCoord = (255,150);
		__InputPosition = 270;
		__TestID = "1048";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1346;
	__PortConnections {
	FlowNode_1346 __Port[0] = FlowNode_1349;//To Port = 3;
	FlowNode_1346 __Port[1] =  Cres_1347;//To Port = 1;
	 Cres_1347 __Port[0] = FlowNode_1349;//To Port = 3;
	 Cres_1347 __Port[1] =  F_OS_CRES_1348;//To Port = 2;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,255,135,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/acdata.evo                                     */
/* Creation Date  : Tue Jan  3 17:11:53 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***********************************************************************/
/***                                                                 ***/
/***  The file acdata.evo is the location in which all AC specs      ***/
/***  are stored. This is the only place in a test program in which  ***/
/***  numerical valued AC information should be. All other AC        ***/
/***  expressions should include references to the values in acdata. ***/
/***  resources are to be used, how they are to be used, and the     ***/
/***  connection map of tester resources to device pins              ***/
/***                                                                 ***/
/***  The global declarations for all the AC specification variables ***/
/***  are also located here. This is handy, as adding additional     ***/
/***  specs can be done without having to update a separate global   ***/
/***  declarations file.                                             ***/
/***                                                                 ***/
/***  The global declararation also types the variable, so that      ***/
/***  enVision can check for correct assignments (seconds, Volts,    ***/
/***  Amps, and so on).                                              ***/
/***                                                                 ***/
/***  Final comment related to specs is that no value should be      ***/
/***  entered more than once. The "Inherit" capability allows a      ***/
/***  "common" Category to be built, which can then be referenced    ***/
/**   by other Categories                                            ***/
/***                                                                 ***/
/***********************************************************************/

    /***********************************************************/
    /***     Declare global variables with type info         ***/
    /***********************************************************/
    /***                                                     ***/
    /***  This section declares the Globally available       ***/
    /***  AC specifications that will be used in the program.***/
    /***  Type      = Type of value (SCALAR, V, A, s, etc)   ***/
    /***                                                     ***/
    /***********************************************************/

__Spec ACSpecs {
    __Category CommonACdata {
        ACTableIndex = "0";
        twMCC_F = "'0'";
        tfreq.Min = "1/tper.Max";
        tfreq.Typ = "1/tper.Max";
        tfreq.Max = "1/tper.Min";
        tper.Min = "10ns";
        tper.Typ = "1/tfreq";
        tper.Max = "100ns";
        tfreqAsync.Min = "1/tperAsync.Max";
        tfreqAsync.Typ = "1/tperAsync.Max";
        tfreqAsync.Max = "1/tperAsync.Min";
        tperAsync.Min = "10ns";
        tperAsync.Typ = "1/tfreqAsync";
        tperAsync.Max = "100ns";
        tH = "tper/2";
        tQ = "tper/4";
        t_8th = "tper/8";
        tref = "0ps";
        dtcf = "TIdtcf";
        ctcf = "TIctcf";
        charID_tper = "'A'";
        charEn_tper = "FALSE";
        charStep_tper = "1ns";
        charID_tperAsync = "'B'";
        charEn_tperAsync = "FALSE";
        charStep_tperAsync = "1ns";
        charID_tfreq = "'C'";
        charEn_tfreq = "FALSE";
        charStep_tfreq = "1MHz";
        charID_tfreqAsync = "'D'";
        charEn_tfreqAsync = "FALSE";
        charStep_tfreqAsync = "1MHz";
    }
    __Category AC_cat_1 {
        __Inherit CommonACdata;
        ACTableIndex = "1";
        twMCC_F = "'1'";
        tper.Min = "10ns";
        tper.Max = "50ns";
        charEn_tper = "TRUE";
    }
    __Category AC_cat_10 {
        __Inherit CommonACdata;
        ACTableIndex = "2";
        twMCC_F = "'2'";
        tper.Min = "10ns";
        tper.Max = "33ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "33.3333333333333ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_11 {
        __Inherit CommonACdata;
        ACTableIndex = "3";
        twMCC_F = "'3'";
        tper.Min = "10ns";
        tper.Max = "33ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "12.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_11_3tper {
        __Inherit CommonACdata;
        ACTableIndex = "4";
        twMCC_F = "'4'";
        tper.Min = "10ns";
        tper.Max = "99ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "37.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_12 {
        __Inherit CommonACdata;
        ACTableIndex = "5";
        twMCC_F = "'5'";
        tper.Min = "10ns";
        tper.Max = "33ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "25ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_12_3tper {
        __Inherit CommonACdata;
        ACTableIndex = "6";
        twMCC_F = "'6'";
        tper.Min = "10ns";
        tper.Max = "99ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "75ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_13 {
        __Inherit CommonACdata;
        ACTableIndex = "7";
        twMCC_F = "'7'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max*16";
        tperAsync.Min = "10ns";
        tperAsync.Max = "12.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_14 {
        __Inherit CommonACdata;
        ACTableIndex = "8";
        twMCC_F = "'8'";
        tper.Min = "10ns";
        tper.Max = "33ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "38.4615384615385ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_14_3tper {
        __Inherit CommonACdata;
        ACTableIndex = "9";
        twMCC_F = "'9'";
        tper.Min = "10ns";
        tper.Max = "99ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "115.384615384615ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_15 {
        __Inherit CommonACdata;
        ACTableIndex = "10";
        twMCC_F = "'A'";
        tper.Min = "10ns";
        tper.Max = "100ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "119.217930376729ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_16 {
        __Inherit CommonACdata;
        ACTableIndex = "11";
        twMCC_F = "'B'";
        tper.Min = "10ns";
        tper.Max = "100ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "125ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_17 {
        __Inherit CommonACdata;
        ACTableIndex = "12";
        twMCC_F = "'C'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max*8";
        tperAsync.Min = "10ns";
        tperAsync.Max = "12.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_18 {
        __Inherit CommonACdata;
        ACTableIndex = "13";
        twMCC_F = "'D'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max*5";
        tperAsync.Min = "10ns";
        tperAsync.Max = "20ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_19 {
        __Inherit CommonACdata;
        ACTableIndex = "14";
        twMCC_F = "'E'";
        tper.Min = "10ns";
        tper.Max = "200ns";
        charEn_tper = "TRUE";
    }
    __Category AC_cat_2 {
        __Inherit CommonACdata;
        ACTableIndex = "15";
        twMCC_F = "'F'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max*4";
        tperAsync.Min = "10ns";
        tperAsync.Max = "12.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_3 {
        __Inherit CommonACdata;
        ACTableIndex = "16";
        twMCC_F = "'G'";
        tper.Min = "10ns";
        tper.Max = "50ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "62.5ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_4 {
        __Inherit CommonACdata;
        ACTableIndex = "17";
        twMCC_F = "'H'";
        tper.Min = "10ns";
        tper.Max = "50ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "40ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_5 {
        __Inherit CommonACdata;
        ACTableIndex = "18";
        twMCC_F = "'I'";
        tper.Min = "10ns";
        tper.Max = "50ns";
        tperAsync.Min = "10ns";
        tperAsync.Max = "30.3030303030303ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_6 {
        __Inherit CommonACdata;
        ACTableIndex = "19";
        twMCC_F = "'J'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max*2";
        tperAsync.Min = "10ns";
        tperAsync.Max = "25ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_7 {
        __Inherit CommonACdata;
        ACTableIndex = "20";
        twMCC_F = "'K'";
        tper.Min = "10ns";
        tper.Max = "100ns";
        charEn_tper = "TRUE";
    }
    __Category AC_cat_8 {
        __Inherit CommonACdata;
        ACTableIndex = "21";
        twMCC_F = "'L'";
        tper.Min = "10ns";
        tper.Max = "tperAsync.Max";
        tperAsync.Min = "10ns";
        tperAsync.Max = "100ns";
        charEn_tper = "TRUE";
        charEn_tperAsync = "TRUE";
    }
    __Category AC_cat_9 {
        __Inherit CommonACdata;
        ACTableIndex = "22";
        twMCC_F = "'M'";
        tper.Min = "10ns";
        tper.Max = "166.66ns";
        charEn_tper = "TRUE";
    }
    __ParamGlobals {
            ACTableIndex { __Type = SCALAR; }
            twMCC_F { __Type = STRING; __Comment = "MCC Frequency indicator in testware"; }
            tfreq { __Type = Hz; __Comment = "1\/tper.Max base frequency for test"; }
            tper { __Type = s; __Comment = "1\/tfreq base period in terms of tfreq"; }
            tfreqAsync { __Type = Hz; __Comment = "1\/tperAsync.Max base frequency for test"; }
            tperAsync { __Type = s; __Comment = "1\/tfreqAsync base period in terms of tfreq"; }
            tH { __Type = s; }
            tQ { __Type = s; }
            t_8th { __Type = s; }
            tref { __Type = s; }
            dtcf { __Type = s; }
            ctcf { __Type = s; }
            charID_tper { __Type = STRING; }
            charEn_tper { __Type = BOOLEAN; }
            charStep_tper { __Type = s; }
            charID_tperAsync { __Type = STRING; }
            charEn_tperAsync { __Type = BOOLEAN; }
            charStep_tperAsync { __Type = s; }
            charID_tfreq { __Type = STRING; }
            charEn_tfreq { __Type = BOOLEAN; }
            charStep_tfreq { __Type = Hz; }
            charID_tfreqAsync { __Type = STRING; }
            charEn_tfreqAsync { __Type = BOOLEAN; }
            charStep_tfreqAsync { __Type = Hz; }
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/actable.evo                                    */
/* Creation Date  : Tue Jan  3 17:11:58 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***********************************************************************/
/***                                                                 ***/
/***  The file actable.evo is the location in which waveforms are    ***/
/***  constructed and organized into tables. Each WaveformTable      ***/
/***  defines timings for some pins. It is not required that all     ***/
/***  pins be defined in each WaveformTable (different from the      ***/
/***  Default WaveformTable, in which all pins must be defined).     ***/
/***  This is because WaveformTables can be inherited one from       ***/
/***  another. WaveformTables that are bound to a TimeSet in the     ***/
/***  PatternSequence object MUST have all pins defined.             ***/
/***                                                                 ***/
/***  As a result of this flexibility, there are many good strategies***/
/***  for creating WaveformTables. One is to create a CommonACTable  ***/
/***  which has all the Waveform expressions that do not change from ***/
/***  table to table. Inherit this table in each WaveformTable that  ***/
/***  is to tie to a timing set, then add the non-common Waveforms.  ***/
/***  The second is to completely specify each WaveformTable         ***/
/***  individually. A third is to create WaveformTables that         ***/
/***  completely define the characteristics of each Pin or PinList,  ***/
/***  then use the inherit function to combine all pin Waveforms     ***/
/***  into a WaveformTable to bind to a time set. For the sake of    ***/
/***  minimizing the redundant information in a program, the first   ***/
/***  is preferred. However, from an automation perspective, the     ***/
/***  first is probably most difficult to do.                        ***/
/***                                                                 ***/
/***********************************************************************/

/***********************************************************************/
/*** Jazz uses the following variables in the acSetupTable test plan ***/
/*** table to construct the default waveforms:                       ***/
/***    ZeroOffset      - adjustment applied to ALL waveforms (tref) ***/
/***    SpecValue       - a parameter specification                  ***/
/***    PercentOfPeriod - the TDL OFFSET value multipled by the      ***/
/***                      generic period variable (tper) and divided ***/
/***                      by the TDL PERIOD value of the             ***/
/***                      For example, assume for a given TDL:       ***/
/***                       PERIOD = 100ns, and OFFSET = 50ns         ***/
/***                       The resulting PercentOfPeriod value would ***/
/***                        be 50ns*(tper/100ns)                     ***/
/***    TimingAdjust    - any TADJUST variables defined by the TDL   ***/
/***    TesterCorFactor - drive or strobe timing correction factors  ***/
/***    Guardband       - user defined timing guardband              ***/
/***********************************************************************/

/*******************************************************************************
WFT:WFT1 used in 24 patterns:
	a_iddq	a_st_tk_10_v22	a_st_tk_11_v22
	a_st_tk_12_v22	a_st_tk_13_v22	a_st_tk_14_v22
	a_st_tk_15_v22	a_st_tk_16_v22	a_st_tk_17_v22
	a_st_tk_18_v22	a_st_tk_19_v22	a_st_tk_1_v22
	a_st_tk_20_v22	a_st_tk_21_v22	a_st_tk_2_v22
	a_st_tk_3_v22	a_st_tk_4_v22	a_st_tk_5_v22
	a_st_tk_6_v22	a_st_tk_7_v22	a_st_tk_8_v22
	a_st_tk_9_v22	a_st_tk_fles_1_v22	a_st_tk_fles_2_v22
*******************************************************************************/
__WaveformTable WFT1 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT1_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT1_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT1_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT1_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT1_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT1_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT1_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT1_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT1_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT1_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT1_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT1_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT1_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT10 used in 4 patterns:
	dcpara	dcpara_ioz	dcpara_ioz_pd
	dcpara_ioz_pu
*******************************************************************************/
__WaveformTable WFT10 {
    __Period "tper";
    __Cell "AC2_NR" L/H WFT10_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +1ns*(.Period/100ns)"; __DriveData @ "tref +1ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC6_NR_STB" L/H WFT10_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +1ns*(.Period/100ns)"; __DriveData @ "tref +1ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC6_NR_STB" 0/1/M WFT10_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +17ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC6_NR_STB" Z WFT10_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +17ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT10_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +17ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT10_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +17ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT11 used in 7 patterns:
	dmled_read	dmled_test_number	fl_otp_loader_v21
	fl_sw_dl_a1a3_4	fl_sw_dl_a2_2	fl_sw_dl_dpse
	fl_sw_dl_v30
*******************************************************************************/
__WaveformTable WFT11 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT11_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT11_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT11_RZ1_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" L/C WFT11_RZ2_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT11_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT11_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT11_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT11_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT11_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" 0/1/M WFT11_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" Z WFT11_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT11_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT11_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT11_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT11_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT12 used in 14 patterns:
	FF_CheckROM_Mg0	FF_CheckROM_norm	FF_InitCheck
	FF_LoadFuseData_0001	FF_LoadFuseData_0011	FF_LoadFuseData_1010
	FF_LoadFuseData_1110	FF_Program_Mg1A	FF_Program_Mg1B
	FF_Read_Mg0	FF_Read_Mg1A	FF_Read_Mg1B
	FF_Read_Norm	FF_RunAutoload
*******************************************************************************/
__WaveformTable WFT12 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT12_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC7_NR_STB" L/H WFT12_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC8_NR_STB" L/H WFT12_NR3 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +10ns*(.Period/100ns)"; __DriveData @ "tref +10ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT12_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +40ns*(.Period/100ns)"; __DriveData @ "tref +40ns*(.Period/100ns)"; __DriveLow @ "tref +80ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT12_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT12_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +40ns*(.Period/100ns)"; __DriveData @ "tref +40ns*(.Period/100ns)"; __DriveLow @ "tref +80ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT12_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +40ns*(.Period/100ns)"; __DriveData @ "tref +40ns*(.Period/100ns)"; __DriveLow @ "tref +80ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC7_NR_STB" 0/1/M WFT12_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC7_NR_STB" Z WFT12_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC8_NR_STB" 0/1/M WFT12_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC8_NR_STB" Z WFT12_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT12_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT12_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT12_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT12_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT12_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT12_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT13 used in 1 patterns:
	flash_int_check
*******************************************************************************/
__WaveformTable WFT13 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT13_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC4_NR_STB" L/H WFT13_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC5_NR_STB" L/H WFT13_NR3 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT13_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +83.33ns*(.Period/166.66ns)"; __DriveData @ "tref +83.33ns*(.Period/166.66ns)"; __DriveLow @ "tref +166.66ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT13_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +83.33ns*(.Period/166.66ns)"; __DriveData @ "tref +83.33ns*(.Period/166.66ns)"; __DriveLow @ "tref +166.66ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT13_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +83.33ns*(.Period/166.66ns)"; __DriveData @ "tref +83.33ns*(.Period/166.66ns)"; __DriveLow @ "tref +166.66ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC4_NR_STB" 0/1/M WFT13_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC4_NR_STB" Z WFT13_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC5_NR_STB" 0/1/M WFT13_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC5_NR_STB" Z WFT13_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT13_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT13_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT13_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT13_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT13_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT13_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/166.66ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT14 used in 6 patterns:
	hibosc_obs	iosc_obs	piosc_obs
	switch_cell_can0_pd	switch_cell_can1_pd	switch_cell_usb_pd
*******************************************************************************/
__WaveformTable WFT14 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT14_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC9_NR_STB" L/H WFT14_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT14_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_PA3_49" L/C WFT14_RZ2_PA3_49 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT14_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC9_NR_STB" 0/1/M WFT14_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC9_NR_STB" Z WFT14_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_PA3_49" 0/1/M WFT14_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_PA3_49" Z WFT14_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT14_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT14_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT14_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT14_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT15 used in 31 patterns:
	OTG_ChgdischgVbusM	otg_5vprotection	otg_SidMeasIddH
	otg_SvblhMs_endH	otg_SvblhMs_vldH	otg_SvblhMvbvldH
	phy_FdpdmScv	phy_Loopback_Rxdm	phy_Loopback_Rxdp
	phy_MdHTxHZRxcv	phy_MdHTxH_Rxdm	phy_MdHTxH_Rxdp
	phy_MdHTxLZRxcv	phy_MdHTxL_Rxdm	phy_MdHTxL_Rxdp
	phy_MdLTxHZRxcv	phy_MdLTxH_Rxdm	phy_MdLTxH_Rxdp
	phy_MdLTxLZRxcv	phy_MdLTxL_Rxdm	phy_MdLTxL_Rxdp
	phy_Sdm__Tdm	phy_Sdp__Tdp	phy_SdpdmTcv
	phy_SuHPdHpuLSwLImv	phy_SuHPdLPuHSwHImv	phy_SuHPdLPuHSwLImv
	phy_SuHPdLPuLSwLImv	phy_SuLPdHPuHSwHSpi	phy_SuLPdHPuLSwLSpi
	phy_loopback_Rxcv
*******************************************************************************/
__WaveformTable WFT15 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT15_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC10_NR_STB" L/H WFT15_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC11_NR_STB" L/H WFT15_NR3 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT15_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT15_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT15_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_o_cpu_done_46" L/C WFT15_RZ4_o_cpu_done_46 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC10_NR_STB" 0/1/M WFT15_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +10ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC10_NR_STB" Z WFT15_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +10ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC11_NR_STB" 0/1/M WFT15_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC11_NR_STB" Z WFT15_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT15_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT15_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT15_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT15_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_o_cpu_done_46" 0/1/M WFT15_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_o_cpu_done_46" Z WFT15_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT15_STB6 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT15_STB6_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT16 used in 8 patterns:
	pb_iddq_ret_chkr	pb_iddq_ret_chkr_v23	pb_iddq_ret_invchkr
	pb_iddq_ret_invchkr_v23	pb_iddq_ret_ones	pb_iddq_ret_ones_v23
	pb_iddq_ret_zeroes	pb_iddq_ret_zeroes_v23
*******************************************************************************/
__WaveformTable WFT16 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT16_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT16_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT16_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT16_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT16_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT16_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT16_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT16_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT16_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT16_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT16_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT16_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT16_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT16_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT17 used in 10 patterns:
	pb_pb_down2_1p	pb_pb_dtxn2_1p	pb_pb_flip10_1p
	pb_pb_ftr	pb_pb_mapcol_1p	pb_pb_march13n_1p
	pb_pb_pmos_open_1p_v22	pb_pb_precharge_1p	pb_pb_ptr
	pb_pb_wrenz
*******************************************************************************/
__WaveformTable WFT17 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT17_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT17_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT17_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT17_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT17_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT17_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT17_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT17_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT17_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT17_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT17_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT17_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT17_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT17_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT18 used in 7 patterns:
	pb_pb_down2_2p	pb_pb_dtxn2_2p	pb_pb_flip10_2p
	pb_pb_mapcol_2p	pb_pb_march13n_2p	pb_pb_pmos_open_2p
	pb_pb_precharge_2p
*******************************************************************************/
__WaveformTable WFT18 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT18_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT18_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT18_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT18_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT18_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT18_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT18_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT18_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT18_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT18_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT18_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT18_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT18_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT18_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT19 used in 1 patterns:
	pb_pb_march13n_rep
*******************************************************************************/
__WaveformTable WFT19 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT19_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT19_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT19_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/200ns)"; __DriveData @ "tref +16ns*(.Period/200ns)"; __DriveLow @ "tref +33ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT19_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT19_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/200ns)"; __DriveData @ "tref +16ns*(.Period/200ns)"; __DriveLow @ "tref +33ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT19_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/200ns)"; __DriveData @ "tref +16ns*(.Period/200ns)"; __DriveLow @ "tref +33ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT19_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT19_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT19_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT19_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT19_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT19_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT19_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT19_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/200ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT2 used in 10 patterns:
	a_tft_ntk_80_80_1	a_tft_ntk_80_80_10	a_tft_ntk_80_80_2
	a_tft_ntk_80_80_3	a_tft_ntk_80_80_4	a_tft_ntk_80_80_5
	a_tft_ntk_80_80_6	a_tft_ntk_80_80_7	a_tft_ntk_80_80_8
	a_tft_ntk_80_80_9
*******************************************************************************/
__WaveformTable WFT2 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT2_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC2_NR_STB" L/H WFT2_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC3_NR_STB" L/H WFT2_NR3 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT2_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT2_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT2_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT2_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC2_NR_STB" 0/1/M WFT2_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC2_NR_STB" Z WFT2_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC3_NR_STB" 0/1/M WFT2_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC3_NR_STB" Z WFT2_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT2_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT2_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT2_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT2_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +10ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT2_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT2_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT20 used in 32 patterns:
	pb_vl_down2_1p	pb_vl_down2_1p_v23	pb_vl_down2_2p
	pb_vl_down2_2p_v23	pb_vl_dtxn2_1p	pb_vl_dtxn2_1p_v23
	pb_vl_dtxn2_2p	pb_vl_dtxn2_2p_v23	pb_vl_flip10_1p
	pb_vl_flip10_1p_v23	pb_vl_flip10_2p	pb_vl_flip10_2p_v23
	pb_vl_ftr_read	pb_vl_ftr_read_v23	pb_vl_map_col_1p
	pb_vl_map_col_1p_v23	pb_vl_map_col_2p	pb_vl_map_col_2p_v23
	pb_vl_march13n_1p	pb_vl_march13n_1p_v23	pb_vl_march13n_2p
	pb_vl_march13n_2p_v23	pb_vl_pmos_open_1p	pb_vl_pmos_open_1p_v23
	pb_vl_pmos_open_2p	pb_vl_pmos_open_2p_v23	pb_vl_precharge_1p
	pb_vl_precharge_1p_v23	pb_vl_precharge_2p	pb_vl_precharge_2p_v23
	pb_vl_ptr_read	pb_vl_ptr_read_v23
*******************************************************************************/
__WaveformTable WFT20 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT20_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT20_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT20_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT20_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT20_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT20_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +16ns*(.Period/33ns)"; __DriveData @ "tref +16ns*(.Period/33ns)"; __DriveLow @ "tref +33ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT20_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT20_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT20_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT20_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT20_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT20_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT20_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT20_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +14ns*(.Period/33ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT21 used in 1 patterns:
	piosc_trim
*******************************************************************************/
__WaveformTable WFT21 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT21_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC12_NR_STB" L/H WFT21_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT21_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT21_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT21_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC12_NR_STB" 0/1/M WFT21_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC12_NR_STB" Z WFT21_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT21_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT21_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT21_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT21_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT22 used in 1 patterns:
	sleep
*******************************************************************************/
__WaveformTable WFT22 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT22_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT22_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT22_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT22_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT22_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT22_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT22_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT22_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT22_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT22_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT22_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT22_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT22_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT22_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT23 used in 1 patterns:
	ssi0_loopback_pll_b
*******************************************************************************/
__WaveformTable WFT23 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT23_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT23_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" L/C WFT23_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" </> WFT23_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT23_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT23_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" 0/1/M WFT23_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" Z WFT23_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT23_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT23_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT23_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT23_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT23_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT23_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT23_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT23_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT24 used in 3 patterns:
	ssi1_loopback_pll_b	ssi2_loopback_pll_b	ssi3_loopback_pll_b
*******************************************************************************/
__WaveformTable WFT24 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT24_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT24_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT24_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT24_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT24_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT24_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT24_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT24_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT24_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT24_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT24_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT24_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT24_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT24_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT25 used in 4 patterns:
	syspll_lock	syspll_lock_max	syspll_lock_min
	usbpll_lock
*******************************************************************************/
__WaveformTable WFT25 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT25_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC12_NR_STB" L/H WFT25_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT25_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT25_RZ2_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC12_NR_STB" 0/1/M WFT25_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC12_NR_STB" Z WFT25_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT25_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT25_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT25_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT25_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT26 used in 3 patterns:
	wdtimer0_reset_pll_v23	wdtimer1_reset_pll_v23	wdtimer1_reset_pll_v24
*******************************************************************************/
__WaveformTable WFT26 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT26_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT26_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" L/C WFT26_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" </> WFT26_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT26_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT26_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" 0/1/M WFT26_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_OSC0_124" Z WFT26_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT26_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT26_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT26_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT26_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT26_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT26_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT26_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT26_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT27 used in 1 patterns:
	bi_atpg_a2
*******************************************************************************/
__WaveformTable WFT27 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT27_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT27_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT27_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT27_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT27_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT27_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT27_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT27_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT27_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT27_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT27_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT27_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT27_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +180ns*(.Period/200ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT28 used in 1 patterns:
	bi_atpg7
*******************************************************************************/
__WaveformTable WFT28 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT28_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT28_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT28_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT28_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT28_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/200ns)"; __DriveData @ "tref +50ns*(.Period/200ns)"; __DriveLow @ "tref +150ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT28_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT28_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT28_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT28_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT28_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT28_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT28_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT28_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +50ns*(.Period/200ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}

/*******************************************************************************
WFT:WFT3 used in 2 patterns:
	a_tft_tk_16_16_2	a_tft_tk_16_16_3
*******************************************************************************/
__WaveformTable WFT3 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT3_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT3_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT3_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT3_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT3_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT3_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT3_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT3_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT3_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT3_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT3_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT3_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT3_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT3_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT4 used in 1 patterns:
	a_tft_tk_25_25_1
*******************************************************************************/
__WaveformTable WFT4 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT4_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT4_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT4_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT4_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT4_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT4_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT4_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT4_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT4_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT4_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT4_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT4_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT4_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT4_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT5 used in 2 patterns:
	a_tft_tk_33_33_1	a_tft_tk_33_33_2
*******************************************************************************/
__WaveformTable WFT5 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT5_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT5_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT5_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT5_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT5_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT5_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT5_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT5_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT5_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT5_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT5_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT5_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT5_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT5_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT6 used in 1 patterns:
	a_tft_tk_40_40_1
*******************************************************************************/
__WaveformTable WFT6 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT6_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT6_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT6_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT6_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT6_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT6_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT6_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT6_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT6_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT6_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT6_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT6_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT6_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT6_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT7 used in 46 patterns:
	a_tft_tk_80_80_1	a_tft_tk_80_80_10	a_tft_tk_80_80_11
	a_tft_tk_80_80_12	a_tft_tk_80_80_13	a_tft_tk_80_80_14
	a_tft_tk_80_80_15	a_tft_tk_80_80_16	a_tft_tk_80_80_17
	a_tft_tk_80_80_18	a_tft_tk_80_80_19	a_tft_tk_80_80_2
	a_tft_tk_80_80_20	a_tft_tk_80_80_21	a_tft_tk_80_80_22
	a_tft_tk_80_80_23	a_tft_tk_80_80_24	a_tft_tk_80_80_25
	a_tft_tk_80_80_26	a_tft_tk_80_80_27	a_tft_tk_80_80_28
	a_tft_tk_80_80_29	a_tft_tk_80_80_3	a_tft_tk_80_80_30
	a_tft_tk_80_80_31	a_tft_tk_80_80_32	a_tft_tk_80_80_33
	a_tft_tk_80_80_34	a_tft_tk_80_80_35	a_tft_tk_80_80_36
	a_tft_tk_80_80_37	a_tft_tk_80_80_38	a_tft_tk_80_80_39
	a_tft_tk_80_80_4	a_tft_tk_80_80_40	a_tft_tk_80_80_41
	a_tft_tk_80_80_42	a_tft_tk_80_80_43	a_tft_tk_80_80_44
	a_tft_tk_80_80_45	a_tft_tk_80_80_46	a_tft_tk_80_80_47
	a_tft_tk_80_80_5	a_tft_tk_80_80_6	a_tft_tk_80_80_8
	a_tft_tk_80_80_9
*******************************************************************************/
__WaveformTable WFT7 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT7_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT7_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT7_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" </> WFT7_RZ2_Async_OSC0_124 {
        __Data 6/7;
        __Color 6/7;
        __Drive {
            __EntryState __DriveLow;
            __Waveform { __DriveHigh @ "tperAsync/2"; __DriveLow @ "tperAsync"; __DriveHigh @ "3*tperAsync/2"; __DriveLow @ "2 * tperAsync";
                         __PeriodMarker @ D1 -> "2 * tperAsync"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT7_RZ3_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT7_RZ4_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +9ns*(.Period/50ns)"; __DriveData @ "tref +9ns*(.Period/50ns)"; __DriveLow @ "tref +23ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT7_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT7_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT7_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT7_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT7_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT7_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT7_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT7_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +9ns*(.Period/50ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT8 used in 41 patterns:
	bg_temp_trim	deep_sleep	deep_sleep_ldo_byp
	deep_sleep_ldo_byp_v2	deep_sleep_ldo_en	deep_sleep_ldo_en_v2
	deep_sleep_v23	fancontrol_reg_rdwr	gpt0_1s_32_down
	gpt10_per_32_down	gpt11_per_32_down	gpt1_1s_32_down
	gpt2_1s_32_down	gpt3_1s_32_down	gpt4_1s_32_down
	gpt5_1s_32_down	gpt6_per_32_down	gpt7_per_32_down
	gpt8_per_32_down	gpt9_per_32_down	hibana_hibn
	hibana_hysvreg	hibana_lbc_vbat19	hibana_lbc_vbat21
	hibana_lbc_vbat23	hibana_lbc_vbat25	hibana_vbapiok
	hibernate_rtcGen	hibernate_rtcSec	hibernate_vabort
	hibernate_vbatchk	iref_trim	lpc_reg_access
	pwm_0_int_check	pwm_1_int_check	qei0dirintlpbk
	qei1dirintlpbk	sleep_ldo_byp	sleep_ldo_en
	sysctldsldo_pioscpd	usbphy
*******************************************************************************/
__WaveformTable WFT8 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT8_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_NR_STB" L/H WFT8_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT8_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT8_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT8_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" 0/1/M WFT8_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_NR_STB" Z WFT8_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT8_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT8_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT8_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT8_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT8_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT8_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
    __Cell "ALLPINS" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
    }
    __Cell "ALLPINS" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __DriveOn @ "0ns"; __DriveData @ "0ns"; }
        }
    }
    __Cell "ALLPINS" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
        __Drive {
            __Waveform { __EdgeMarker @ "0ns"; __DriveOff @ "0ns"; }
        }
        __Compare {
            __Waveform { __CompareData @ "0ns"; }
        }
    }
}

/*******************************************************************************
WFT:WFT9 used in 19 patterns:
	ahbm_write_buffer_v23	candmalbtx0rx1_1beat	candmalbtx1rx0_1beat
	eeprom_wdone_int	hib_rtcsec_subsec	hibernate_reg_rw
	i2c0_dma	i2c1_dma	i2c2_dma
	i2c3_dma	i2c4_dma	u0u1_8bit_mode
	u0u2_8bit_mode	u0u3_8bit_mode	u0u4_8bit_mode
	u0u5_8bit_mode	u0u6_8bit_mode	u0u7_8bit_mode
	udma_ping_pong
*******************************************************************************/
__WaveformTable WFT9 {
    __Period "tper";
    __Cell "AC1_NR" L/H WFT9_NR1 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC4_NR_STB" L/H WFT9_NR2 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC5_NR_STB" L/H WFT9_NR3 {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn @ "tref +0ps"; __DriveData @ "tref +0ps"; }
        }
    }
    __Cell "AC1_RZ_OSC0_124" L/C WFT9_RZ1_OSC0_124 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" L/C WFT9_RZ2_AIN10_183 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" L/C WFT9_RZ3_TCK_152 {
        __Data 6/7;
        __Color 3/4;
        __Drive {
            __Waveform { __DriveOn @ "tref +50ns*(.Period/100ns)"; __DriveData @ "tref +50ns*(.Period/100ns)"; __DriveLow @ "tref +100ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC4_NR_STB" 0/1/M WFT9_STB1 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC4_NR_STB" Z WFT9_STB1_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC5_NR_STB" 0/1/M WFT9_STB2 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC5_NR_STB" Z WFT9_STB2_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +95ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" 0/1/M WFT9_STB3 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_AIN10_183" Z WFT9_STB3_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" 0/1/M WFT9_STB4 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_RZ_STB_TCK_152" Z WFT9_STB4_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref +0ps"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" 0/1/M WFT9_STB5 {
        __Data 0/1/2;
        __Color 8/10/3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareData @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "AC1_STB" Z WFT9_STB5_Z {
        __Data 2;
        __Color 3;
        __Drive {
            __Waveform { __DriveOff @ "tref"; }
        }
        __Compare {
            __Waveform { __CompareFloat @ "tref +90ns*(.Period/100ns)"; }
        }
    }
    __Cell "ALLPINS" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __Waveform { }
        }
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/bins.evo                                       */
/* Creation Date  : Tue Jan  3 17:12:02 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***************************/
/*** Softbin Definitions ***/
/***************************/
 __Bin GOOD_UNIT {
    __Number = 1;
    __Result = __True;
    __CheckOverFlow = __True;
    __Color = 0;
}
 __Bin F_OS_OPEN {
    __Number = 7;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_SHRT_PIN {
    __Number = 8;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_SHRT_VDD {
    __Number = 9;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_SHRT_PTPS {
    __Number = 10;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_CRES {
    __Number = 11;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUSE_DIEID_PRE_READ {
    __Number = 12;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_OPEN_ANALOG {
    __Number = 17;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_SHRT_ANALOG {
    __Number = 19;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_OPEN_ANALOG_1 {
    __Number = 21;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_SHRT_ANALOG_2 {
    __Number = 23;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_OS_OPEN_VDD {
    __Number = 25;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin {
    __Number = 27;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_pre {
    __Number = 29;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_1_pre {
    __Number = 31;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_2_pre {
    __Number = 33;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_3_pre {
    __Number = 35;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_4_pre {
    __Number = 37;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_166p66_pre {
    __Number = 39;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_ANALOG_USB_OTG_100 {
    __Number = 41;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_1 {
    __Number = 43;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_ANALOG_USB_CHG_100 {
    __Number = 45;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_2 {
    __Number = 47;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_pre_3 {
    __Number = 49;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_1_pre_4 {
    __Number = 51;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_2_pre_5 {
    __Number = 53;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_3_pre_6 {
    __Number = 55;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_4_pre_7 {
    __Number = 57;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_166p66_pre_8 {
    __Number = 59;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_10 {
    __Number = 61;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_11 {
    __Number = 63;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_13 {
    __Number = 65;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vboxlo {
    __Number = 67;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_BIST_PROD_33_pre {
    __Number = 69;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_BIST_PROD_33_1_pre {
    __Number = 71;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vburnin_BURNIN_200_pre {
    __Number = 73;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom {
    __Number = 75;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_post {
    __Number = 77;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_1_post {
    __Number = 79;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_2_post {
    __Number = 81;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_3_post {
    __Number = 83;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_4_post {
    __Number = 85;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_166p66_post {
    __Number = 87;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_ANALOG_USB_OTG_100 {
    __Number = 89;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_BIST_PROD_33_post {
    __Number = 91;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_BIST_PROD_33_1 {
    __Number = 93;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_2 {
    __Number = 95;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_1 {
    __Number = 97;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_ANALOG_USB_CHG_100 {
    __Number = 99;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax {
    __Number = 101;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_100_post {
    __Number = 103;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_100_1_post {
    __Number = 105;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_100_2_post {
    __Number = 107;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_100_3_post {
    __Number = 109;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_100_4_post {
    __Number = 111;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_GROS_166p66_post {
    __Number = 113;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_ANALOG_USB_OTG_100 {
    __Number = 115;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_BIST_PROD_33_post {
    __Number = 117;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_BIST_PROD_33_1 {
    __Number = 119;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_1 {
    __Number = 121;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmax_ANALOG_USB_CHG_100 {
    __Number = 123;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_4 {
    __Number = 125;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_post_5 {
    __Number = 127;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_post_3 {
    __Number = 129;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_1_post_6 {
    __Number = 131;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_1_post_4 {
    __Number = 133;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_2_post_7 {
    __Number = 135;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_2_post_5 {
    __Number = 137;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_3_post_8 {
    __Number = 139;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_3_post_6 {
    __Number = 141;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_4_post_9 {
    __Number = 143;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_100_4_post_7 {
    __Number = 145;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_166p66 {
    __Number = 147;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_GROS_166p66_post_8 {
    __Number = 149;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_14 {
    __Number = 151;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_10 {
    __Number = 153;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_BIST_PROD_33 {
    __Number = 155;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_BIST_PROD_33_1_16 {
    __Number = 157;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_BIST_PROD_33_1_12 {
    __Number = 159;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_18 {
    __Number = 161;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_13 {
    __Number = 163;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_22 {
    __Number = 165;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vnom_15 {
    __Number = 167;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_3 {
    __Number = 169;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_post {
    __Number = 171;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_1_post {
    __Number = 173;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_2_post {
    __Number = 175;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_3_post {
    __Number = 177;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_4_post {
    __Number = 179;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_166p66_post {
    __Number = 181;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_5 {
    __Number = 183;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_4 {
    __Number = 185;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_6 {
    __Number = 187;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_8 {
    __Number = 189;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_7 {
    __Number = 191;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_post_5 {
    __Number = 193;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_post_4 {
    __Number = 195;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_1_post_6 {
    __Number = 197;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_1_post_5 {
    __Number = 199;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_2_post_7 {
    __Number = 201;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_2_post_6 {
    __Number = 203;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_3_post_8 {
    __Number = 205;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_3_post_7 {
    __Number = 207;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_4_post_9 {
    __Number = 209;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_100_4_post_8 {
    __Number = 211;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_166p66 {
    __Number = 213;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_GROS_166p66_post_9 {
    __Number = 215;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_12 {
    __Number = 217;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_14 {
    __Number = 219;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_15 {
    __Number = 221;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_16 {
    __Number = 223;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_18 {
    __Number = 225;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUSE_ROM_READ {
    __Number = 227;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_REPAIR_ESDA {
    __Number = 228;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_REPAIR_NONREPAIR {
    __Number = 229;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_REPAIR_REDUNDANCY {
    __Number = 230;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUSE_MEM_UNREPAIRABLE {
    __Number = 231;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUSE_DIEID_PROG {
    __Number = 232;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS {
    __Number = 234;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS_1 {
    __Number = 236;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS {
    __Number = 238;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS_1 {
    __Number = 240;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM12 {
    __Number = 242;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM411 {
    __Number = 244;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vmax_VDDS_PM12 {
    __Number = 246;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Vmax_VDDS_PM411 {
    __Number = 248;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Delta {
    __Number = 249;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IDDQ_Drift {
    __Number = 251;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50 {
    __Number = 253;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_1 {
    __Number = 255;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_2 {
    __Number = 257;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_3 {
    __Number = 259;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_4 {
    __Number = 261;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_5 {
    __Number = 263;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50 {
    __Number = 265;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_1 {
    __Number = 267;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_2 {
    __Number = 269;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_3 {
    __Number = 271;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_4 {
    __Number = 273;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_5 {
    __Number = 275;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_SPEC_Vmin_DC_PARA_100 {
    __Number = 277;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_SPEC_Vmax_DC_PARA_100 {
    __Number = 279;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_PARA_VIO_Vmin_PM86_DC_PM04 {
    __Number = 281;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_PARA_VIO_Vmax_PM86_DC_PM04 {
    __Number = 283;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IIN_Vmax {
    __Number = 285;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_LEAK_IOZ_Vmax_PM85 {
    __Number = 287;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_BIST_PROD_33_post {
    __Number = 290;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_BIST_PROD_33_1 {
    __Number = 291;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_17 {
    __Number = 292;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_FUNC_Vmin_20 {
    __Number = 293;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_TERMFAULT {
    __Number = 294;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}
 __Bin F_NOSORT {
    __Number = 295;
    __Result = __False;
    __CheckOverFlow = __True;
    __Color = 2;
}

/**************************************************/
/*** Hardbin Definitions used in BoardChk flow ***/
/**************************************************/
__BinMap ATSite_BinMap_BoardChk {
    __Bin GOOD_UNIT = 1;
    __Bin F_TERMFAULT = 9;
    __Bin F_NOSORT = 9;
}

/**************************************************/
/*** Hardbin Definitions used in DPSE flow ***/
/**************************************************/
__BinMap ATSite_BinMap_DPSE {
    __Bin GOOD_UNIT = 1;
    __Bin F_OS_OPEN = 8;
    __Bin F_OS_CRES = 8;
    __Bin F_OS_OPEN_ANALOG = 8;
    __Bin F_OS_OPEN_ANALOG_1 = 8;
    __Bin F_OS_SHRT_ANALOG = 8;
    __Bin F_OS_OPEN_VDD = 8;
    __Bin F_OS_SHRT_ANALOG_2 = 8;
    __Bin F_OS_SHRT_VDD = 8;
    __Bin F_OS_SHRT_PIN = 8;
    __Bin F_OS_SHRT_PTPS = 8;
    __Bin F_TERMFAULT = 9;
    __Bin F_NOSORT = 9;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_15 = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmax_GROS_100_2_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_6 = 10;
    __Bin F_FUNC_Vmin_18 = 10;
    __Bin F_FUNC_Vnom_1 = 10;
    __Bin F_FUNC_Vmin_11 = 10;
    __Bin F_FUNC_Vmax_1 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vboxlo = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre = 10;
    __Bin F_FUNC_Vmin_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmin_8 = 10;
    __Bin F_FUNC_Vmin_3 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_pre = 10;
    __Bin F_FUNC_Vmax = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre = 10;
    __Bin F_FUNC_Vmin_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_14 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66 = 10;
    __Bin F_FUNC_Vmin_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre_3 = 10;
    __Bin F_FUNC_Vmax_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vnom_15 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_3 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_Vmax_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_7 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vnom = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_Vnom_22 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre = 10;
    __Bin F_FUNC_Vmin_1 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_12 = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vmin = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_4 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post_9 = 10;
    __Bin F_FUNC_Vnom_2 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_16 = 10;
    __Bin F_FUNC_Vnom_4 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vmax_GROS_100_3_post = 10;
    __Bin F_FUNC_Vnom_14 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vburnin_BURNIN_200_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_16 = 10;
    __Bin F_FUNC_Vnom_10 = 10;
    __Bin F_FUNC_SPEC_Vmin_DC_PARA_100 = 10;
    __Bin F_FUNC_Vnom_18 = 10;
    __Bin F_FUNC_Vmin_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_7 = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post = 10;
    __Bin F_FUNC_Vnom_13 = 10;
    __Bin F_FUNC_Vmax_GROS_100_1_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre_5 = 10;
    __Bin F_FUNC_Vmin_13 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_10 = 10;
    __Bin F_FUNC_Vmax_GROS_166p66_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_12 = 10;
    __Bin F_FUNC_SPEC_Vmax_DC_PARA_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre_7 = 10;
    __Bin F_PARA_VIO_Vmin_PM86_DC_PM04 = 11;
    __Bin F_PARA_VIO_Vmax_PM86_DC_PM04 = 11;
    __Bin F_LEAK_IOZ_Vmax_PM85 = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM411 = 12;
    __Bin F_LEAK_IIN_Vmax = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS_1 = 12;
    __Bin F_LEAK_IDDQ_Delta = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Drift = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM411 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS_1 = 12;
    __Bin F_FUSE_DIEID_PRE_READ = 13;
}

/**************************************************/
/*** Hardbin Definitions used in Final flow ***/
/**************************************************/
__BinMap ATSite_BinMap_Final {
    __Bin GOOD_UNIT = 1;
    __Bin F_OS_OPEN = 8;
    __Bin F_OS_CRES = 8;
    __Bin F_OS_OPEN_ANALOG = 8;
    __Bin F_OS_OPEN_ANALOG_1 = 8;
    __Bin F_OS_SHRT_ANALOG = 8;
    __Bin F_OS_OPEN_VDD = 8;
    __Bin F_OS_SHRT_ANALOG_2 = 8;
    __Bin F_OS_SHRT_VDD = 8;
    __Bin F_OS_SHRT_PIN = 8;
    __Bin F_OS_SHRT_PTPS = 8;
    __Bin F_TERMFAULT = 9;
    __Bin F_NOSORT = 9;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_15 = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmax_GROS_100_2_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_6 = 10;
    __Bin F_FUNC_Vmin_18 = 10;
    __Bin F_FUNC_Vnom_1 = 10;
    __Bin F_FUNC_Vmin_11 = 10;
    __Bin F_FUNC_Vmax_1 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vboxlo = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre = 10;
    __Bin F_FUNC_Vmin_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmin_8 = 10;
    __Bin F_FUNC_Vmin_3 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_pre = 10;
    __Bin F_FUNC_Vmax = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre = 10;
    __Bin F_FUNC_Vmin_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_14 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66 = 10;
    __Bin F_FUNC_Vmin_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre_3 = 10;
    __Bin F_FUNC_Vmax_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vnom_15 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_3 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_Vmax_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_7 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vnom = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_Vnom_22 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre = 10;
    __Bin F_FUNC_Vmin_1 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_12 = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vmin = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_4 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post_9 = 10;
    __Bin F_FUNC_Vnom_2 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_16 = 10;
    __Bin F_FUNC_Vnom_4 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vmax_GROS_100_3_post = 10;
    __Bin F_FUNC_Vnom_14 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vburnin_BURNIN_200_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_16 = 10;
    __Bin F_FUNC_Vnom_10 = 10;
    __Bin F_FUNC_SPEC_Vmin_DC_PARA_100 = 10;
    __Bin F_FUNC_Vnom_18 = 10;
    __Bin F_FUNC_Vmin_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_7 = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post = 10;
    __Bin F_FUNC_Vnom_13 = 10;
    __Bin F_FUNC_Vmax_GROS_100_1_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre_5 = 10;
    __Bin F_FUNC_Vmin_13 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_10 = 10;
    __Bin F_FUNC_Vmax_GROS_166p66_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_12 = 10;
    __Bin F_FUNC_SPEC_Vmax_DC_PARA_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre_7 = 10;
    __Bin F_PARA_VIO_Vmin_PM86_DC_PM04 = 11;
    __Bin F_PARA_VIO_Vmax_PM86_DC_PM04 = 11;
    __Bin F_LEAK_IOZ_Vmax_PM85 = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM411 = 12;
    __Bin F_LEAK_IIN_Vmax = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS_1 = 12;
    __Bin F_LEAK_IDDQ_Delta = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Drift = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM411 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS_1 = 12;
    __Bin F_FUSE_DIEID_PRE_READ = 13;
}

/**************************************************/
/*** Hardbin Definitions used in Probe flow ***/
/**************************************************/
__BinMap ATSite_BinMap_Probe {
    __Bin GOOD_UNIT = 1;
    __Bin F_OS_OPEN = 7;
    __Bin F_OS_OPEN_ANALOG = 7;
    __Bin F_OS_OPEN_VDD = 7;
    __Bin F_OS_SHRT_ANALOG = 8;
    __Bin F_OS_SHRT_PIN = 8;
    __Bin F_OS_SHRT_VDD = 9;
    __Bin F_TERMFAULT = 9;
    __Bin F_NOSORT = 9;
    __Bin F_FUSE_MEM_UNREPAIRABLE = 10;
    __Bin F_FUSE_DIEID_PRE_READ = 10;
    __Bin F_FUSE_ROM_READ = 10;
    __Bin F_FUSE_DIEID_PROG = 10;
    __Bin F_OS_OPEN_ANALOG_1 = 17;
    __Bin F_OS_SHRT_ANALOG_2 = 17;
    __Bin F_OS_SHRT_PTPS = 18;
    __Bin F_FUNC_Vmin_GROS_166p66_pre_8 = 19;
    __Bin F_FUNC_Vmin_GROS_100_2_post = 19;
    __Bin F_FUNC_Vmin_15 = 19;
    __Bin F_FUNC_Vmax_ANALOG_USB_OTG_100 = 19;
    __Bin F_FUNC_Vmax_GROS_100_2_post = 19;
    __Bin F_FUNC_Vnom_GROS_100_3_post_6 = 19;
    __Bin F_FUNC_Vmin_18 = 19;
    __Bin F_FUNC_Vnom_1 = 19;
    __Bin F_FUNC_Vmin_11 = 19;
    __Bin F_FUNC_Vmax_1 = 19;
    __Bin F_FUNC_Vmin_GROS_100_1_post_5 = 19;
    __Bin F_FUNC_Vnom_GROS_100_3_post = 19;
    __Bin F_FUNC_Vboxlo = 19;
    __Bin F_FUNC_Vmin_GROS_100_4_pre = 19;
    __Bin F_FUNC_Vmin_6 = 19;
    __Bin F_FUNC_Vnom_BIST_PROD_33_post = 19;
    __Bin F_FUNC_Vmin_ANALOG_USB_OTG_100 = 19;
    __Bin F_FUNC_Vmin_8 = 19;
    __Bin F_FUNC_Vmin_3 = 19;
    __Bin F_FUNC_Vmin_BIST_PROD_33_pre = 19;
    __Bin F_FUNC_Vmax = 19;
    __Bin F_FUNC_Vnom_ANALOG_USB_CHG_100 = 19;
    __Bin F_FUNC_Vmin_GROS_100_4_post_8 = 19;
    __Bin F_FUNC_Vmin_GROS_100_pre = 19;
    __Bin F_FUNC_Vmin_2 = 19;
    __Bin F_FUNC_Vnom_GROS_100_post = 19;
    __Bin F_FUNC_Vmin_14 = 19;
    __Bin F_FUNC_Vnom_GROS_166p66 = 19;
    __Bin F_FUNC_Vmin_BIST_PROD_33_1 = 19;
    __Bin F_FUNC_Vmin_4 = 19;
    __Bin F_FUNC_Vmin_GROS_100_pre_3 = 19;
    __Bin F_FUNC_Vmax_GROS_100_4_post = 19;
    __Bin F_FUNC_Vmax_ANALOG_USB_CHG_100 = 19;
    __Bin F_FUNC_Vmin_20 = 19;
    __Bin F_FUNC_Vnom_15 = 19;
    __Bin F_FUNC_Vnom_GROS_100_post_3 = 19;
    __Bin F_FUNC_Vmin_GROS_100_post_5 = 19;
    __Bin F_FUNC_Vmin_GROS_100_2_post_6 = 19;
    __Bin F_FUNC_Vnom_GROS_100_2_post_7 = 19;
    __Bin F_FUNC_Vmin_GROS_100_post_4 = 19;
    __Bin F_FUNC_Vmin_GROS_100_3_post = 19;
    __Bin F_FUNC_Vmin_GROS_100_1_pre = 19;
    __Bin F_FUNC_Vmin_GROS_100_4_post_9 = 19;
    __Bin F_FUNC_Vmax_GROS_100_post = 19;
    __Bin F_FUNC_Vmin_7 = 19;
    __Bin F_FUNC_Vnom_GROS_100_2_post_5 = 19;
    __Bin F_FUNC_Vmin_GROS_166p66_post = 19;
    __Bin F_FUNC_Vmin_GROS_100_2_pre = 19;
    __Bin F_FUNC_Vnom_ANALOG_USB_OTG_100 = 19;
    __Bin F_FUNC_Vnom = 19;
    __Bin F_FUNC_Vnom_22 = 19;
    __Bin F_FUNC_Vmin_GROS_166p66_pre = 19;
    __Bin F_FUNC_Vmin_1 = 19;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_12 = 19;
    __Bin F_FUNC_Vmax_BIST_PROD_33_1 = 19;
    __Bin F_FUNC_Vnom_GROS_100_4_post_9 = 19;
    __Bin F_FUNC_Vmin = 19;
    __Bin F_FUNC_Vnom_GROS_100_1_post_4 = 19;
    __Bin F_FUNC_Vmin_BIST_PROD_33_1_pre = 19;
    __Bin F_FUNC_Vmin_GROS_166p66_post_9 = 19;
    __Bin F_FUNC_Vnom_2 = 19;
    __Bin F_FUNC_Vmin_GROS_100_1_pre_4 = 19;
    __Bin F_FUNC_Vmin_GROS_100_post = 19;
    __Bin F_FUNC_Vnom_GROS_100_4_post = 19;
    __Bin F_FUNC_Vmin_16 = 19;
    __Bin F_FUNC_Vnom_4 = 19;
    __Bin F_FUNC_Vnom_GROS_166p66_post_8 = 19;
    __Bin F_FUNC_Vmin_GROS_100_2_post_7 = 19;
    __Bin F_FUNC_Vmin_GROS_100_1_post_6 = 19;
    __Bin F_FUNC_Vnom_GROS_100_1_post_6 = 19;
    __Bin F_FUNC_Vmax_GROS_100_3_post = 19;
    __Bin F_FUNC_Vnom_14 = 19;
    __Bin F_FUNC_Vnom_GROS_100_2_post = 19;
    __Bin F_FUNC_Vmin_BIST_PROD_33_post = 19;
    __Bin F_FUNC_Vmin_GROS_100_3_pre = 19;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1 = 19;
    __Bin F_FUNC_Vmin_GROS_166p66 = 19;
    __Bin F_FUNC_Vnom_GROS_100_3_post_8 = 19;
    __Bin F_FUNC_Vburnin_BURNIN_200_pre = 19;
    __Bin F_FUNC_Vmin_GROS_100_3_pre_6 = 19;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_16 = 19;
    __Bin F_FUNC_Vnom_10 = 19;
    __Bin F_FUNC_Vnom_18 = 19;
    __Bin F_FUNC_Vmin_5 = 19;
    __Bin F_FUNC_Vmin_GROS_100_3_post_7 = 19;
    __Bin F_FUNC_Vmin_ANALOG_USB_CHG_100 = 19;
    __Bin F_FUNC_Vnom_BIST_PROD_33 = 19;
    __Bin F_FUNC_Vnom_GROS_100_4_post_7 = 19;
    __Bin F_FUNC_Vmin_GROS_100_1_post = 19;
    __Bin F_FUNC_Vnom_13 = 19;
    __Bin F_FUNC_Vmax_GROS_100_1_post = 19;
    __Bin F_FUNC_Vmin_GROS_100_3_post_8 = 19;
    __Bin F_FUNC_Vnom_GROS_100_post_5 = 19;
    __Bin F_FUNC_Vnom_GROS_166p66_post = 19;
    __Bin F_FUNC_Vmax_BIST_PROD_33_post = 19;
    __Bin F_FUNC_Vmin_GROS_100_2_pre_5 = 19;
    __Bin F_FUNC_Vmin_13 = 19;
    __Bin F_FUNC_Vmin_GROS_100_4_post = 19;
    __Bin F_FUNC_Vmin_10 = 19;
    __Bin F_FUNC_Vmax_GROS_166p66_post = 19;
    __Bin F_FUNC_Vnom_GROS_100_1_post = 19;
    __Bin F_FUNC_Vmin_12 = 19;
    __Bin F_FUNC_Vmin_GROS_100_4_pre_7 = 19;
    __Bin F_FUNC_Vmin_17 = 19;
    __Bin F_FUNC_REPAIR_ESDA = 20;
    __Bin F_FUNC_REPAIR_NONREPAIR = 21;
    __Bin F_FUNC_REPAIR_REDUNDANCY = 22;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM411 = 23;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM12 = 23;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS = 23;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS_1 = 23;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM12 = 23;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS = 23;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM411 = 23;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS_1 = 23;
    __Bin F_LEAK_IDDQ_Delta = 24;
    __Bin F_LEAK_IDDQ_Drift = 25;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_3 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_3 = 26;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_2 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_5 = 26;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_1 = 26;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_1 = 26;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_5 = 26;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_4 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_4 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_2 = 26;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50 = 26;
    __Bin F_FUNC_SPEC_Vmin_DC_PARA_100 = 27;
    __Bin F_FUNC_SPEC_Vmax_DC_PARA_100 = 27;
    __Bin F_PARA_VIO_Vmin_PM86_DC_PM04 = 28;
    __Bin F_PARA_VIO_Vmax_PM86_DC_PM04 = 28;
    __Bin F_LEAK_IIN_Vmax = 29;
    __Bin F_LEAK_IOZ_Vmax_PM85 = 30;
    __Bin F_OS_CRES = 65;
}

/**************************************************/
/*** Hardbin Definitions used in Qual flow ***/
/**************************************************/
__BinMap ATSite_BinMap_Qual {
    __Bin GOOD_UNIT = 1;
    __Bin F_OS_OPEN = 8;
    __Bin F_OS_CRES = 8;
    __Bin F_OS_OPEN_ANALOG = 8;
    __Bin F_OS_OPEN_ANALOG_1 = 8;
    __Bin F_OS_SHRT_ANALOG = 8;
    __Bin F_OS_OPEN_VDD = 8;
    __Bin F_OS_SHRT_ANALOG_2 = 8;
    __Bin F_OS_SHRT_VDD = 8;
    __Bin F_OS_SHRT_PIN = 8;
    __Bin F_OS_SHRT_PTPS = 8;
    __Bin F_TERMFAULT = 9;
    __Bin F_NOSORT = 9;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_15 = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmax_GROS_100_2_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_3 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_6 = 10;
    __Bin F_FUNC_Vmin_18 = 10;
    __Bin F_FUNC_Vnom_1 = 10;
    __Bin F_FUNC_Vmin_11 = 10;
    __Bin F_FUNC_Vmax_1 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vboxlo = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre = 10;
    __Bin F_FUNC_Vmin_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vmin_8 = 10;
    __Bin F_FUNC_Vmin_3 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_pre = 10;
    __Bin F_FUNC_Vmax = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre = 10;
    __Bin F_FUNC_Vmin_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_14 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66 = 10;
    __Bin F_FUNC_Vmin_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_pre_3 = 10;
    __Bin F_FUNC_Vmax_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmax_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_Vnom_15 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_3 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_Vmax_GROS_100_post = 10;
    __Bin F_FUNC_Vmin_7 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post_5 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre = 10;
    __Bin F_FUNC_Vnom_ANALOG_USB_OTG_100 = 10;
    __Bin F_FUNC_Vnom = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_1 = 10;
    __Bin F_FUNC_Vnom_22 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_pre = 10;
    __Bin F_FUNC_Vmin_1 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_12 = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_9 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_5 = 10;
    __Bin F_FUNC_Vmin = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_4 = 10;
    __Bin F_FUNC_Vmin_BIST_PROD_33_1_pre = 10;
    __Bin F_FUNC_Vmin_GROS_166p66_post_9 = 10;
    __Bin F_FUNC_Vnom_2 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_pre_4 = 10;
    __Bin F_FUNC_Vmin_GROS_100_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_16 = 10;
    __Bin F_FUNC_Vnom_4 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post_8 = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post_6 = 10;
    __Bin F_FUNC_Vmax_GROS_100_3_post = 10;
    __Bin F_FUNC_Vnom_14 = 10;
    __Bin F_FUNC_Vnom_GROS_100_2_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1 = 10;
    __Bin F_FUNC_FAST_Vmin_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vmin_GROS_166p66 = 10;
    __Bin F_FUNC_Vnom_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vburnin_BURNIN_200_pre = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_pre_6 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33_1_16 = 10;
    __Bin F_FUNC_Vnom_10 = 10;
    __Bin F_FUNC_SPEC_Vmin_DC_PARA_100 = 10;
    __Bin F_FUNC_Vnom_18 = 10;
    __Bin F_FUNC_Vmin_5 = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_7 = 10;
    __Bin F_FUNC_Vmin_ANALOG_USB_CHG_100 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_4 = 10;
    __Bin F_FUNC_Vnom_BIST_PROD_33 = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50_2 = 10;
    __Bin F_FUNC_Vnom_GROS_100_4_post_7 = 10;
    __Bin F_FUNC_Vmin_GROS_100_1_post = 10;
    __Bin F_FUNC_Vnom_13 = 10;
    __Bin F_FUNC_Vmax_GROS_100_1_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_3_post_8 = 10;
    __Bin F_FUNC_Vnom_GROS_100_post_5 = 10;
    __Bin F_FUNC_Vnom_GROS_166p66_post = 10;
    __Bin F_FUNC_Vmax_BIST_PROD_33_post = 10;
    __Bin F_FUNC_Vmin_GROS_100_2_pre_5 = 10;
    __Bin F_FUNC_Vmin_13 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_post = 10;
    __Bin F_FUNC_Vmin_10 = 10;
    __Bin F_FUNC_Vmax_GROS_166p66_post = 10;
    __Bin F_FUNC_Vnom_GROS_100_1_post = 10;
    __Bin F_FUNC_FAST_Vmax_SCAN_AC_50 = 10;
    __Bin F_FUNC_Vmin_12 = 10;
    __Bin F_FUNC_SPEC_Vmax_DC_PARA_100 = 10;
    __Bin F_FUNC_Vmin_GROS_100_4_pre_7 = 10;
    __Bin F_PARA_VIO_Vmin_PM86_DC_PM04 = 11;
    __Bin F_PARA_VIO_Vmax_PM86_DC_PM04 = 11;
    __Bin F_LEAK_IOZ_Vmax_PM85 = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM411 = 12;
    __Bin F_LEAK_IIN_Vmax = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_post_VDDS_1 = 12;
    __Bin F_LEAK_IDDQ_Delta = 12;
    __Bin F_LEAK_IDDQ_Vmax_VDDS_PM12 = 12;
    __Bin F_LEAK_IDDQ_Drift = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS = 12;
    __Bin F_LEAK_IDDQ_Vburnin_VDDS_PM411 = 12;
    __Bin F_LEAK_IDDQ_Vboxlo_pre_VDDS_1 = 12;
    __Bin F_FUSE_DIEID_PRE_READ = 13;
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/boardcheck.evo                                 */
/* Creation Date  : Tue Jan  3 17:12:06 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


//***
//*** The following must be modified by the user based on device
//*** hardware specific data:
//***
//*** ETest UserCheckLoadBoardID :: Revision_Spec and Part_Number_Spec
//*** ETest SupplyCapChk :: capacitor_value per TestSupply
//***


/*********************************/
/*** UserCheckLoadBoardID Test ***/
/*********************************/
__Test UserCheckLoadBoardID_Bllizar_PB1 {
	//Was ETest

	__Mask[0] = TIGlobalVarsMask;
	__PortExpression[0] = __Expression { __String = ".Result = TMResultM:TM_PASS"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__PortAction[1] = __Expression { __String = "skip(0, FALSE -> TIBoardCheckResult, Warning_message('Did not find a valid loadboard.  Please reload the program after making sure that a valid loadboard is being used.'))"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
	__Block[0] = {
			//__Value(meas) & __Result(TMResultM) are the returns of cpp Execute()
        __Value = __Expression { __String = "#"; __Mode = Output; }
        __Result = __Expression { __String = "..Value"; }
        __ContinueOnFail = __Expression { __String = "NOT TestProgData.evFastBinning"; }
        __TestMethod {
            __Name = USER::TILoadBoardID;//fixtmod

            Revision_Spec = __Expression { __String = "'A'"; }
            Part_Number_Spec = __Expression { __String = "1"; }
            Serial_Number = __Expression { __String = "#"; __Mode = Output; }
            Revision = __Expression { __String = "#"; __Mode = Output; }
            Programmed_Date = __Expression { __String = "#"; __Mode = Output; }
            Part_Number = __Expression { __String = "#"; __Mode = Output; }
            Variation = __Expression { __String = "#"; __Mode = Output; }
            board_check = __Expression { __String = "#"; __Mode = Output; }
        }
    }
}
//end of __ETest


/******************************/
/*** Supply Capacitor Check ***/
/******************************/

__Test SupplyCapChk_Bllizar_PB1 {
	//Was ETest

	__PortExpression[0] = __Expression { __String = ".Result = TMResultM:TM_PASS"; }
	__PortExpression[1] = __Expression { __String = "skip( SupplyCapChk_Bllizar_PB1.VDD.Result = TMResultM:TM_FAIL, FALSE->TIBoardCheckResult,Warning_message('Supply capacitance check failed. Please notify EE that VDD is not at correct value.'))"; }
	__PortExpression[2] = __Expression { __String = "skip( SupplyCapChk_Bllizar_PB1.VDDAR.Result = TMResultM:TM_FAIL, FALSE->TIBoardCheckResult,Warning_message('Supply capacitance check failed. Please notify EE that VDDAR is not at correct value.'))"; }
	__PortExpression[3] = __Expression { __String = "skip( SupplyCapChk_Bllizar_PB1.VDDS.Result = TMResultM:TM_FAIL, FALSE->TIBoardCheckResult,Warning_message('Supply capacitance check failed. Please notify EE that VDDS is not at correct value.'))"; }
	__PortExpression[4] = __Expression { __String = "skip( TRUE {.Test_result.VDDA = TMResultM:TM_FAIL}, FALSE->TIBoardCheckResult,Warning_message('Supply capacitance check failed. Please notify EE that VDDA is not at correct value.'))"; }
	__PortAction[0] = __Expression { __String = "skip(0, TRUE->TIBoardCheckResult)"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
	__Block[0] = {
        __Title = VDD;
			//__Value(meas) & __Result(TMResultM) are the returns of cpp Execute()
        __Value = __Expression { __String = "#"; __Mode = Output; }
        __Result = __Expression { __String = "if(SupplyCapChk_Bllizar_PB1.VDD.Value = TRUE, TMResultM:TM_PASS, TMResultM:TM_FAIL)"; }
        __ContinueOnFail = __Expression { __String = "TRUE"; }
        __TestMethod {
            __Name = USER::TISupplyCapChk;//fixtmod

            capacitor_value = __Expression { __String = "2uF"; }
            capacitor_delta = __Expression { __String = "20"; }
            final_measurement = __Expression { __String = "#"; __Mode = Output; }
            CPS_NAME = __Expression { __String = "VDD"; }
        }
    }
}
//end of __ETest


/**************************/
/*** BoardCheck SubFlow ***/
/**************************/

__SubFlow BoardCheck_Bllizar_PB1 {
	__Node FlowNode_1350 {
		__XCoord = (50,55);
		__Port[0] {
			__PortPosition = 96;
		}
		__InputPosition = 266;
		__TestID = "";
		__PortSelect =  "0";
	}
	__Node  ConnectDevice_1351 {
		__XCoord = (200,50);
		__Port[0] {
			__PortPosition = 91;
		}
		__InputPosition = 270;
		__TestID = "1000000";
		__Calibration = Bllizar_Calibration;
		__Exec =  ConnectDevice;
	}
	__Node  UserCheckLoadBoardID_Bllizar_PB1_1352 {
		__XCoord = (350,50);
		__Port[0] {
			__PortPosition = 86;
		}
		__Port[1] {
			__PortPosition = 180;
		}
		__InputPosition = 272;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCSpecs.CommonDCdata"; }
            Globals_Meas = __Expression { __String = "0"; }
        }
		__TestID = "2000000";
		__Calibration = Bllizar_Calibration;
		__Exec =  UserCheckLoadBoardID_Bllizar_PB1;
	}
	__Node  SupplyCapChk_Bllizar_PB1_1353 {
		__XCoord = (500,50);
		__Port[0] {
			__PortPosition = 81;
		}
		__Port[1] {
			__PortPosition = 195;
		}
		__Port[2] {
			__PortPosition = 190;
		}
		__Port[3] {
			__PortPosition = 185;
		}
		__Port[4] {
			__PortPosition = 180;
		}
		__InputPosition = 274;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCSpecs.CommonDCdata"; }
            Globals_Meas = __Expression { __String = "0"; }
        }
		__TestID = "3000000";
		__Calibration = Bllizar_Calibration;
		__Exec =  SupplyCapChk_Bllizar_PB1;
	}
	__Node  DisconnectDevice_1354 {
		__XCoord = (800,50);
		__Port[0] {
			__PortPosition = 81;
		}
		__InputPosition = 270;
		__TestID = "4000000";
		__Calibration = Bllizar_Calibration;
		__Exec =  DisconnectDevice;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1350;
	__PortConnections {
	FlowNode_1350 __Port[0] =  ConnectDevice_1351;//To Port = 1;
	 ConnectDevice_1351 __Port[0] =  UserCheckLoadBoardID_Bllizar_PB1_1352;//To Port = 2;
	 UserCheckLoadBoardID_Bllizar_PB1_1352 __Port[0] =  SupplyCapChk_Bllizar_PB1_1353;//To Port = 3;
	 UserCheckLoadBoardID_Bllizar_PB1_1352 __Port[1] =  DisconnectDevice_1354;//To Port = 4;
	 SupplyCapChk_Bllizar_PB1_1353 __Port[0] =  DisconnectDevice_1354;//To Port = 4;
	 SupplyCapChk_Bllizar_PB1_1353 __Port[1] =  DisconnectDevice_1354;//To Port = 4;
	 SupplyCapChk_Bllizar_PB1_1353 __Port[2] =  DisconnectDevice_1354;//To Port = 4;
	 SupplyCapChk_Bllizar_PB1_1353 __Port[3] =  DisconnectDevice_1354;//To Port = 4;
	 SupplyCapChk_Bllizar_PB1_1353 __Port[4] =  DisconnectDevice_1354;//To Port = 4;
	}
	__Background {
        __String = "Execute SubFlow only once regardless of number of sites";
        __Data = (0,0,8,15,0,0,26,0,0,4,0,0,1,0,0,0);
    }
}

/**************************/
/*** BoardCheck SubFlow ***/
/**************************/

__SubFlow BoardCheck {
	__Node  BoardCheck_Bllizar_PB1_1355 {
		__XCoord = (112,169);
		__InputPosition = 0;
		__TestID = "";
		__Exec =  BoardCheck_Bllizar_PB1;
	}
	__Node FlowNode_1356 {
		__XCoord = (114,42);
		__Port[0] {
			__PortPosition = 184;
		}
		__InputPosition = 268;
		__TestID = "";
		__PortSelect =  "if(TIDeviceType = value(TIDeviceType:Bllizar_PB1),0,1)";
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode = FlowNode_1356;
	__PortConnections {
	FlowNode_1356 __Port[0] =  BoardCheck_Bllizar_PB1_1355;//To Port = 0;
	}
	__Background {
        __String = "TIDeviceType = Bllizar_PB1";
        __Data = (0,0,100,18,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/cycletbl.evo                                   */
/* Creation Date  : Tue Jan  3 17:12:10 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


/***********************************************************************/
/***                                                                 ***/
/***  The file cycletbl.evo is where all the AC information is       ***/
/***  finally brought together to define a complete AC setup for a   ***/
/***  set of patterns. In consists of the following objects:         ***/
/***  PatternGroup   - This defines the location where the patterns  ***/
/***                   compiled Flex files will be stored when       ***/
/***                   compiled. It also selects the SignalHeader    ***/
/***                   that maps Pin names to columns in the patter  ***/
/***                   source. The SignalHeader is defined in        ***/
/***                   the file patterns.evo.                        ***/
/***                   The PatternGroup name provides a link to all  ***/
/***                   the information the pattern compiler needs to ***/
/***                   compile patterns.                             ***/
/***  WaveformTable  - This is a special Waveform Table known as the ***/
/***                   DEFAULT WaveformTable. It is special because  ***/
/***                   it is bound to the PatternGroup definition    ***/
/***                   by name. The Default WaveformTable name must  ***/
/***                   be the PatternGroup name repeated twice, with ***/
/***                   one space between. LTX managed to confuse     ***/
/***                   just about everybody by conserving names.     ***/
/***                   The function of the Default WaveformTable     ***/
/***                   is to define all the "alias" characters that  ***/
/***                   will be used in the patterns in this          ***/
/***                   PatternGroup. The alias characters must be    ***/
/***                   defined in terms of function (in LTX          ***/
/***                   parlance, OXBI code). This is the "Data"      ***/
/***                   entry.                                        ***/
/***  PatternSequence- The PatternSequence defines a group of        ***/
/***                   patterns to run in order. It is an object     ***/
/***                   that can be an "Entry" of a test, and that    ***/
/***                   the test can execute. It includes a list of   ***/
/***                   threads (which are, themselves, lists of      ***/
/***                   patterns, of course). It also includes a      ***/
/***                   section (called Zipper) that defines all the  ***/
/***                   TimeSets that will be used in these patterns. ***/
/***                   Finally, the PatternSequence selects the Mode ***/
/***                   of the tester (125MHz or 250MHz in the case   ***/
/***                   of VX250).                                    ***/
/***                                                                 ***/
/***********************************************************************/

        /***********************************************************/
        /***          Pattern Group information                  ***/
        /***********************************************************/
        /***                                                     ***/
        /***  This section defines all the information that      ***/
        /***  defines PatternGroups. This is information that is ***/
        /***  required to successfully compile the patterns.     ***/
        /***  Most programs will only need one PatternGroup, and ***/
        /***  therefore, Default WaveformTable. However, this    ***/
        /***  may be constructed from a set of standard Default  ***/
        /***  such as the TDLStdPatGrp, which should be the base ***/
        /***  for all test programs.                             ***/
        /***                                                     ***/
        /***  The PatternGroup entry names the PatternGroup,     ***/
        /***  sets the path for compiled pattern Flex files,     ***/
        /***  and selects the SignalHeader(s) that will be used  ***/
        /***  in patterns in this PatternGroup. Required entries ***/
        /***  are:                                               ***/
        /***     Name         - Name of the PatternGroup         ***/
        /***     CachePath    - Location of compiles Flexes      ***/
        /***     SignalHeader - One or more blank-separated      ***/
        /***                    SignalHeader names               ***/
        /***                                                     ***/
        /*** The Default WaveformTable defines each character    ***/
        /*** used in the patterns. The simplest way to do this   ***/
        /*** is to define all characters for all pins. In cases  ***/
        /*** of complex timings, this may not be possible. This  ***/
        /*** is especially true of any programs to be run        ***/
        /*** >125MHz, where the combinations become an issue.    ***/
        /*** Note that every Default WaveformTable must have an  ***/
        /*** associated PatternGroup statement, in order for it  ***/
        /*** to pick up the vector pin mapping information (ie,  ***/
        /*** SignalHeader).                                      ***/
        /*** Required entries are:                               ***/
        /***     Name         - Name of PatternGroup, twice      ***/
        /***     Cell                                            ***/
        /***       PinList    - All the pins this character may  ***/
        /***                    be used on. If all pins in the   ***/
        /***                    pattern, then the reference      ***/
        /***                    PatternGroupName.Pins will get   ***/
        /***                    everything in the SignaHeader(s).***/
        /***       Characters - The "0" data and "1" data        ***/
        /***                    characters.                      ***/
        /***       Cell Name  - A tool reference, so you can tell***/
        /***                    what you are looking at.         ***/
        /***       Data       - The key information. This tells  ***/
        /***                    the pattern compiler if this     ***/
        /***                    character will be a Drive WF, a  ***/
        /***                    Strobe WF, or a Masked WF.       ***/
        /***                      0/1  -  DriveOff, CompareOn    ***/
        /***                      2/3  -  DriveOff, CompareOff   ***/
        /***                      4/5  -  DriveOn, CompareOn     ***/
        /***                      6/7  -  DriveOn, CompareOff    ***/
        /***                    Combination 4/5 is rarely used.  ***/
        /***                                                     ***/
        /***********************************************************/

/************************/
/***  Pattern Groups  ***/
/************************/
__PatternGroup TDLStdPatGrp {
    __SignalHeader DefaultSignalHeader ScanHeader1 ScanHeader2 ScanHeader3;
}

        /***********************************************************/
        /***          TI TDL Default Waveform Table              ***/
        /***********************************************************/
        /***                                                     ***/
        /***  This is a default WaveformTable which supports the ***/
        /***  TI TDL character set. This default WaveformTable   ***/
        /***  should be in all test programs.                    ***/
        /***                                                     ***/
        /***********************************************************/

__WaveformTable TDLStdPatGrp TDLStdPatGrp {
    __Cell "TDLStdPatGrp.Pins" L/H NRZDrive {
        __Data 6/7;
        __Color 3/6;
        __Drive {
            __Waveform { __DriveOn; __DriveData; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" Y/S DriveNoCare {
        __Data 6/7;
        __Color 9/3;
        __Drive {
            __Waveform { __DriveOn; __DriveLow; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" c/H ROClk {
        __Data 6/7;
        __Color 4/8;
        __Drive {
            __Waveform { __DriveOn; __DriveData; __DriveHigh; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" L/C RZClk {
        __Data 6/7;
        __Color 8/4;
        __Drive {
            __Waveform { __DriveOn; __DriveData; __DriveLow; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" 2 DoubleClk {
        __Data 7;
        __Color 4;
        __Drive {
            __Waveform { __DriveHigh; __DriveLow; __DriveHigh; __DriveLow; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" D RZClk2 {
        __Data 7;
        __Color 4;
        __Drive {
            __Waveform { __DriveOn; __DriveHigh; __DriveLow; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" 0/1 ActiveStrb {
        __Data 0/1;
        __Color 8/10;
        __Drive {
            __Waveform { __DriveOff; }
        }
        __Compare {
            __Waveform { __CompareData; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" Z HighZStrb {
        __Data 2;
        __Color 4;
        __Drive {
            __Waveform { __DriveOff; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" M _M_ {
        __Data 2;
        __Color 7;
        __Drive {
            __Waveform { __DriveOff; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" - HoldStateWF {
        __Data 6;
        __Color 7;
        __Drive {
            __EntryState __DriveOn;
            __Waveform { }
        }
    }
    __Cell "TDLStdPatGrp.Pins" i SCANDRIVE {
        __Data 6 __Serial;
        __Color 3;
    }
    __Cell "TDLStdPatGrp.Pins" o SCANSTROBE {
        __Data 3 __Serial;
        __Color 3;
    }
    __Cell "TDLStdPatGrp.Pins" d DPM2CPM {
        __Data 3 __Other;
        __Color 3;
    }
    __Cell "TDLStdPatGrp.Pins" 2 CUSTOM_2 {
        __Data 7;
        __Color 4;
    }
    __Cell "TDLStdPatGrp.Pins" < CUSTOM_LT {
        __Data 6;
        __Color 6;
        __Drive {
            __Waveform { __DriveOn; __DriveHigh; __DriveLow; __DriveOff; }
        }
    }
    __Cell "TDLStdPatGrp.Pins" > CUSTOM_GT {
        __Data 7;
        __Color 7;
        __Drive {
            __Waveform { __DriveOn; __DriveHigh; __DriveLow; __DriveOff; }
        }
    }
}


        /***********************************************************/
        /***          Pattern Sequence information               ***/
        /***********************************************************/
        /***                                                     ***/
        /***  This section defines defines the groups of patterns***/
        /***  and order in which they will be run, as well as    ***/
        /***  defining the complete set of timings that will be  ***/
        /***  available to each group of patterns. Critical      ***/
        /***  entries are:                                       ***/
        /***                                                     ***/
        /***    Thread       - List of Threads in the order in   ***/
        /***                   which they are to be executed.    ***/
        /***    Zipper       - Combines PatternGroup and Time    ***/
        /***                   Set information. This is the      ***/
        /***                   point at which all timings are    ***/
        /***                   brought together. If the program  ***/
        /***                   is going to run out of timing     ***/
        /***                   resources, it will happen when    ***/
        /***                   evaluating the Zipper object.     ***/
        /***    PatternGroup - Name of PatternGroup for this     ***/
        /***                   WaveformTable to be combined in.  ***/
        /***    Waveform Ref - Name of a time set, which can     ***/
        /***                   be referenced on a vector by      ***/
        /***                   vector basis in the pattern.      ***/
        /***                   LTX calls this a Waveform         ***/
        /***                   Reference name.                   ***/
        /***    WaveformTable - Has the timing values for the    ***/
        /***                    Waveform Reference, and the      ***/
        /***                    pin mapping for the Waveforms.   ***/
        /***    BasePeriodResolution - Selects tester period     ***/
        /***                    resolution. Early Fusions had    ***/
        /***                    period resolution limited to 1ns.***/
        /***                    For compatibility, that is the   ***/
        /***                    default. To override the default,***/
        /***                    set this variable to the constant***/
        /***                    VariableBasePeriod               ***/
        /***                                                     ***/
        /***********************************************************/

__PatternSequence ANALOG_FSUSB_PUPD_100_SEQ {
    __Thread[0] = ANALOG_FSUSB_PUPD_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT15 = { WFT15 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence ANALOG_TRIM_TRIM_100_SEQ {
    __Thread[0] = ANALOG_TRIM_TRIM_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT8 = { WFT8 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence ANALOG_USB_CHG_100_SEQ {
    __Thread[0] = ANALOG_USB_CHG_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT15 = { WFT15 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence ANALOG_USB_OTG_100_SEQ {
    __Thread[0] = ANALOG_USB_OTG_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT15 = { WFT15 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence BIST_MEMORY_VBOXLO_33_SEQ {
    __Thread[0] = BIST_MEMORY_VBOXLO_33;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT20 = { WFT20 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT20 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence BIST_PROD_33_1_SEQ {
    __Thread[0] = BIST_PROD_33_1;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT18 = { WFT18 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence BIST_PROD_33_SEQ {
    __Thread[0] = BIST_PROD_33;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT17 = { WFT17 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence BURNIN_200_SEQ {
    __Thread[0] = BURNIN_200;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT27 = { WFT27 } }
        __Row { TDLStdPatGrp, WFT28 = { WFT28 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence DC_PARA_100_SEQ {
    __Thread[0] = DC_PARA_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT10 = { WFT10 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence DIAG_VHI_200_SEQ {
    __Thread[0] = DIAG_VHI_200_pb_pb_march13n_rep;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT19 = { WFT19 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence DIAG_VLO_200_SEQ {
    __Thread[0] = DIAG_VLO_200_pb_pb_march13n_rep;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT19 = { WFT19 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FFDieIDProg_SEQ {
    __Thread[0] = CheckROM_norm_100;
    __Thread[1] = InitCheck_100;
    __Thread[2] = Program_Mg1A_100;
    __Thread[3] = Read_Mg0_100;
    __Thread[4] = Read_Mg1A_100;
    __Thread[5] = Read_Norm_100;
    __Thread[6] = RunAutoload_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT12 = { WFT12 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FUNC_GROS_100_1_SEQ {
    __Thread[0] = FUNC_GROS_100_1;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT21 = { WFT21 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FUNC_GROS_100_2_SEQ {
    __Thread[0] = FUNC_GROS_100_2;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT22 = { WFT22 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FUNC_GROS_100_3_SEQ {
    __Thread[0] = FUNC_GROS_100_3;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT23 = { WFT23 } }
        __Row { TDLStdPatGrp, WFT24 = { WFT24 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT23, WFT24 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FUNC_GROS_100_4_SEQ {
    __Thread[0] = FUNC_GROS_100_4;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT26 = { WFT26 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT26 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence FUNC_GROS_100_SEQ {
    __Thread[0] = FUNC_GROS_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT9 = { WFT9 } }
        __Row { TDLStdPatGrp, WFT8 = { WFT8 } }
        __Row { TDLStdPatGrp, WFT11 = { WFT11 } }
        __Row { TDLStdPatGrp, WFT14 = { WFT14 } }
        __Row { TDLStdPatGrp, WFT15 = { WFT15 } }
        __Row { TDLStdPatGrp, WFT25 = { WFT25 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT11, WFT14, WFT15, WFT25 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence FUNC_GROS_166p66_SEQ {
    __Thread[0] = FUNC_GROS_166p66;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT13 = { WFT13 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence FUNC_SCAN_AC_50_1_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50_1;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT2 = { WFT2 } }
        __Row { TDLStdPatGrp, WFT7 = { WFT7 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT2, WFT7 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncFreeRun"; }
        }
    }
}

__PatternSequence FUNC_SCAN_AC_50_2_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50_2;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT3 = { WFT3 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT3 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncFreeRun"; }
        }
    }
}

__PatternSequence FUNC_SCAN_AC_50_3_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50_3;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT4 = { WFT4 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT4 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncFreeRun"; }
        }
    }
}

__PatternSequence FUNC_SCAN_AC_50_4_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50_4;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT5 = { WFT5 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT5 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncFreeRun"; }
        }
    }
}

__PatternSequence FUNC_SCAN_AC_50_5_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50_5;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT6 = { WFT6 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT6 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncFreeRun"; }
        }
    }
}

__PatternSequence FUNC_SCAN_AC_50_SEQ {
    __Thread[0] = FUNC_SCAN_AC_50;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT1 = { WFT1 } }
        __Row { TDLStdPatGrp, WFTBase = { WFT1 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence Iddq_PM01_SEQ {
    __Thread[0] = Iddq_PM01_a_iddq;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT1 = { WFT1 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence Iddq_PM02_SEQ {
    __Thread[0] = Iddq_PM02_pb_iddq_ret_chkr;
    __Thread[1] = Iddq_PM02_pb_iddq_ret_chkr_v23;
    __Thread[2] = Iddq_PM02_pb_iddq_ret_invchkr;
    __Thread[3] = Iddq_PM02_pb_iddq_ret_invchkr_v23;
    __Thread[4] = Iddq_PM02_pb_iddq_ret_ones;
    __Thread[5] = Iddq_PM02_pb_iddq_ret_ones_v23;
    __Thread[6] = Iddq_PM02_pb_iddq_ret_zeroes;
    __Thread[7] = Iddq_PM02_pb_iddq_ret_zeroes_v23;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT16 = { WFT16 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence Iddq_SEQ {
    __Thread[0] = Iddq_PM01_a_iddq;
    __Thread[1] = Iddq_PM02_a_iddq;
    __Thread[2] = Iddq_PM03_a_iddq;
    __Thread[3] = Iddq_PM04_a_iddq;
    __Thread[4] = Iddq_PM05_a_iddq;
    __Thread[5] = Iddq_PM06_a_iddq;
    __Thread[6] = Iddq_PM07_a_iddq;
    __Thread[7] = Iddq_PM08_a_iddq;
    __Thread[8] = Iddq_PM09_a_iddq;
    __Thread[9] = Iddq_PM10_a_iddq;
    __Thread[10] = Iddq_PM11_a_iddq;
    __Thread[11] = Iddq_PM12_a_iddq;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT1 = { WFT1 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence LeakIO_SEQ {
    __Thread[0] = DC_PM03_dcpara_ioz_pd;
    __Thread[1] = DC_PM04_dcpara_ioz_pd;
    __Thread[2] = DC_PM01_dcpara;
    __Thread[3] = DC_PM03_dcpara;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT10 = { WFT10 } }
    }
    __AutoBasePeriod = __True;
}

__PatternSequence Read_Mg0_100_SEQ {
    __Thread[0] = Read_Mg0_100;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT12 = { WFT12 } }
    }
    __AutoBasePeriod = __True;
    __PinModes {
        __Row {
            __Pins = __Expression { __String = "OSC0_124"; }
            __Direction = __Expression { __String = "Dir:Input"; }
            __Drive = __Expression { __String = "Drv:SyncGated"; }
        }
    }
}

__PatternSequence Vout_SEQ {
    __Thread[0] = DC_PM01_dcpara_ioz_pd;
    __Thread[1] = DC_PM02_dcpara_ioz_pd;
    __Thread[2] = DC_PM02_dcpara;
    __Thread[3] = DC_PM04_dcpara;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT10 = { WFT10 } }
    }
    __AutoBasePeriod = __True;
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/dcdata.evo                                     */
/* Creation Date  : Tue Jan  3 17:12:14 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


/***********************************************************************/
/***                                                                 ***/
/***  The file dcdata.evo is the location in which all DC specs      ***/
/***  are stored. This is the only place in a test program in which  ***/
/***  numerical valued DC information should be. All other DC        ***/
/***  expressions should include references to the values in dcdata. ***/
/***                                                                 ***/
/***  The global declarations for all the DC specification variables ***/
/***  are also located here. This is handy, as adding additional     ***/
/***  specs can be done without having to update a separate global   ***/
/***  declarations file.                                             ***/
/***                                                                 ***/
/***  The global declararation also types the variable, so that      ***/
/***  enVision can check for correct assignments (seconds, Volts,    ***/
/***  Amps, and so on).                                              ***/
/***                                                                 ***/
/***  Final comment related to specs is that no value should be      ***/
/***  entered more than once. The "Inherit" capability allows a      ***/
/***  "common" Category to be built, which can then be referenced    ***/
/**   by other Categories                                            ***/
/***                                                                 ***/
/***********************************************************************/

/***********************************************************************/
/*** Correction Factors scf, dcf and ccf are used to compensate for  ***/
/*** the inaccuracy of the tester in setting the Supply voltage,     ***/
/*** comparator voltage and driver voltage. See JazzUsersGuide       ***/
/*** for more info                                                   ***/
/***********************************************************************/

        /***********************************************************/
        /***     Declare global variables with type info         ***/
        /***********************************************************/
        /***                                                     ***/
        /***  This section declares the Globally available       ***/
        /***  DC specifications that will be used in the program.***/
        /***  Type      = Type of value (SCALAR, V, A, s, etc)   ***/
        /***                                                     ***/
        /***********************************************************/

__Spec DCSpecs {
    __Category CommonDCdata {
        ccf = "TIccf";
        dcf = "TIdcf";
        scf = "TIscf";
        vihCal = "3V";
        vilCal = "0V";
        vohCal = "2V";
        volCal = "1V";
        vloadCal = "1.5V";
        iolCal = "if(evConfig.TestHeadType = testhead_type:EX, if(evConfig.DigitalType = Dig:FX1, 20mA, 10mA), 20mA)";
        iohCal = "if(evConfig.TestHeadType = testhead_type:EX, if(evConfig.DigitalType = Dig:FX1, -20mA, -10mA), -20mA)";
        Domain_3P3V_VEfuseP = "3.63V";
        Domain_3P3V_VEfuseR = "3.63V";
        Domain_3P3V_Vboxhi = "3.8V";
        Domain_3P3V_VboxhiM = "3.78V";
        Domain_3P3V_VboxhiP = "3.82V";
        Domain_3P3V_Vboxlo = "2.68V";
        Domain_3P3V_VboxloM = "2.66V";
        Domain_3P3V_VboxloP = "2.7V";
        Domain_3P3V_Vburnin = "3.8V";
        Domain_3P3V_Vmax = "3.63V+scf";
        Domain_3P3V_Vmin = "2.97V-scf";
        Domain_3P3V_Vnom = "3.3V";
        Domain_3P3V_Vstress = "3.8V";
        ICLAMP_VBAT = "100mA";
        ICLAMP_VDD = "744mA";
        ICLAMP_VDDA = "100mA";
        ICLAMP_VDDAR = "82mA";
        ICLAMP_VDDEEPROM = "0pA";
        ICLAMP_VDDPGM = "100mA";
        ICLAMP_VDDS = "1.572A";
        ICLAMP_VNWA = "100mA";
        ICLAMP_VPP = "200mA";
        VBAT_VEfuseP = "3.63V";
        VBAT_VEfuseR = "3.63V";
        VBAT_Vboxhi = "3.8V";
        VBAT_VboxhiM = "3.78V";
        VBAT_VboxhiP = "3.82V";
        VBAT_Vboxlo = "2.68V";
        VBAT_VboxloM = "2.66V";
        VBAT_VboxloP = "2.7V";
        VBAT_Vburnin = "3.8V";
        VBAT_Vmax = "3.63V+scf";
        VBAT_Vmin = "2.97V-scf";
        VBAT_Vnom = "3.3V";
        VBAT_Vstress = "3.8V";
        VDDAR_VEfuseP = "1.7V";
        VDDAR_VEfuseR = "1.32V";
        VDDAR_Vboxhi = "1.7V";
        VDDAR_VboxhiM = "1.68V";
        VDDAR_VboxhiP = "1.72V";
        VDDAR_Vboxlo = "910mV";
        VDDAR_VboxloM = "890mV";
        VDDAR_VboxloP = "930mV";
        VDDAR_Vburnin = "1.6V";
        VDDAR_Vmax = "1.32V+scf";
        VDDAR_Vmin = "1.08V-scf";
        VDDAR_Vnom = "1.2V";
        VDDAR_Vstress = "1.7V";
        VDDA_VEfuseP = "3.63V";
        VDDA_VEfuseR = "3.63V";
        VDDA_Vboxhi = "3.8V";
        VDDA_VboxhiM = "3.78V";
        VDDA_VboxhiP = "3.82V";
        VDDA_Vboxlo = "2.68V";
        VDDA_VboxloM = "2.66V";
        VDDA_VboxloP = "2.7V";
        VDDA_Vburnin = "3.8V";
        VDDA_Vmax = "3.63V+scf";
        VDDA_Vmin = "2.97V-scf";
        VDDA_Vnom = "3.3V";
        VDDA_Vstress = "3.8V";
        VDDEEPROM_VEfuseP = "1.7V";
        VDDEEPROM_VEfuseR = "1.32V";
        VDDEEPROM_Vboxhi = "1.7V";
        VDDEEPROM_VboxhiM = "1.68V";
        VDDEEPROM_VboxhiP = "1.72V";
        VDDEEPROM_Vboxlo = "910mV";
        VDDEEPROM_VboxloM = "890mV";
        VDDEEPROM_VboxloP = "930mV";
        VDDEEPROM_Vburnin = "1.6V";
        VDDEEPROM_Vmax = "1.32V+scf";
        VDDEEPROM_Vmin = "1.08V-scf";
        VDDEEPROM_Vnom = "1.2V";
        VDDEEPROM_Vstress = "1.7V";
        VDDPGM_VEfuseP = "1.7V";
        VDDPGM_VEfuseR = "1.26V";
        VDDPGM_Vboxhi = "1.7V";
        VDDPGM_VboxhiM = "1.68V";
        VDDPGM_VboxhiP = "1.72V";
        VDDPGM_Vboxlo = "910mV";
        VDDPGM_VboxloM = "890mV";
        VDDPGM_VboxloP = "930mV";
        VDDPGM_Vburnin = "1.6V";
        VDDPGM_Vmax = "1.26V+scf";
        VDDPGM_Vmin = "1.08V-scf";
        VDDPGM_Vnom = "1.2V";
        VDDPGM_Vstress = "1.7V";
        VDDS_VEfuseP = "3.63V";
        VDDS_VEfuseR = "3.63V";
        VDDS_Vboxhi = "3.8V";
        VDDS_VboxhiM = "3.78V";
        VDDS_VboxhiP = "3.82V";
        VDDS_Vboxlo = "2.68V";
        VDDS_VboxloM = "2.66V";
        VDDS_VboxloP = "2.7V";
        VDDS_Vburnin = "3.8V";
        VDDS_Vmax = "3.63V+scf";
        VDDS_Vmin = "2.97V-scf";
        VDDS_Vnom = "3.3V";
        VDDS_Vstress = "3.8V";
        VDD_VEfuseP = "1.7V";
        VDD_VEfuseR = "1.32V";
        VDD_Vboxhi = "1.7V";
        VDD_VboxhiM = "1.68V";
        VDD_VboxhiP = "1.72V";
        VDD_Vboxlo = "910mV";
        VDD_VboxloM = "890mV";
        VDD_VboxloP = "930mV";
        VDD_Vburnin = "1.6V";
        VDD_Vmax = "1.32V+scf";
        VDD_Vmin = "1.08V-scf";
        VDD_Vnom = "1.2V";
        VDD_Vstress = "1.7V";
        VNWA_VEfuseP = "1.7V";
        VNWA_VEfuseR = "1.32V";
        VNWA_Vboxhi = "1.7V";
        VNWA_VboxhiM = "1.68V";
        VNWA_VboxhiP = "1.72V";
        VNWA_Vboxlo = "910mV";
        VNWA_VboxloM = "890mV";
        VNWA_VboxloP = "930mV";
        VNWA_Vburnin = "1.6V";
        VNWA_Vmax = "1.32V+scf";
        VNWA_Vmin = "1.08V-scf";
        VNWA_Vnom = "1.2V";
        VNWA_Vstress = "1.7V";
        VPP_VEfuseP = "1.9V";
        VPP_VEfuseR = "1.32V";
        VPP_Vboxhi = "1.7V";
        VPP_VboxhiM = "1.68V";
        VPP_VboxhiP = "1.72V";
        VPP_Vboxlo = "910mV";
        VPP_VboxloM = "890mV";
        VPP_VboxloP = "930mV";
        VPP_Vburnin = "1.6V";
        VPP_Vmax = "1.32V+scf";
        VPP_Vmin = "1.08V-scf";
        VPP_Vnom = "1.2V";
        VPP_Vstress = "1.7V";
        CRES_hilimit = "30Ohm";
        CRES_lolimit = "1Ohm";
        CRES_maxCurPerPin = "100mA";
        anaGndIForce = "-1mA";
        anaGndVForce = "-2V";
        anaGndVLimitHi = "-500mV";
        anaGndVLimitLo = "-1.85V";
        anaGndVRange = "2.5V";
        anaPwrIForce = "1mA";
        anaPwrVForce = "2V";
        anaPwrVLimitHi = "1.85V";
        anaPwrVLimitLo = "500mV";
        anaPwrVRange = "2.5V";
        iOSpins = "-1mA";
        iOSpinsPWR = "1mA";
        icres1 = "14mA";
        icres2 = "24mA";
        iopenssupply = "-1mA";
        iopenssupplymax = "5mA";
        ishortshi2VBAT = "12mA";
        ishortshi2VDD = "12mA";
        ishortshi2VDDA = "12mA";
        ishortshi2VDDAR = "12mA";
        ishortshi2VDDEEPROM = "12mA";
        ishortshi2VDDPGM = "12mA";
        ishortshi2VDDS = "12mA";
        ishortshi2VNWA = "12mA";
        ishortshi2VPP = "12mA";
        ishortshiVBAT = "10mA";
        ishortshiVDD = "10mA";
        ishortshiVDDA = "10mA";
        ishortshiVDDAR = "10mA";
        ishortshiVDDEEPROM = "10mA";
        ishortshiVDDPGM = "10mA";
        ishortshiVDDS = "10mA";
        ishortshiVNWA = "10mA";
        ishortshiVPP = "10mA";
        ishortslo2VBAT = "-20mA";
        ishortslo2VDD = "-20mA";
        ishortslo2VDDA = "-20mA";
        ishortslo2VDDAR = "-20mA";
        ishortslo2VDDEEPROM = "-20mA";
        ishortslo2VDDPGM = "-20mA";
        ishortslo2VDDS = "-20mA";
        ishortslo2VNWA = "-20mA";
        ishortslo2VPP = "-20mA";
        ishortsloVBAT = "-10mA";
        ishortsloVDD = "-10mA";
        ishortsloVDDA = "-10mA";
        ishortsloVDDAR = "-10mA";
        ishortsloVDDEEPROM = "-10mA";
        ishortsloVDDPGM = "-10mA";
        ishortsloVDDS = "-10mA";
        ishortsloVNWA = "-10mA";
        ishortsloVPP = "-10mA";
        vcres = "2V";
        vmaxOSpins = "-1.5V";
        vmaxOSpinsPWR = "1.5V";
        vopenslimit = "-1V";
        vopenslimitCML_RX_GND = "-180mV";
        vopenslimitCML_RX_PWR = "180mV";
        vopenslimitCML_TX_GND = "-600mV";
        vopenslimitCML_TX_PWR = "600mV";
        vopenslimitPWR = "1V";
        vopenssupply = "-1V";
        vshorts2VBAT = "50mV";
        vshorts2VDD = "50mV";
        vshorts2VDDA = "50mV";
        vshorts2VDDAR = "50mV";
        vshorts2VDDEEPROM = "50mV";
        vshorts2VDDPGM = "50mV";
        vshorts2VDDS = "50mV";
        vshorts2VNWA = "50mV";
        vshorts2VPP = "50mV";
        vshortsVBAT = "25mV";
        vshortsVDD = "25mV";
        vshortsVDDA = "25mV";
        vshortsVDDAR = "25mV";
        vshortsVDDEEPROM = "25mV";
        vshortsVDDPGM = "25mV";
        vshortsVDDS = "25mV";
        vshortsVNWA = "25mV";
        vshortsVPP = "25mV";
        vshortslimit = "-300mV";
        vshortslimitCML_RX_GND = "-40mV";
        vshortslimitCML_RX_PWR = "40mV";
        vshortslimitCML_TX_GND = "-25mV";
        vshortslimitCML_TX_PWR = "25mV";
        vshortslimitPWR = "300mV";
        VMSgb = "68mV";
        dcZeroCurrent = "0pA";
        dcZeroVoltage = "0uV";
        IOH_Iddq = "-1mA";
        IOH_Loose = "-1mA";
        IOH_Spec = "-1mA";
        IOL_Iddq = "1mA";
        IOL_Loose = "1mA";
        IOL_Spec = "1mA";
        VIH_Iddq_CMOS = "Domain_3P3V_PS";
        VIH_Iddq_OSC = "Domain_3P3V_PS";
        VIH_Iddq_SPFUN = "Domain_3P3V_PS";
        VIH_Iddq_TTL = "Domain_3P3V_PS";
        VIH_Iddq_WIRE = "Domain_3P3V_PS-0.05V";
        VIH_Loose = "Domain_3P3V_PS-0.05V";
        VIH_Spec = "Domain_3P3V_PS*0.7-dcf";
        VIL_Iddq = "0uV";
        VIL_Loose = "0uV";
        VIL_Spec = "Domain_3P3V_PS*0.3+dcf";
        VLoad = "Domain_3P3V_PS*0.5";
        VOH_Iddq = "(Domain_3P3V_PS/2)+0.2V";
        VOH_Loose = "(Domain_3P3V_PS/2)+0.2V";
        VOH_Spec = "Domain_3P3V_PS*0.8+ccf";
        VOL_Iddq = "(Domain_3P3V_PS/2)-0.2V";
        VOL_Loose = "(Domain_3P3V_PS/2)-0.2V";
        VOL_Spec = "Domain_3P3V_PS*0.2-ccf";
        IIHIO_Max = "if((TITestType=value(TITestType:Qual)),10uA,350nA)";
        IIHIO_Min = "if((TITestType=value(TITestType:Qual)),-5uA,-175nA)";
        IIH_Max = "if((TITestType=value(TITestType:Qual)),1uA,70nA)";
        IIH_Min = "if((TITestType=value(TITestType:Qual)),-1uA,-35nA)";
        IILIO_Max = "if((TITestType=value(TITestType:Qual)),5uA,175nA)";
        IILIO_Min = "if((TITestType=value(TITestType:Qual)),-10uA,-350nA)";
        IIL_Max = "if((TITestType=value(TITestType:Qual)),1uA,35nA)";
        IIL_Min = "if((TITestType=value(TITestType:Qual)),-1uA,-70nA)";
        IOZH_Max = "if((TITestType=value(TITestType:Qual)),20uA,350nA)";
        IOZH_Min = "if((TITestType=value(TITestType:Qual)),-20uA,-175nA)";
        IOZL_Max = "if((TITestType=value(TITestType:Qual)),20uA,175nA)";
        IOZL_Min = "if((TITestType=value(TITestType:Qual)),-20uA,-350nA)";
        MAX_RTERM = "55Ohm";
        MIN_RTERM = "45Ohm";
        Resistance__MAX_CML_Input = "-12Ohm";
        Resistance__MAX_CML_Output = "60Ohm";
        Resistance__MAX_DIFF = "120Ohm";
        Resistance__MAX_LVDS = "120Ohm";
        Resistance__MIN_CML_Input = "10Ohm";
        Resistance__MIN_CML_Output = "40Ohm";
        Resistance__MIN_DIFF = "80Ohm";
        Resistance__MIN_LVDS = "80Ohm";
        VForce_High_3P3V = "Domain_3P3V_PS";
        VForce_Low = "0uV";
        VForce_TermResistance = "400mV";
        VOH_Max_CMOS = "Domain_3P3V_PS";
        VOH_Max_SPFUN = "Domain_3P3V_PS";
        VOH_Min_CMOS = "Domain_3P3V_PS*0.8+ccf";
        VOH_Min_SPFUN = "Domain_3P3V_PS*0.8+ccf";
        VOL_Max_CMOS = "Domain_3P3V_PS*0.22-ccf";
        VOL_Max_SPFUN = "Domain_3P3V_PS*0.22-ccf";
        VOL_Min_CMOS = "0uV";
        VOL_Min_SPFUN = "0uV";
        IDDQ_MAX_VBAT_VBOXLO = "0pA";
        IDDQ_MAX_VBAT_VBURNIN = "0pA";
        IDDQ_MAX_VBAT_VMAX = "0pA";
        IDDQ_MAX_VDDAR_VBOXLO = "0pA";
        IDDQ_MAX_VDDAR_VBURNIN = "0pA";
        IDDQ_MAX_VDDAR_VMAX = "0pA";
        IDDQ_MAX_VDDA_VBOXLO = "0pA";
        IDDQ_MAX_VDDA_VBURNIN = "0pA";
        IDDQ_MAX_VDDA_VMAX = "0pA";
        IDDQ_MAX_VDDEEPROM_VBOXLO = "0pA";
        IDDQ_MAX_VDDEEPROM_VBURNIN = "0pA";
        IDDQ_MAX_VDDEEPROM_VMAX = "0pA";
        IDDQ_MAX_VDDPGM_VBOXLO = "0pA";
        IDDQ_MAX_VDDPGM_VBURNIN = "0pA";
        IDDQ_MAX_VDDPGM_VMAX = "0pA";
        IDDQ_MAX_VDDS_VBOXLO = "0pA";
        IDDQ_MAX_VDDS_VBURNIN = "0pA";
        IDDQ_MAX_VDDS_VMAX = "0pA";
        IDDQ_MAX_VDD_VBOXLO = "0pA";
        IDDQ_MAX_VDD_VBURNIN = "0pA";
        IDDQ_MAX_VDD_VMAX = "0pA";
        IDDQ_MAX_VNWA_VBOXLO = "0pA";
        IDDQ_MAX_VNWA_VBURNIN = "0pA";
        IDDQ_MAX_VNWA_VMAX = "0pA";
        IDDQ_MAX_VPP_VBOXLO = "0pA";
        IDDQ_MAX_VPP_VBURNIN = "0pA";
        IDDQ_MAX_VPP_VMAX = "0pA";
        IDDQ_MIN_VBAT_VBOXLO = "0pA";
        IDDQ_MIN_VBAT_VBURNIN = "0pA";
        IDDQ_MIN_VBAT_VMAX = "0pA";
        IDDQ_MIN_VDDAR_VBOXLO = "0pA";
        IDDQ_MIN_VDDAR_VBURNIN = "0pA";
        IDDQ_MIN_VDDAR_VMAX = "0pA";
        IDDQ_MIN_VDDA_VBOXLO = "0pA";
        IDDQ_MIN_VDDA_VBURNIN = "0pA";
        IDDQ_MIN_VDDA_VMAX = "0pA";
        IDDQ_MIN_VDDEEPROM_VBOXLO = "0pA";
        IDDQ_MIN_VDDEEPROM_VBURNIN = "0pA";
        IDDQ_MIN_VDDEEPROM_VMAX = "0pA";
        IDDQ_MIN_VDDPGM_VBOXLO = "0pA";
        IDDQ_MIN_VDDPGM_VBURNIN = "0pA";
        IDDQ_MIN_VDDPGM_VMAX = "0pA";
        IDDQ_MIN_VDDS_VBOXLO = "0pA";
        IDDQ_MIN_VDDS_VBURNIN = "0pA";
        IDDQ_MIN_VDDS_VMAX = "0pA";
        IDDQ_MIN_VDD_VBOXLO = "0pA";
        IDDQ_MIN_VDD_VBURNIN = "0pA";
        IDDQ_MIN_VDD_VMAX = "0pA";
        IDDQ_MIN_VNWA_VBOXLO = "0pA";
        IDDQ_MIN_VNWA_VBURNIN = "0pA";
        IDDQ_MIN_VNWA_VMAX = "0pA";
        IDDQ_MIN_VPP_VBOXLO = "0pA";
        IDDQ_MIN_VPP_VBURNIN = "0pA";
        IDDQ_MIN_VPP_VMAX = "0pA";
        supplySeqStepSize = "300mV";
        supplySeqStepDelay = "100uS";
        Vsr = "25mV";
        SR_ntarget_nand = "2000";
        SR_ntarget_nor = "2000";
        Iddq_DeltaLimit_VDD = "1uA";
        Iddq_DeltaLimit_VDDA = "1uA";
        Iddq_DeltaLimit_VDDAR = "1uA";
        Iddq_DeltaLimit_VDDS = "1uA";
        Iddq_DriftLimit_VDD = "1uA";
        Iddq_DriftLimit_VDDA = "1uA";
        Iddq_DriftLimit_VDDAR = "1uA";
        Iddq_DriftLimit_VDDS = "1uA";
    }
    __Category TempTEMP_N45_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_N40_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_0_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_25_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_27_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_30_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_50_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_75_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_85_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_90_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_100_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_105_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_125_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __Category TempTEMP_135_DEGDCdata {
        __Inherit CommonDCdata;
    }
    __ParamGlobals {
            ccf { __Type = V; __Comment = "Comparator voltage correction factor(15mV), decided by USP to compensate for Comparator voltage accuracy"; }
            dcf { __Type = V; __Comment = "Driver voltage correction factor(15mV), decided by USP to compensate for Driver voltage accuracy"; }
            scf { __Type = V; __Comment = "Supply voltage correction factor(10mV), decided by USP to compensate for tester supply accuracy"; }
            vihCal { __Type = V; }
            vilCal { __Type = V; }
            vohCal { __Type = V; }
            volCal { __Type = V; }
            vloadCal { __Type = V; }
            iolCal { __Type = A; }
            iohCal { __Type = A; }
            Domain_3P3V_VEfuseP { __Type = V; __Comment = "Domain_3P3V supply at VEfuseP corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_VEfuseR { __Type = V; __Comment = "Domain_3P3V supply at VEfuseR corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vboxhi { __Type = V; __Comment = "Domain_3P3V supply at Vboxhi corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_VboxhiM { __Type = V; __Comment = "Domain_3P3V supply at VboxhiM corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_VboxhiP { __Type = V; __Comment = "Domain_3P3V supply at VboxhiP corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vboxlo { __Type = V; __Comment = "Domain_3P3V supply at Vboxlo corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_VboxloM { __Type = V; __Comment = "Domain_3P3V supply at VboxloM corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_VboxloP { __Type = V; __Comment = "Domain_3P3V supply at VboxloP corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vburnin { __Type = V; __Comment = "Domain_3P3V supply at Vburnin corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vmax { __Type = V; __Comment = "Domain_3P3V supply at Vmax corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vmin { __Type = V; __Comment = "Domain_3P3V supply at Vmin corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vnom { __Type = V; __Comment = "Domain_3P3V supply at Vnom corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            Domain_3P3V_Vstress { __Type = V; __Comment = "Domain_3P3V supply at Vstress corner - the value of the power supply variable Domain_3P3V_PS in PSSpecs"; }
            ICLAMP_VBAT { __Type = A; __Comment = ""; }
            ICLAMP_VDD { __Type = A; __Comment = ""; }
            ICLAMP_VDDA { __Type = A; __Comment = ""; }
            ICLAMP_VDDAR { __Type = A; __Comment = ""; }
            ICLAMP_VDDEEPROM { __Type = A; __Comment = ""; }
            ICLAMP_VDDPGM { __Type = A; __Comment = ""; }
            ICLAMP_VDDS { __Type = A; __Comment = ""; }
            ICLAMP_VNWA { __Type = A; __Comment = ""; }
            ICLAMP_VPP { __Type = A; __Comment = ""; }
            VBAT_VEfuseP { __Type = V; __Comment = "VBAT supply at VEfuseP corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_VEfuseR { __Type = V; __Comment = "VBAT supply at VEfuseR corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vboxhi { __Type = V; __Comment = "VBAT supply at Vboxhi corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_VboxhiM { __Type = V; __Comment = "VBAT supply at VboxhiM corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_VboxhiP { __Type = V; __Comment = "VBAT supply at VboxhiP corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vboxlo { __Type = V; __Comment = "VBAT supply at Vboxlo corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_VboxloM { __Type = V; __Comment = "VBAT supply at VboxloM corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_VboxloP { __Type = V; __Comment = "VBAT supply at VboxloP corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vburnin { __Type = V; __Comment = "VBAT supply at Vburnin corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vmax { __Type = V; __Comment = "VBAT supply at Vmax corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vmin { __Type = V; __Comment = "VBAT supply at Vmin corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vnom { __Type = V; __Comment = "VBAT supply at Vnom corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VBAT_Vstress { __Type = V; __Comment = "VBAT supply at Vstress corner - the value of the power supply variable VBAT_PS in PSSpecs"; }
            VDDAR_VEfuseP { __Type = V; __Comment = "VDDAR supply at VEfuseP corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_VEfuseR { __Type = V; __Comment = "VDDAR supply at VEfuseR corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vboxhi { __Type = V; __Comment = "VDDAR supply at Vboxhi corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_VboxhiM { __Type = V; __Comment = "VDDAR supply at VboxhiM corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_VboxhiP { __Type = V; __Comment = "VDDAR supply at VboxhiP corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vboxlo { __Type = V; __Comment = "VDDAR supply at Vboxlo corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_VboxloM { __Type = V; __Comment = "VDDAR supply at VboxloM corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_VboxloP { __Type = V; __Comment = "VDDAR supply at VboxloP corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vburnin { __Type = V; __Comment = "VDDAR supply at Vburnin corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vmax { __Type = V; __Comment = "VDDAR supply at Vmax corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vmin { __Type = V; __Comment = "VDDAR supply at Vmin corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vnom { __Type = V; __Comment = "VDDAR supply at Vnom corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDAR_Vstress { __Type = V; __Comment = "VDDAR supply at Vstress corner - the value of the power supply variable VDDAR_PS in PSSpecs"; }
            VDDA_VEfuseP { __Type = V; __Comment = "VDDA supply at VEfuseP corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_VEfuseR { __Type = V; __Comment = "VDDA supply at VEfuseR corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vboxhi { __Type = V; __Comment = "VDDA supply at Vboxhi corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_VboxhiM { __Type = V; __Comment = "VDDA supply at VboxhiM corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_VboxhiP { __Type = V; __Comment = "VDDA supply at VboxhiP corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vboxlo { __Type = V; __Comment = "VDDA supply at Vboxlo corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_VboxloM { __Type = V; __Comment = "VDDA supply at VboxloM corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_VboxloP { __Type = V; __Comment = "VDDA supply at VboxloP corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vburnin { __Type = V; __Comment = "VDDA supply at Vburnin corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vmax { __Type = V; __Comment = "VDDA supply at Vmax corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vmin { __Type = V; __Comment = "VDDA supply at Vmin corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vnom { __Type = V; __Comment = "VDDA supply at Vnom corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDA_Vstress { __Type = V; __Comment = "VDDA supply at Vstress corner - the value of the power supply variable VDDA_PS in PSSpecs"; }
            VDDEEPROM_VEfuseP { __Type = V; __Comment = "VDDEEPROM supply at VEfuseP corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_VEfuseR { __Type = V; __Comment = "VDDEEPROM supply at VEfuseR corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vboxhi { __Type = V; __Comment = "VDDEEPROM supply at Vboxhi corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_VboxhiM { __Type = V; __Comment = "VDDEEPROM supply at VboxhiM corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_VboxhiP { __Type = V; __Comment = "VDDEEPROM supply at VboxhiP corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vboxlo { __Type = V; __Comment = "VDDEEPROM supply at Vboxlo corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_VboxloM { __Type = V; __Comment = "VDDEEPROM supply at VboxloM corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_VboxloP { __Type = V; __Comment = "VDDEEPROM supply at VboxloP corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vburnin { __Type = V; __Comment = "VDDEEPROM supply at Vburnin corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vmax { __Type = V; __Comment = "VDDEEPROM supply at Vmax corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vmin { __Type = V; __Comment = "VDDEEPROM supply at Vmin corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vnom { __Type = V; __Comment = "VDDEEPROM supply at Vnom corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDEEPROM_Vstress { __Type = V; __Comment = "VDDEEPROM supply at Vstress corner - the value of the power supply variable VDDEEPROM_PS in PSSpecs"; }
            VDDPGM_VEfuseP { __Type = V; __Comment = "VDDPGM supply at VEfuseP corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_VEfuseR { __Type = V; __Comment = "VDDPGM supply at VEfuseR corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vboxhi { __Type = V; __Comment = "VDDPGM supply at Vboxhi corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_VboxhiM { __Type = V; __Comment = "VDDPGM supply at VboxhiM corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_VboxhiP { __Type = V; __Comment = "VDDPGM supply at VboxhiP corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vboxlo { __Type = V; __Comment = "VDDPGM supply at Vboxlo corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_VboxloM { __Type = V; __Comment = "VDDPGM supply at VboxloM corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_VboxloP { __Type = V; __Comment = "VDDPGM supply at VboxloP corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vburnin { __Type = V; __Comment = "VDDPGM supply at Vburnin corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vmax { __Type = V; __Comment = "VDDPGM supply at Vmax corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vmin { __Type = V; __Comment = "VDDPGM supply at Vmin corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vnom { __Type = V; __Comment = "VDDPGM supply at Vnom corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDPGM_Vstress { __Type = V; __Comment = "VDDPGM supply at Vstress corner - the value of the power supply variable VDDPGM_PS in PSSpecs"; }
            VDDS_VEfuseP { __Type = V; __Comment = "VDDS supply at VEfuseP corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_VEfuseR { __Type = V; __Comment = "VDDS supply at VEfuseR corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vboxhi { __Type = V; __Comment = "VDDS supply at Vboxhi corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_VboxhiM { __Type = V; __Comment = "VDDS supply at VboxhiM corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_VboxhiP { __Type = V; __Comment = "VDDS supply at VboxhiP corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vboxlo { __Type = V; __Comment = "VDDS supply at Vboxlo corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_VboxloM { __Type = V; __Comment = "VDDS supply at VboxloM corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_VboxloP { __Type = V; __Comment = "VDDS supply at VboxloP corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vburnin { __Type = V; __Comment = "VDDS supply at Vburnin corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vmax { __Type = V; __Comment = "VDDS supply at Vmax corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vmin { __Type = V; __Comment = "VDDS supply at Vmin corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vnom { __Type = V; __Comment = "VDDS supply at Vnom corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDDS_Vstress { __Type = V; __Comment = "VDDS supply at Vstress corner - the value of the power supply variable VDDS_PS in PSSpecs"; }
            VDD_VEfuseP { __Type = V; __Comment = "VDD supply at VEfuseP corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_VEfuseR { __Type = V; __Comment = "VDD supply at VEfuseR corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vboxhi { __Type = V; __Comment = "VDD supply at Vboxhi corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_VboxhiM { __Type = V; __Comment = "VDD supply at VboxhiM corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_VboxhiP { __Type = V; __Comment = "VDD supply at VboxhiP corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vboxlo { __Type = V; __Comment = "VDD supply at Vboxlo corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_VboxloM { __Type = V; __Comment = "VDD supply at VboxloM corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_VboxloP { __Type = V; __Comment = "VDD supply at VboxloP corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vburnin { __Type = V; __Comment = "VDD supply at Vburnin corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vmax { __Type = V; __Comment = "VDD supply at Vmax corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vmin { __Type = V; __Comment = "VDD supply at Vmin corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vnom { __Type = V; __Comment = "VDD supply at Vnom corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VDD_Vstress { __Type = V; __Comment = "VDD supply at Vstress corner - the value of the power supply variable VDD_PS in PSSpecs"; }
            VNWA_VEfuseP { __Type = V; __Comment = "VNWA supply at VEfuseP corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_VEfuseR { __Type = V; __Comment = "VNWA supply at VEfuseR corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vboxhi { __Type = V; __Comment = "VNWA supply at Vboxhi corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_VboxhiM { __Type = V; __Comment = "VNWA supply at VboxhiM corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_VboxhiP { __Type = V; __Comment = "VNWA supply at VboxhiP corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vboxlo { __Type = V; __Comment = "VNWA supply at Vboxlo corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_VboxloM { __Type = V; __Comment = "VNWA supply at VboxloM corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_VboxloP { __Type = V; __Comment = "VNWA supply at VboxloP corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vburnin { __Type = V; __Comment = "VNWA supply at Vburnin corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vmax { __Type = V; __Comment = "VNWA supply at Vmax corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vmin { __Type = V; __Comment = "VNWA supply at Vmin corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vnom { __Type = V; __Comment = "VNWA supply at Vnom corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VNWA_Vstress { __Type = V; __Comment = "VNWA supply at Vstress corner - the value of the power supply variable VNWA_PS in PSSpecs"; }
            VPP_VEfuseP { __Type = V; __Comment = "VPP supply at VEfuseP corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_VEfuseR { __Type = V; __Comment = "VPP supply at VEfuseR corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vboxhi { __Type = V; __Comment = "VPP supply at Vboxhi corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_VboxhiM { __Type = V; __Comment = "VPP supply at VboxhiM corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_VboxhiP { __Type = V; __Comment = "VPP supply at VboxhiP corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vboxlo { __Type = V; __Comment = "VPP supply at Vboxlo corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_VboxloM { __Type = V; __Comment = "VPP supply at VboxloM corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_VboxloP { __Type = V; __Comment = "VPP supply at VboxloP corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vburnin { __Type = V; __Comment = "VPP supply at Vburnin corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vmax { __Type = V; __Comment = "VPP supply at Vmax corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vmin { __Type = V; __Comment = "VPP supply at Vmin corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vnom { __Type = V; __Comment = "VPP supply at Vnom corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            VPP_Vstress { __Type = V; __Comment = "VPP supply at Vstress corner - the value of the power supply variable VPP_PS in PSSpecs"; }
            CRES_hilimit { __Type = Ohm; }
            CRES_lolimit { __Type = Ohm; }
            CRES_maxCurPerPin { __Type = A; }
            anaGndIForce { __Type = A; }
            anaGndVForce { __Type = V; }
            anaGndVLimitHi { __Type = V; }
            anaGndVLimitLo { __Type = V; }
            anaGndVRange { __Type = V; }
            anaPwrIForce { __Type = A; }
            anaPwrVForce { __Type = V; }
            anaPwrVLimitHi { __Type = V; }
            anaPwrVLimitLo { __Type = V; }
            anaPwrVRange { __Type = V; }
            iOSpins { __Type = A; }
            iOSpinsPWR { __Type = A; }
            icres1 { __Type = A; }
            icres2 { __Type = A; }
            iopenssupply { __Type = A; }
            iopenssupplymax { __Type = A; }
            ishortshi2VBAT { __Type = A; }
            ishortshi2VDD { __Type = A; }
            ishortshi2VDDA { __Type = A; }
            ishortshi2VDDAR { __Type = A; }
            ishortshi2VDDEEPROM { __Type = A; }
            ishortshi2VDDPGM { __Type = A; }
            ishortshi2VDDS { __Type = A; }
            ishortshi2VNWA { __Type = A; }
            ishortshi2VPP { __Type = A; }
            ishortshiVBAT { __Type = A; }
            ishortshiVDD { __Type = A; }
            ishortshiVDDA { __Type = A; }
            ishortshiVDDAR { __Type = A; }
            ishortshiVDDEEPROM { __Type = A; }
            ishortshiVDDPGM { __Type = A; }
            ishortshiVDDS { __Type = A; }
            ishortshiVNWA { __Type = A; }
            ishortshiVPP { __Type = A; }
            ishortslo2VBAT { __Type = A; }
            ishortslo2VDD { __Type = A; }
            ishortslo2VDDA { __Type = A; }
            ishortslo2VDDAR { __Type = A; }
            ishortslo2VDDEEPROM { __Type = A; }
            ishortslo2VDDPGM { __Type = A; }
            ishortslo2VDDS { __Type = A; }
            ishortslo2VNWA { __Type = A; }
            ishortslo2VPP { __Type = A; }
            ishortsloVBAT { __Type = A; }
            ishortsloVDD { __Type = A; }
            ishortsloVDDA { __Type = A; }
            ishortsloVDDAR { __Type = A; }
            ishortsloVDDEEPROM { __Type = A; }
            ishortsloVDDPGM { __Type = A; }
            ishortsloVDDS { __Type = A; }
            ishortsloVNWA { __Type = A; }
            ishortsloVPP { __Type = A; }
            vcres { __Type = V; }
            vmaxOSpins { __Type = V; }
            vmaxOSpinsPWR { __Type = V; }
            vopenslimit { __Type = V; }
            vopenslimitCML_RX_GND { __Type = V; }
            vopenslimitCML_RX_PWR { __Type = V; }
            vopenslimitCML_TX_GND { __Type = V; }
            vopenslimitCML_TX_PWR { __Type = V; }
            vopenslimitPWR { __Type = V; }
            vopenssupply { __Type = V; }
            vshorts2VBAT { __Type = V; }
            vshorts2VDD { __Type = V; }
            vshorts2VDDA { __Type = V; }
            vshorts2VDDAR { __Type = V; }
            vshorts2VDDEEPROM { __Type = V; }
            vshorts2VDDPGM { __Type = V; }
            vshorts2VDDS { __Type = V; }
            vshorts2VNWA { __Type = V; }
            vshorts2VPP { __Type = V; }
            vshortsVBAT { __Type = V; }
            vshortsVDD { __Type = V; }
            vshortsVDDA { __Type = V; }
            vshortsVDDAR { __Type = V; }
            vshortsVDDEEPROM { __Type = V; }
            vshortsVDDPGM { __Type = V; }
            vshortsVDDS { __Type = V; }
            vshortsVNWA { __Type = V; }
            vshortsVPP { __Type = V; }
            vshortslimit { __Type = V; }
            vshortslimitCML_RX_GND { __Type = V; }
            vshortslimitCML_RX_PWR { __Type = V; }
            vshortslimitCML_TX_GND { __Type = V; }
            vshortslimitCML_TX_PWR { __Type = V; }
            vshortslimitPWR { __Type = V; }
            VMSgb { __Type = V; __Comment = ""; }
            dcZeroCurrent { __Type = A; __Comment = ""; }
            dcZeroVoltage { __Type = V; __Comment = ""; }
            IOH_Iddq { __Type = A; __Comment = ""; }
            IOH_Loose { __Type = A; __Comment = ""; }
            IOH_Spec { __Type = A; __Comment = ""; }
            IOL_Iddq { __Type = A; __Comment = ""; }
            IOL_Loose { __Type = A; __Comment = ""; }
            IOL_Spec { __Type = A; __Comment = ""; }
            VIH_Iddq_CMOS { __Type = V; __Comment = ""; }
            VIH_Iddq_OSC { __Type = V; __Comment = ""; }
            VIH_Iddq_SPFUN { __Type = V; __Comment = ""; }
            VIH_Iddq_TTL { __Type = V; __Comment = ""; }
            VIH_Iddq_WIRE { __Type = V; __Comment = ""; }
            VIH_Loose { __Type = V; __Comment = ""; }
            VIH_Spec { __Type = V; __Comment = ""; }
            VIL_Iddq { __Type = V; __Comment = ""; }
            VIL_Loose { __Type = V; __Comment = ""; }
            VIL_Spec { __Type = V; __Comment = ""; }
            VLoad { __Type = V; __Comment = ""; }
            VOH_Iddq { __Type = V; __Comment = ""; }
            VOH_Loose { __Type = V; __Comment = ""; }
            VOH_Spec { __Type = V; __Comment = ""; }
            VOL_Iddq { __Type = V; __Comment = ""; }
            VOL_Loose { __Type = V; __Comment = ""; }
            VOL_Spec { __Type = V; __Comment = ""; }
            IIHIO_Max { __Type = A; }
            IIHIO_Min { __Type = A; }
            IIH_Max { __Type = A; }
            IIH_Min { __Type = A; }
            IILIO_Max { __Type = A; }
            IILIO_Min { __Type = A; }
            IIL_Max { __Type = A; }
            IIL_Min { __Type = A; }
            IOZH_Max { __Type = A; }
            IOZH_Min { __Type = A; }
            IOZL_Max { __Type = A; }
            IOZL_Min { __Type = A; }
            MAX_RTERM { __Type = Ohm; }
            MIN_RTERM { __Type = Ohm; }
            Resistance__MAX_CML_Input { __Type = Ohm; }
            Resistance__MAX_CML_Output { __Type = Ohm; }
            Resistance__MAX_DIFF { __Type = Ohm; }
            Resistance__MAX_LVDS { __Type = Ohm; }
            Resistance__MIN_CML_Input { __Type = Ohm; }
            Resistance__MIN_CML_Output { __Type = Ohm; }
            Resistance__MIN_DIFF { __Type = Ohm; }
            Resistance__MIN_LVDS { __Type = Ohm; }
            VForce_High_3P3V { __Type = V; }
            VForce_Low { __Type = V; }
            VForce_TermResistance { __Type = V; }
            VOH_Max_CMOS { __Type = V; }
            VOH_Max_SPFUN { __Type = V; }
            VOH_Min_CMOS { __Type = V; }
            VOH_Min_SPFUN { __Type = V; }
            VOL_Max_CMOS { __Type = V; }
            VOL_Max_SPFUN { __Type = V; }
            VOL_Min_CMOS { __Type = V; }
            VOL_Min_SPFUN { __Type = V; }
            IDDQ_MAX_VBAT_VBOXLO { __Type = A; }
            IDDQ_MAX_VBAT_VBURNIN { __Type = A; }
            IDDQ_MAX_VBAT_VMAX { __Type = A; }
            IDDQ_MAX_VDDAR_VBOXLO { __Type = A; }
            IDDQ_MAX_VDDAR_VBURNIN { __Type = A; }
            IDDQ_MAX_VDDAR_VMAX { __Type = A; }
            IDDQ_MAX_VDDA_VBOXLO { __Type = A; }
            IDDQ_MAX_VDDA_VBURNIN { __Type = A; }
            IDDQ_MAX_VDDA_VMAX { __Type = A; }
            IDDQ_MAX_VDDEEPROM_VBOXLO { __Type = A; }
            IDDQ_MAX_VDDEEPROM_VBURNIN { __Type = A; }
            IDDQ_MAX_VDDEEPROM_VMAX { __Type = A; }
            IDDQ_MAX_VDDPGM_VBOXLO { __Type = A; }
            IDDQ_MAX_VDDPGM_VBURNIN { __Type = A; }
            IDDQ_MAX_VDDPGM_VMAX { __Type = A; }
            IDDQ_MAX_VDDS_VBOXLO { __Type = A; }
            IDDQ_MAX_VDDS_VBURNIN { __Type = A; }
            IDDQ_MAX_VDDS_VMAX { __Type = A; }
            IDDQ_MAX_VDD_VBOXLO { __Type = A; }
            IDDQ_MAX_VDD_VBURNIN { __Type = A; }
            IDDQ_MAX_VDD_VMAX { __Type = A; }
            IDDQ_MAX_VNWA_VBOXLO { __Type = A; }
            IDDQ_MAX_VNWA_VBURNIN { __Type = A; }
            IDDQ_MAX_VNWA_VMAX { __Type = A; }
            IDDQ_MAX_VPP_VBOXLO { __Type = A; }
            IDDQ_MAX_VPP_VBURNIN { __Type = A; }
            IDDQ_MAX_VPP_VMAX { __Type = A; }
            IDDQ_MIN_VBAT_VBOXLO { __Type = A; }
            IDDQ_MIN_VBAT_VBURNIN { __Type = A; }
            IDDQ_MIN_VBAT_VMAX { __Type = A; }
            IDDQ_MIN_VDDAR_VBOXLO { __Type = A; }
            IDDQ_MIN_VDDAR_VBURNIN { __Type = A; }
            IDDQ_MIN_VDDAR_VMAX { __Type = A; }
            IDDQ_MIN_VDDA_VBOXLO { __Type = A; }
            IDDQ_MIN_VDDA_VBURNIN { __Type = A; }
            IDDQ_MIN_VDDA_VMAX { __Type = A; }
            IDDQ_MIN_VDDEEPROM_VBOXLO { __Type = A; }
            IDDQ_MIN_VDDEEPROM_VBURNIN { __Type = A; }
            IDDQ_MIN_VDDEEPROM_VMAX { __Type = A; }
            IDDQ_MIN_VDDPGM_VBOXLO { __Type = A; }
            IDDQ_MIN_VDDPGM_VBURNIN { __Type = A; }
            IDDQ_MIN_VDDPGM_VMAX { __Type = A; }
            IDDQ_MIN_VDDS_VBOXLO { __Type = A; }
            IDDQ_MIN_VDDS_VBURNIN { __Type = A; }
            IDDQ_MIN_VDDS_VMAX { __Type = A; }
            IDDQ_MIN_VDD_VBOXLO { __Type = A; }
            IDDQ_MIN_VDD_VBURNIN { __Type = A; }
            IDDQ_MIN_VDD_VMAX { __Type = A; }
            IDDQ_MIN_VNWA_VBOXLO { __Type = A; }
            IDDQ_MIN_VNWA_VBURNIN { __Type = A; }
            IDDQ_MIN_VNWA_VMAX { __Type = A; }
            IDDQ_MIN_VPP_VBOXLO { __Type = A; }
            IDDQ_MIN_VPP_VBURNIN { __Type = A; }
            IDDQ_MIN_VPP_VMAX { __Type = A; }
            supplySeqStepSize { __Type = V; }
            supplySeqStepDelay { __Type = s; }
            Vsr { __Type = V; }
            SR_ntarget_nand { __Type = SCALAR; }
            SR_ntarget_nor { __Type = SCALAR; }
            Iddq_DeltaLimit_VDD { __Type = A; }
            Iddq_DeltaLimit_VDDA { __Type = A; }
            Iddq_DeltaLimit_VDDAR { __Type = A; }
            Iddq_DeltaLimit_VDDS { __Type = A; }
            Iddq_DriftLimit_VDD { __Type = A; }
            Iddq_DriftLimit_VDDA { __Type = A; }
            Iddq_DriftLimit_VDDAR { __Type = A; }
            Iddq_DriftLimit_VDDS { __Type = A; }
    }
}

        /***********************************************************/
        /***     Declare global PS variables with type info      ***/
        /***********************************************************/
        /***                                                     ***/
        /***  This section declares the Globally available       ***/
        /***  PS specifications that will be used in the program.***/
        /***  Type      = Type of value (SCALAR, V, A, s, etc)   ***/
        /***                                                     ***/
        /***********************************************************/

__Spec PSSpecs {
    __Category CommonPSdata {
        twMCC_V = "''";
        vddCond = "''";
        fakeV = "0V";
        VDD_PS = "0V + fakeV {for fake char axis}";
        VDDEEPROM_PS = "0V + fakeV {for fake char axis}";
        VDDPGM_PS = "0V + fakeV {for fake char axis}";
        VNWA_PS = "0V + fakeV {for fake char axis}";
        VDDAR_PS = "0V + fakeV {for fake char axis}";
        VBAT_PS = "0V + fakeV {for fake char axis}";
        VDDS_PS = "0V + fakeV {for fake char axis}";
        VDDA_PS = "0V + fakeV {for fake char axis}";
        VPP_PS = "0V + fakeV {for fake char axis}";
        Domain_3P3V_PS = "0V + fakeV {for fake char axis}";
        charEn_V_1_2_PS = "FALSE";
        charID_V_1_2_PS = "'A'";
        charEn_V_3_3_PS = "FALSE";
        charID_V_3_3_PS = "'B'";
        charEn_VDD_PS = "FALSE";
        charID_VDD_PS = "'C'";
        charEn_VDDEEPROM_PS = "FALSE";
        charID_VDDEEPROM_PS = "'D'";
        charEn_VDDPGM_PS = "FALSE";
        charID_VDDPGM_PS = "'E'";
        charEn_VNWA_PS = "FALSE";
        charID_VNWA_PS = "'F'";
        charEn_VDDAR_PS = "FALSE";
        charID_VDDAR_PS = "'G'";
        charEn_VBAT_PS = "FALSE";
        charID_VBAT_PS = "'H'";
        charEn_VDDS_PS = "FALSE";
        charID_VDDS_PS = "'I'";
        charEn_VDDA_PS = "FALSE";
        charID_VDDA_PS = "'J'";
        charEn_VPP_PS = "FALSE";
        charID_VPP_PS = "'K'";
        charEn_Domain_3P3V_PS = "FALSE";
        charID_Domain_3P3V_PS = "'L'";
        CharVoltageStep = "10mV";
    }
    __Category PS_VEfuseP {
        __Inherit CommonPSdata;
        twMCC_V = "'B'";
        vddCond = "'VEfuseP'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VEfuseP + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VEfuseP";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VEfuseP + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VEfuseP";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VEfuseP + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VEfuseP";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VEfuseP + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VEfuseP";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VEfuseP + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VEfuseP";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VEfuseP + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VEfuseP";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VEfuseP + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VEfuseP";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VEfuseP + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VEfuseP";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VEfuseP + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VEfuseP";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VEfuseP + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VEfuseP";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_VEfuseR {
        __Inherit CommonPSdata;
        twMCC_V = "'D'";
        vddCond = "'VEfuseR'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VEfuseR + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VEfuseR";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VEfuseR + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VEfuseR";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VEfuseR + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VEfuseR";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VEfuseR + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VEfuseR";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VEfuseR + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VEfuseR";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VEfuseR + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VEfuseR";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VEfuseR + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VEfuseR";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VEfuseR + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VEfuseR";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VEfuseR + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VEfuseR";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VEfuseR + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VEfuseR";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vboxhi {
        __Inherit CommonPSdata;
        twMCC_V = "'H'";
        vddCond = "'Vboxhi'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vboxhi + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vboxhi";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vboxhi + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vboxhi";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vboxhi + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vboxhi";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vboxhi + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vboxhi";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vboxhi + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vboxhi";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vboxhi + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vboxhi";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vboxhi + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vboxhi";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vboxhi + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vboxhi";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vboxhi + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vboxhi";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vboxhi + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vboxhi";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_VboxhiM {
        __Inherit CommonPSdata;
        twMCC_V = "'I'";
        vddCond = "'VboxhiM'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VboxhiM + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VboxhiM";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VboxhiM + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VboxhiM";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VboxhiM + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VboxhiM";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VboxhiM + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VboxhiM";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VboxhiM + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VboxhiM";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VboxhiM + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VboxhiM";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VboxhiM + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VboxhiM";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VboxhiM + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VboxhiM";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VboxhiM + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VboxhiM";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VboxhiM + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VboxhiM";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_VboxhiP {
        __Inherit CommonPSdata;
        twMCC_V = "'J'";
        vddCond = "'VboxhiP'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VboxhiP + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VboxhiP";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VboxhiP + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VboxhiP";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VboxhiP + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VboxhiP";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VboxhiP + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VboxhiP";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VboxhiP + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VboxhiP";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VboxhiP + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VboxhiP";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VboxhiP + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VboxhiP";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VboxhiP + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VboxhiP";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VboxhiP + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VboxhiP";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VboxhiP + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VboxhiP";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vboxlo {
        __Inherit CommonPSdata;
        twMCC_V = "'L'";
        vddCond = "'Vboxlo'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vboxlo + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vboxlo";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vboxlo + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vboxlo";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vboxlo + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vboxlo";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vboxlo + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vboxlo";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vboxlo + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vboxlo";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vboxlo + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vboxlo";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vboxlo + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vboxlo";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vboxlo + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vboxlo";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vboxlo + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vboxlo";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vboxlo + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vboxlo";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_VboxloM {
        __Inherit CommonPSdata;
        twMCC_V = "'K'";
        vddCond = "'VboxloM'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VboxloM + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VboxloM";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VboxloM + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VboxloM";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VboxloM + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VboxloM";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VboxloM + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VboxloM";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VboxloM + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VboxloM";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VboxloM + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VboxloM";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VboxloM + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VboxloM";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VboxloM + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VboxloM";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VboxloM + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VboxloM";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VboxloM + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VboxloM";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_VboxloP {
        __Inherit CommonPSdata;
        twMCC_V = "'O'";
        vddCond = "'VboxloP'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_VboxloP + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_VboxloP";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_VboxloP + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_VboxloP";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_VboxloP + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_VboxloP";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_VboxloP + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_VboxloP";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_VboxloP + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_VboxloP";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_VboxloP + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_VboxloP";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_VboxloP + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_VboxloP";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_VboxloP + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_VboxloP";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_VboxloP + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_VboxloP";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_VboxloP + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_VboxloP";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vburnin {
        __Inherit CommonPSdata;
        twMCC_V = "'P'";
        vddCond = "'Vburnin'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vburnin + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vburnin";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vburnin + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vburnin";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vburnin + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vburnin";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vburnin + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vburnin";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vburnin + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vburnin";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vburnin + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vburnin";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vburnin + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vburnin";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vburnin + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vburnin";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vburnin + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vburnin";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vburnin + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vburnin";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vmax {
        __Inherit CommonPSdata;
        twMCC_V = "'X'";
        vddCond = "'Vmax'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vmax + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vmax";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vmax + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vmax";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vmax + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vmax";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vmax + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vmax";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vmax + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vmax";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vmax + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vmax";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vmax + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vmax";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vmax + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vmax";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vmax + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vmax";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vmax + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vmax";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vmin {
        __Inherit CommonPSdata;
        twMCC_V = "'M'";
        vddCond = "'Vmin'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vmin + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vmin";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vmin + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vmin";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vmin + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vmin";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vmin + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vmin";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vmin + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vmin";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vmin + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vmin";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vmin + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vmin";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vmin + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vmin";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vmin + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vmin";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vmin + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vmin";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vnom {
        __Inherit CommonPSdata;
        twMCC_V = "'N'";
        vddCond = "'Vnom'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vnom + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vnom";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vnom + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vnom";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vnom + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vnom";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vnom + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vnom";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vnom + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vnom";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vnom + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vnom";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vnom + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vnom";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vnom + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vnom";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vnom + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vnom";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vnom + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vnom";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __Category PS_Vstress {
        __Inherit CommonPSdata;
        twMCC_V = "'Q'";
        vddCond = "'Vstress'";
        VDD_PS.Min = "0V";
        VDD_PS.Typ = "VDD_Vstress + fakeV {for fake char axis}";
        VDD_PS.Max = "VDD_Vstress";
        VDDEEPROM_PS.Min = "0V";
        VDDEEPROM_PS.Typ = "VDDEEPROM_Vstress + fakeV {for fake char axis}";
        VDDEEPROM_PS.Max = "VDDEEPROM_Vstress";
        VDDPGM_PS.Min = "0V";
        VDDPGM_PS.Typ = "VDDPGM_Vstress + fakeV {for fake char axis}";
        VDDPGM_PS.Max = "VDDPGM_Vstress";
        VNWA_PS.Min = "0V";
        VNWA_PS.Typ = "VNWA_Vstress + fakeV {for fake char axis}";
        VNWA_PS.Max = "VNWA_Vstress";
        VDDAR_PS.Min = "0V";
        VDDAR_PS.Typ = "VDDAR_Vstress + fakeV {for fake char axis}";
        VDDAR_PS.Max = "VDDAR_Vstress";
        VBAT_PS.Min = "0V";
        VBAT_PS.Typ = "VBAT_Vstress + fakeV {for fake char axis}";
        VBAT_PS.Max = "VBAT_Vstress";
        VDDS_PS.Min = "0V";
        VDDS_PS.Typ = "VDDS_Vstress + fakeV {for fake char axis}";
        VDDS_PS.Max = "VDDS_Vstress";
        VDDA_PS.Min = "0V";
        VDDA_PS.Typ = "VDDA_Vstress + fakeV {for fake char axis}";
        VDDA_PS.Max = "VDDA_Vstress";
        VPP_PS.Min = "0V";
        VPP_PS.Typ = "VPP_Vstress + fakeV {for fake char axis}";
        VPP_PS.Max = "VPP_Vstress";
        Domain_3P3V_PS.Min = "0V";
        Domain_3P3V_PS.Typ = "Domain_3P3V_Vstress + fakeV {for fake char axis}";
        Domain_3P3V_PS.Max = "Domain_3P3V_Vstress";
        charEn_V_1_2_PS = "TRUE";
        charEn_V_3_3_PS = "TRUE";
    }
    __ParamGlobals {
            twMCC_V { __Type = STRING; __Comment = "Voltage portion of testware variable"; }
            vddCond { __Type = STRING; __Comment = "VDD condition output to the dataViewer"; }
            fakeV { __Type = V; __Comment = "Voltage used in a fake axis to allow characterization searches"; }
            V_1_2_PS { __Type = V; }
            V_3_3_PS { __Type = V; }
            VDD_PS { __Type = V; }
            VDDEEPROM_PS { __Type = V; }
            VDDPGM_PS { __Type = V; }
            VNWA_PS { __Type = V; }
            VDDAR_PS { __Type = V; }
            VBAT_PS { __Type = V; }
            VDDS_PS { __Type = V; }
            VDDA_PS { __Type = V; }
            VPP_PS { __Type = V; }
            Domain_3P3V_PS { __Type = V; }
            charEn_V_1_2_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_V_1_2_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_V_3_3_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_V_3_3_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDD_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDD_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDDEEPROM_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDDEEPROM_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDDPGM_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDDPGM_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VNWA_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VNWA_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDDAR_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDDAR_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VBAT_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VBAT_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDDS_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDDS_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VDDA_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VDDA_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_VPP_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_VPP_PS { __Type = STRING; __Comment = "TBD"; }
            charEn_Domain_3P3V_PS { __Type = BOOLEAN; __Comment = "TBD"; }
            charID_Domain_3P3V_PS { __Type = STRING; __Comment = "TBD"; }
            CharVoltageStep { __Type = V; }
    }
}
__Spec CTSpec {
    __Category CTData {
        VStart = "-1.5V";
        VStop = "1.5V";
        VStep = "25mV";
        PinNum = "0";
    }
    __ParamGlobals {
            VStart { __Type = V; }
            VStop { __Type = V; }
            VStep { __Type = V; }
            PinNum { __Type = SCALAR; }
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/dctable.evo                                    */
/* Creation Date  : Tue Jan  3 17:12:18 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/****************************************************/
/*** ZeroPins_ZeroSupplies_RampDown Levels Object ***/
/****************************************************/
__Levels DCsetup_ZeroPins_ZeroSupplies_RampDown {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "10mA"; }
    	Ioh = __Expression { __String = "-10mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "1"; }
    	evRefValue = __Expression { __String = "0V"; }
    	evRefRange = __Expression { __String = "0V"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "4"; }
    	PowerSupply = __Expression { __String = "0V"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "4"; }
    	PowerSupply = __Expression { __String = "0V"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "3"; }
    	PowerSupply = __Expression { __String = "0V"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	PowerSupply = __Expression { __String = "0V"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "2"; }
    	evRefValue = __Expression { __String = "0V"; }
    	evRefRange = __Expression { __String = "0V"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	evRefValue = __Expression { __String = "0V"; }
    	evRefRange = __Expression { __String = "0V"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "2"; }
    	evRefValue = __Expression { __String = "0V"; }
    	evRefRange = __Expression { __String = "0V"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "2"; }
    	evRefValue = __Expression { __String = "0V"; }
    	evRefRange = __Expression { __String = "0V"; }
    }
}

/**************************************/
/* DCsetup_allZero                    */
/**************************************/
__Levels DCsetup_allZero {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "dcZeroVoltage"; }
    	Vih = __Expression { __String = "dcZeroVoltage"; }
    	Vol = __Expression { __String = "dcZeroVoltage"; }
    	Voh = __Expression { __String = "dcZeroVoltage"; }
    	Iol = __Expression { __String = "10mA"; }
    	Ioh = __Expression { __String = "-10mA"; }
    	Vref = __Expression { __String = "dcZeroVoltage"; }
    	__Delay = __Expression { __String = "0mS"; }
    }
}

/**************************************/
/* DCsetup_Iddq                       */
/**************************************/
__Levels DCsetup_Iddq {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_CMOS"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[11] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_OSC"; }
    	Vol = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_OSC)-0.05*(VIH_Iddq_OSC-VIL_Iddq) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_OSC)+0.05*(VIH_Iddq_OSC-VIL_Iddq) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[12] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[13] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_SPFUN"; }
    	Vol = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_SPFUN)-0.05*(VIH_Iddq_SPFUN-VIL_Iddq) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_SPFUN)+0.05*(VIH_Iddq_SPFUN-VIL_Iddq) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[14] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_SPFUN"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[15] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[16] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_TTL"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[17] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_WIRE"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/**************************************/
/* DCsetup_Iddq_PostExecution         */
/**************************************/
__Levels DCsetup_Iddq_PostExecution {
    __Column[0] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "6-1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "6-1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "6-2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "6-2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "6-3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "6-3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "6-3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "6-3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "6-4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_CMOS"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_OSC"; }
    	Vol = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_OSC)-0.05*(VIH_Iddq_OSC-VIL_Iddq) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_OSC)+0.05*(VIH_Iddq_OSC-VIL_Iddq) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[11] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[12] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_SPFUN"; }
    	Vol = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_SPFUN)-0.05*(VIH_Iddq_SPFUN-VIL_Iddq) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Iddq+VIH_Iddq_SPFUN)+0.05*(VIH_Iddq_SPFUN-VIL_Iddq) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[13] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_SPFUN"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[14] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[15] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_TTL"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[16] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "6-5"; }
    	Vil = __Expression { __String = "VIL_Iddq"; }
    	Vih = __Expression { __String = "VIH_Iddq_WIRE"; }
    	Vol = __Expression { __String = "VOL_Iddq"; }
    	Voh = __Expression { __String = "VOH_Iddq"; }
    	Iol = __Expression { __String = "IOL_Iddq"; }
    	Ioh = __Expression { __String = "IOH_Iddq"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/**************************************/
/* DCsetup_Loose                      */
/**************************************/
__Levels DCsetup_Loose {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[11] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)-0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)+0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[12] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[13] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)-0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)+0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[14] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[15] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[16] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[17] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/***************************************/
/*** CalibrationLevels Levels Object ***/
/***************************************/
__Levels CalibrationLevels {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "CALPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[2] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)-0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)+0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[3] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VOL_Loose"; }
    	Vih = __Expression { __String = "VOH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[4] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)-0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Loose+VIH_Loose)+0.05*(VIH_Loose-VIL_Loose) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VOL_Loose"; }
    	Vih = __Expression { __String = "VOH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "VIL_Loose"; }
    	Vih = __Expression { __String = "VIH_Loose"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "iolCal"; }
    	Ioh = __Expression { __String = "iohCal"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/**************************************/
/* DCsetup_Spec                       */
/**************************************/
__Levels DCsetup_Spec {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[11] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)-0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)+0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[12] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[13] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)-0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)+0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[14] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[15] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[16] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[17] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Spec"; }
    	Voh = __Expression { __String = "VOH_Spec"; }
    	Iol = __Expression { __String = "IOL_Spec"; }
    	Ioh = __Expression { __String = "IOH_Spec"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/**************************************/
/* DCsetup_SpecIn                     */
/**************************************/
__Levels DCsetup_SpecIn {
    __Column[0] {
    	__LevelsColumnType = evDigitalType;
    	__Title = SetPins_ZeroLevels;
    	__Group = __Expression { __String = "ALLPINS"; }
    	ExecSeq = __Expression { __String = "0"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0mA"; }
    	Ioh = __Expression { __String = "-0mA"; }
    	Vref = __Expression { __String = "0V"; }
    }
    __Column[1] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDD"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDD_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[2] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDAR"; }
    	ExecSeq = __Expression { __String = "1"; }
    	PowerSupply = __Expression { __String = "VDDAR_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[3] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDS"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDS_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[4] {
    	__LevelsColumnType = evSeqPowerType;
    	__Group = __Expression { __String = "VDDA"; }
    	ExecSeq = __Expression { __String = "2"; }
    	PowerSupply = __Expression { __String = "VDDA_PS"; }
    	StepSize = __Expression { __String = "supplySeqStepSize"; }
    	StepDelay = __Expression { __String = "supplySeqStepDelay"; }
    }
    __Column[5] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDPGM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDPGM_PS"; }
    	evRefRange = __Expression { __String = "VDDPGM_PS"; }
    }
    __Column[6] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VDDEEPROM"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VDDEEPROM_PS"; }
    	evRefRange = __Expression { __String = "VDDEEPROM_PS"; }
    }
    __Column[7] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VNWA"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VNWA_PS"; }
    	evRefRange = __Expression { __String = "VNWA_PS"; }
    }
    __Column[8] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VPP"; }
    	ExecSeq = __Expression { __String = "3"; }
    	evRefValue = __Expression { __String = "VPP_PS"; }
    	evRefRange = __Expression { __String = "VPP_PS"; }
    }
    __Column[9] {
    	__LevelsColumnType = evDCRefType;
    	__Group = __Expression { __String = "VBAT"; }
    	ExecSeq = __Expression { __String = "4"; }
    	evRefValue = __Expression { __String = "VBAT_PS"; }
    	evRefRange = __Expression { __String = "VBAT_PS"; }
    }
    __Column[10] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_CMOS"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[11] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)-0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)+0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[12] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_OSC"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[13] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IN_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)-0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	Voh = __Expression { __String = "0.5*(VIL_Spec+VIH_Spec)+0.05*(VIH_Spec-VIL_Spec) {for debug in capture tool}"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[14] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[15] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_OUT_SPFUN"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[16] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_TTL"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[17] {
    	__LevelsColumnType = evDigitalType;
    	__Group = __Expression { __String = "FUNC_IO_WIRE"; }
    	ExecSeq = __Expression { __String = "5"; }
    	Vil = __Expression { __String = "VIL_Spec"; }
    	Vih = __Expression { __String = "VIH_Spec"; }
    	Vol = __Expression { __String = "VOL_Loose"; }
    	Voh = __Expression { __String = "VOH_Loose"; }
    	Iol = __Expression { __String = "IOL_Loose"; }
    	Ioh = __Expression { __String = "IOH_Loose"; }
    	Vref = __Expression { __String = "VLoad"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_1 */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_1 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IOZ_ODD_dcpara_ioz_pd_PM4"; }
    	evForceValue = __Expression { __String = "VForce_Low"; }
    	evForceRange = __Expression { __String = "VForce_Low"; }
    	evMeasureRange = __Expression { __String = "IOZL_Max"; }
    	evLowClamp = __Expression { __String = "IOZL_Min - fabs(IOZL_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IOZL_Max + fabs(IOZL_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IOZL_Min"; }
    	evHighLimit = __Expression { __String = "IOZL_Max"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_2 */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_2 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IOZ_ODD_dcpara_ioz_pd_PM4"; }
    	evForceValue = __Expression { __String = "VForce_High_3P3V"; }
    	evForceRange = __Expression { __String = "VForce_High_3P3V"; }
    	evMeasureRange = __Expression { __String = "IOZH_Max"; }
    	evLowClamp = __Expression { __String = "IOZH_Min - fabs(IOZH_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IOZH_Max + fabs(IOZH_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IOZH_Min"; }
    	evHighLimit = __Expression { __String = "IOZH_Max"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIHPD_UNK_dcpara_ioz_pd_PM3"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "dcZeroCurrent"; }
    	evLowClamp = __Expression { __String = "dcZeroCurrent - fabs(dcZeroCurrent * 5%)"; }
    	evHighClamp = __Expression { __String = "dcZeroCurrent + fabs(dcZeroCurrent * 5%)"; }
    	evLowLimit = __Expression { __String = "dcZeroCurrent"; }
    	evHighLimit = __Expression { __String = "dcZeroCurrent"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO_4    */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO_4 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IILPU_UNK_TTL_dcpara_PM1"; }
    	evForceValue = __Expression { __String = "VIL_Loose"; }
    	evForceRange = __Expression { __String = "VIL_Loose"; }
    	evMeasureRange = __Expression { __String = "dcZeroCurrent"; }
    	evLowClamp = __Expression { __String = "dcZeroCurrent - fabs(dcZeroCurrent * 5%)"; }
    	evHighClamp = __Expression { __String = "dcZeroCurrent + fabs(dcZeroCurrent * 5%)"; }
    	evLowLimit = __Expression { __String = "dcZeroCurrent"; }
    	evHighLimit = __Expression { __String = "dcZeroCurrent"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO_5    */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO_5 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IILPU_UNK_CMOS_dcpara_PM1"; }
    	evForceValue = __Expression { __String = "VIL_Loose"; }
    	evForceRange = __Expression { __String = "VIL_Loose"; }
    	evMeasureRange = __Expression { __String = "dcZeroCurrent"; }
    	evLowClamp = __Expression { __String = "dcZeroCurrent - fabs(dcZeroCurrent * 5%)"; }
    	evHighClamp = __Expression { __String = "dcZeroCurrent + fabs(dcZeroCurrent * 5%)"; }
    	evLowLimit = __Expression { __String = "dcZeroCurrent"; }
    	evHighLimit = __Expression { __String = "dcZeroCurrent"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO_6    */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO_6 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIOH_dcpara_PM3"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "IIHIO_Max"; }
    	evLowClamp = __Expression { __String = "IIHIO_Min - fabs(IIHIO_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IIHIO_Max + fabs(IIHIO_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IIHIO_Min"; }
    	evHighLimit = __Expression { __String = "IIHIO_Max"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO_7    */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO_7 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIHPD_UNK_CMOS_dcpara_PM3"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "dcZeroCurrent"; }
    	evLowClamp = __Expression { __String = "dcZeroCurrent - fabs(dcZeroCurrent * 5%)"; }
    	evHighClamp = __Expression { __String = "dcZeroCurrent + fabs(dcZeroCurrent * 5%)"; }
    	evLowLimit = __Expression { __String = "dcZeroCurrent"; }
    	evHighLimit = __Expression { __String = "dcZeroCurrent"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO_8    */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO_8 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIHPD_UNK_TTL_dcpara_PM3"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "dcZeroCurrent"; }
    	evLowClamp = __Expression { __String = "dcZeroCurrent - fabs(dcZeroCurrent * 5%)"; }
    	evHighClamp = __Expression { __String = "dcZeroCurrent + fabs(dcZeroCurrent * 5%)"; }
    	evLowLimit = __Expression { __String = "dcZeroCurrent"; }
    	evHighLimit = __Expression { __String = "dcZeroCurrent"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_DCPARA_LeakIO      */
/**************************************/
__Levels DCsetup_PinLeak_DCPARA_LeakIO {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIOL_dcpara_PM1"; }
    	evForceValue = __Expression { __String = "VIL_Loose"; }
    	evForceRange = __Expression { __String = "VIL_Loose"; }
    	evMeasureRange = __Expression { __String = "IILIO_Max"; }
    	evLowClamp = __Expression { __String = "IILIO_Min - fabs(IILIO_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IILIO_Max + fabs(IILIO_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IILIO_Min"; }
    	evHighLimit = __Expression { __String = "IILIO_Max"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_LeakIInHi          */
/**************************************/
__Levels DCsetup_PinLeak_LeakIInHi {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIN_EVEN_OSC"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "IIH_Max"; }
    	evLowClamp = __Expression { __String = "IIH_Min - fabs(IIH_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IIH_Max + fabs(IIH_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IIH_Min"; }
    	evHighLimit = __Expression { __String = "IIH_Max"; }
    }
    __Column[1] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIN_EVEN_SPFUN"; }
    	evForceValue = __Expression { __String = "VIH_Loose"; }
    	evForceRange = __Expression { __String = "VIH_Loose"; }
    	evMeasureRange = __Expression { __String = "IIH_Max"; }
    	evLowClamp = __Expression { __String = "IIH_Min - fabs(IIH_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IIH_Max + fabs(IIH_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IIH_Min"; }
    	evHighLimit = __Expression { __String = "IIH_Max"; }
    }
}

/**************************************/
/* DCsetup_PinLeak_LeakIInLo          */
/**************************************/
__Levels DCsetup_PinLeak_LeakIInLo {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIN_EVEN_OSC"; }
    	evForceValue = __Expression { __String = "VIL_Loose"; }
    	evForceRange = __Expression { __String = "VIL_Loose"; }
    	evMeasureRange = __Expression { __String = "IIL_Max"; }
    	evLowClamp = __Expression { __String = "IIL_Min - fabs(IIL_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IIL_Max + fabs(IIL_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IIL_Min"; }
    	evHighLimit = __Expression { __String = "IIL_Max"; }
    }
    __Column[1] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "LEAK_IIN_EVEN_SPFUN"; }
    	evForceValue = __Expression { __String = "VIL_Loose"; }
    	evForceRange = __Expression { __String = "VIL_Loose"; }
    	evMeasureRange = __Expression { __String = "IIL_Max"; }
    	evLowClamp = __Expression { __String = "IIL_Min - fabs(IIL_Min * 5%)"; }
    	evHighClamp = __Expression { __String = "IIL_Max + fabs(IIL_Max * 5%)"; }
    	evLowLimit = __Expression { __String = "IIL_Min"; }
    	evHighLimit = __Expression { __String = "IIL_Max"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOL_dcpara_ioz_pd_PM2 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOL_dcpara_ioz_pd_PM2 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOL_dcpara_ioz_pd_PM2"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOL_Max_CMOS"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOL_Min_CMOS - max(500mV, fabs(VOL_Min_CMOS * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOL_Max_CMOS + max(500mV, fabs(VOL_Max_CMOS * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOL_Min_CMOS"; }
    	evHighLimit = __Expression { __String = "VOL_Max_CMOS"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOH_dcpara_ioz_pd_PM1 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOH_dcpara_ioz_pd_PM1 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOH_dcpara_ioz_pd_PM1"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOH_Max_CMOS"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOH_Min_CMOS - max(500mV, fabs(VOH_Min_CMOS * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOH_Max_CMOS + max(500mV, fabs(VOH_Max_CMOS * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOH_Min_CMOS"; }
    	evHighLimit = __Expression { __String = "VOH_Max_CMOS"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOL_SPFUN_dcpara_PM2 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOL_SPFUN_dcpara_PM2 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOL_SPFUN_dcpara_PM2"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOL_Max_SPFUN"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOL_Min_SPFUN - max(500mV, fabs(VOL_Min_SPFUN * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOL_Max_SPFUN + max(500mV, fabs(VOL_Max_SPFUN * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOL_Min_SPFUN"; }
    	evHighLimit = __Expression { __String = "VOL_Max_SPFUN"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOH_SPFUN_dcpara_PM4 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOH_SPFUN_dcpara_PM4 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOH_SPFUN_dcpara_PM4"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOH_Max_SPFUN"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOH_Min_SPFUN - max(500mV, fabs(VOH_Min_SPFUN * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOH_Max_SPFUN + max(500mV, fabs(VOH_Max_SPFUN * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOH_Min_SPFUN"; }
    	evHighLimit = __Expression { __String = "VOH_Max_SPFUN"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOH_CMOS_dcpara_PM4 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOH_CMOS_dcpara_PM4 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOH_CMOS_dcpara_PM4"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOH_Max_CMOS"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOH_Min_CMOS - max(500mV, fabs(VOH_Min_CMOS * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOH_Max_CMOS + max(500mV, fabs(VOH_Max_CMOS * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOH_Min_CMOS"; }
    	evHighLimit = __Expression { __String = "VOH_Max_CMOS"; }
    }
}

/**************************************/
/* DCsetup_OutputVoltage_PARA_VOL_CMOS_dcpara_PM2 */
/**************************************/
__Levels DCsetup_OutputVoltage_PARA_VOL_CMOS_dcpara_PM2 {
    __Column[0] {
    	__LevelsColumnType = evDCTestType;
    	__Group = __Expression { __String = "PARA_VOL_CMOS_dcpara_PM2"; }
    	evForceValue = __Expression { __String = "0A"; }
    	evForceRange = __Expression { __String = "0A"; }
    	evMeasureRange = __Expression { __String = "VOL_Max_CMOS"; }
    	evLowClamp = __Expression { __String = "max(-3.25V, VOL_Min_CMOS - max(500mV, fabs(VOL_Min_CMOS * 5%)))"; }
    	evHighClamp = __Expression { __String = "min(7.75V, VOL_Max_CMOS + max(500mV, fabs(VOL_Max_CMOS * 5%)))"; }
    	evLowLimit = __Expression { __String = "VOL_Min_CMOS"; }
    	evHighLimit = __Expression { __String = "VOL_Max_CMOS"; }
    }
}

__Levels CTLevels {
    __Column[0] {
    	__LevelsColumnType = evPowerType;
    	__Title = Power;
    	__Group = __Expression { __String = "ALLSUPPLIES+VREFAN"; }
    	ExecSeq = __Expression { __String = "0"; }
    	PowerSupply = __Expression { __String = "0V"; }
    	__Delay = __Expression { __String = "1ms"; }
    }
    __Column[1] {
    	__LevelsColumnType = evDigitalType;
    	__Title = ALL_PINS;
    	__Group = __Expression { __String = "ALL_PINS"; }
    	ExecSeq = __Expression { __String = "1"; }
    	Vil = __Expression { __String = "0V"; }
    	Vih = __Expression { __String = "0V"; }
    	Vol = __Expression { __String = "0V"; }
    	Voh = __Expression { __String = "0V"; }
    	Iol = __Expression { __String = "0A"; }
    	Ioh = __Expression { __String = "0A"; }
    	Vref = __Expression { __String = "0V"; }
    	__Delay = __Expression { __String = "0s"; }
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/FX1/device.evo                                 */
/* Creation Date  : Tue Jan  3 17:12:22 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


/******************************************************************************/
/***                                                                        ***/
/***    The file device.evo provides the information about what tester      ***/
/***    resources are to be used, how they are to be used, and the          ***/
/***    connection map of tester resources to device pins                   ***/
/***                                                                        ***/
/******************************************************************************/

/*****************/
/*** Pin Types ***/
/*****************/
__PinType I {
    __Type = Digital;
    __Direction = Input;
    __Mode = NoTerm;
    __Mux = __False;
}
__PinType O {
    __Type = Digital;
    __Direction = Output;
    __Mode = NoTerm;
    __Mux = __False;
}
__PinType IO {
    __Type = Digital;
    __Direction = Bidirect;
    __Mode = NoTerm;
    __Mux = __False;
}
__PinType NC {
    __Type = NullPin;
}
__PinType NCI {
    __Type = NullPin;
}
__PinType NCO {
    __Type = NullPin;
}
__PinType NCIO {
    __Type = NullPin;
}
__PinType ANALOG_I {
    __Type = AnalogPin;
    __Direction = Input;
}
__PinType ANALOG_O {
    __Type = AnalogPin;
    __Direction = Output;
}
__PinType ANALOG_IO {
    __Type = AnalogPin;
    __Direction = Bidirect;
}
__PinType MixedSignal_I {
    __Type = Res;
}
__PinType MixedSignal_O {
    __Type = Res;
}
__PinType MixedSignal_IO {
    __Type = Res;
}
__PinType Resource {
    __Type = Res;
}
__PinType DCREF {
    __Type = DCRef;
}
__PinType CBIT {
    __Type = CBit;
}
__PinType DPRO_Pin {
    __Type = Res;
}

__PinType PWR_VDD_Bllizar_PB1 {
    __Type = Power;
    Min {
        PinCurrent = __Expression { __String = "-744mA"; }
        PinVoltage = __Expression { __String = "-1000mV"; }
        LoadComp = __Expression { __String = "2uF"; }
    }
    Max {
        PinCurrent = __Expression { __String = "744mA"; }
        PinVoltage = __Expression { __String = " 6.0V"; }
        LoadComp = __Expression { __String = "2uF"; }
    }
    __SetupSelection = __Expression { __String = "PWR_VDD_Bllizar_PB1.Select.Safe.e4"; }
                                                                 
}

__PinType PWR_VREFAN_Bllizar_PB1 {
    __Type = Power;
}
__PinType PWR_VDDAR_Bllizar_PB1 {
    __Type = Power;
    Min {
        PinCurrent = __Expression { __String = "-82mA"; }
    }
    Max {
        PinCurrent = __Expression { __String = "82mA"; }
        LoadComp = __Expression { __String = "50uF"; }
    }
    __SetupSelection = __Expression { __String = "PWR_VDDAR_Bllizar_PB1.Select.Safe.e4"; }
                                                                 
}

__PinType PWR_VDDS_Bllizar_PB1 {
    __Type = Power;
    Min {
        PinCurrent = __Expression { __String = "-1.572A"; }
    }
    Max {
        PinCurrent = __Expression { __String = "1.572A"; }
        LoadComp = __Expression { __String = "1uF"; }
    }
    __SetupSelection = __Expression { __String = "PWR_VDDS_Bllizar_PB1.Select.Safe.e4"; }
                                                                 
}

__PinType PWR_VDDA_Bllizar_PB1 {
    __Type = Power;
    Min {
        PinCurrent = __Expression { __String = "-100mA"; }
    }
    Max {
        PinCurrent = __Expression { __String = "100mA"; }
        LoadComp = __Expression { __String = "1uF"; }
    }
    __SetupSelection = __Expression { __String = "PWR_VDDA_Bllizar_PB1.Select.Safe.e4"; }
                                                                 
}

__PinType PWR_VSS_Bllizar_PB1 {
    __Type = Power;
}
__AdapterBoard Bllizar_PB1_AdapterBoard {
	__Pin { __Name = AIN15_1; __Ppid = "  B2"; __XCoord = (200,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 1; }
	}
	__Pin { __Name = AIN14_2; __Ppid = "  B1"; __XCoord = (100,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 2; }
	}
	__Pin { __Name = AIN13_3; __Ppid = "  C2"; __XCoord = (200,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 3; }
	}
	__Pin { __Name = AIN12_4; __Ppid = "  C1"; __XCoord = (100,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 4; }
	}
	__Pin { __Name = PQ0_5; __Ppid = "  D4"; __XCoord = (400,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 5; }
	}
	__Pin { __Name = PQ1_6; __Ppid = "  E4"; __XCoord = (400,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 6; }
	}
	__Pin { __Name = rbias_9; __Ppid = "   9"; __XCoord = (400,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 7; }
	}
	__Pin { __Name = PB6_10; __Ppid = "  F4"; __XCoord = (400,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 8; }
	}
	__Pin { __Name = PB7_15; __Ppid = "  F3"; __XCoord = (300,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 9; }
	}
	__Pin { __Name = PQ2_16; __Ppid = "  F5"; __XCoord = (500,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 10; }
	}
	__Pin { __Name = AIN00_17; __Ppid = "  E2"; __XCoord = (200,500); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_1; }
	}
	__Pin { __Name = AIN01_18; __Ppid = "  E1"; __XCoord = (100,500); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_2; }
	}
	__Pin { __Name = AIN02_19; __Ppid = "  F2"; __XCoord = (200,600); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_257; }
	}
	__Pin { __Name = ATEST; __Ppid = "  F1"; __XCoord = (100,600); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_3; }
	}
	__Pin { __Name = AIN16_23; __Ppid = "  G2"; __XCoord = (200,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 11; }
	}
	__Pin { __Name = AIN17_24; __Ppid = "  G1"; __XCoord = (100,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 12; }
	}
	__Pin { __Name = AIN18_25; __Ppid = "  H1"; __XCoord = (100,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 13; }
	}
	__Pin { __Name = AIN19_26; __Ppid = "  H2"; __XCoord = (200,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 114; }
	}
	__Pin { __Name = PN2_27; __Ppid = "  G3"; __XCoord = (300,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 15; }
	}
	__Pin { __Name = PH7_28; __Ppid = "  G4"; __XCoord = (400,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 16; }
	}
	__Pin { __Name = PH6_29; __Ppid = "  H3"; __XCoord = (300,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 17; }
	}
	__Pin { __Name = PH5_30; __Ppid = "  H4"; __XCoord = (400,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 18; }
	}
	__Pin { __Name = PH4_35; __Ppid = "  J3"; __XCoord = (300,900); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 129; }
	}
	__Pin { __Name = PH3_36; __Ppid = "  J2"; __XCoord = (200,900); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 19; }
	}
	__Pin { __Name = PH2_37; __Ppid = "  J4"; __XCoord = (400,900); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 20; }
	}
	__Pin { __Name = PH1_40; __Ppid = "  K4"; __XCoord = (400,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 21; }
	}
	__Pin { __Name = PH0_41; __Ppid = "  K3"; __XCoord = (300,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 22; }
	}
	__Pin { __Name = C0_n_42; __Ppid = "  K2"; __XCoord = (200,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 23; }
	}
	__Pin { __Name = C0_p_43; __Ppid = "  K1"; __XCoord = (100,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 24; }
	}
	__Pin { __Name = C1_p_44; __Ppid = "  L1"; __XCoord = (100,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 25; }
	}
	__Pin { __Name = C1_n_45; __Ppid = "  L2"; __XCoord = (200,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 26; }
	}
	__Pin { __Name = o_cpu_done_46; __Ppid = "  L3"; __XCoord = (300,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 27; }
	}
	__Pin { __Name = o_cpu_fail_47; __Ppid = "  M1"; __XCoord = (100,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 28; }
	}
	__Pin { __Name = PA2_48; __Ppid = "  M2"; __XCoord = (200,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 29; }
	}
	__Pin { __Name = PA3_49; __Ppid = "  M3"; __XCoord = (300,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 30; }
	}
	__Pin { __Name = PA4_50; __Ppid = "  L4"; __XCoord = (400,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 31; }
	}
	__Pin { __Name = PA5_51; __Ppid = "  N1"; __XCoord = (100,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 32; }
	}
	__Pin { __Name = PA6_54; __Ppid = "  M4"; __XCoord = (400,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 33; }
	}
	__Pin { __Name = PA7_55; __Ppid = "  N2"; __XCoord = (200,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 34; }
	}
	__Pin { __Name = PG7_56; __Ppid = "  N3"; __XCoord = (300,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 35; }
	}
	__Pin { __Name = PG6_57; __Ppid = "  N4"; __XCoord = (400,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 36; }
	}
	__Pin { __Name = PP2_58; __Ppid = "  M5"; __XCoord = (500,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 37; }
	}
	__Pin { __Name = PP5_59; __Ppid = "  L5"; __XCoord = (500,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 38; }
	}
	__Pin { __Name = RAWPOR_n_60; __Ppid = "  K6"; __XCoord = (600,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 39; }
	}
	__Pin { __Name = PQ3_61; __Ppid = "  N5"; __XCoord = (500,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 40; }
	}
	__Pin { __Name = PQ4_62; __Ppid = "  N6"; __XCoord = (600,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 41; }
	}
	__Pin { __Name = PQ5_63; __Ppid = "  K5"; __XCoord = (500,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 42; }
	}
	__Pin { __Name = PQ6_64; __Ppid = "  M6"; __XCoord = (600,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 43; }
	}
	__Pin { __Name = PQ7_65; __Ppid = "  L6"; __XCoord = (600,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 44; }
	}
	__Pin { __Name = FLTP1; __Ppid = "  M7"; __XCoord = (700,1200); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_4; }
	}
	__Pin { __Name = FLTP2; __Ppid = "  N7"; __XCoord = (700,1300); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_5; }
	}
	__Pin { __Name = FLASH3_70; __Ppid = "  70"; __XCoord = (700,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 45; }
	}
	__Pin { __Name = FLASH4_71; __Ppid = "  71"; __XCoord = (700,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 47; }
	}
	__Pin { __Name = FLASH5_72; __Ppid = "  72"; __XCoord = (700,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 48; }
	}
	__Pin { __Name = PG5_76; __Ppid = "  L7"; __XCoord = (700,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 49; }
	}
	__Pin { __Name = PG4_77; __Ppid = "  K7"; __XCoord = (700,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 50; }
	}
	__Pin { __Name = PG3_78; __Ppid = "  K8"; __XCoord = (800,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 51; }
	}
	__Pin { __Name = PG2_79; __Ppid = "  79"; __XCoord = (800,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 52; }
	}
	__Pin { __Name = PG1_80; __Ppid = "  80"; __XCoord = (800,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 53; }
	}
	__Pin { __Name = PG0_81; __Ppid = "  L8"; __XCoord = (800,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 54; }
	}
	__Pin { __Name = PF7_84; __Ppid = "  M8"; __XCoord = (800,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 55; }
	}
	__Pin { __Name = PF6_85; __Ppid = "  N8"; __XCoord = (800,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 56; }
	}
	__Pin { __Name = PF5_86; __Ppid = "  K9"; __XCoord = (900,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 57; }
	}
	__Pin { __Name = TRD3_87; __Ppid = "  L9"; __XCoord = (900,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 58; }
	}
	__Pin { __Name = TRD2_88; __Ppid = "  M9"; __XCoord = (900,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 59; }
	}
	__Pin { __Name = TRD1_89; __Ppid = "  N9"; __XCoord = (900,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 60; }
	}
	__Pin { __Name = TRD0_90; __Ppid = " L10"; __XCoord = (1000,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 61; }
	}
	__Pin { __Name = PF3_91; __Ppid = " K10"; __XCoord = (1000,1000); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 62; }
	}
	__Pin { __Name = PN7_94; __Ppid = " M11"; __XCoord = (1100,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 63; }
	}
	__Pin { __Name = PN6_95; __Ppid = " N11"; __XCoord = (1100,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 64; }
	}
	__Pin { __Name = PN5_96; __Ppid = " N12"; __XCoord = (1200,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 65; }
	}
	__Pin { __Name = PN4_97; __Ppid = " L11"; __XCoord = (1100,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 66; }
	}
	__Pin { __Name = wake_n_98; __Ppid = " N13"; __XCoord = (1300,1300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 67; }
	}
	__Pin { __Name = hib_n_99; __Ppid = " M12"; __XCoord = (1200,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 128; }
	}
	__Pin { __Name = XOSC0_100; __Ppid = " M10"; __XCoord = (1000,1200); __Shape = 15; __PinType = I; 
		__Connection[0] { __TesterChannel[1] = 69; }
	}
	__Pin { __Name = XOSC1_102; __Ppid = " N10"; __XCoord = (1000,1300); __Shape = 15; __PinType = O; 
		__Connection[0] { __TesterChannel[1] = 70; }
	}
	__Pin { __Name = PP3_106; __Ppid = " J12"; __XCoord = (1200,900); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 71; }
	}
	__Pin { __Name = PP4_107; __Ppid = " J13"; __XCoord = (1300,900); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 72; }
	}
	__Pin { __Name = PP1_108; __Ppid = " L12"; __XCoord = (1200,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 73; }
	}
	__Pin { __Name = PP0_109; __Ppid = " M13"; __XCoord = (1300,1200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 74; }
	}
	__Pin { __Name = PM7_110; __Ppid = " L13"; __XCoord = (1300,1100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 75; }
	}
	__Pin { __Name = PM6_111; __Ppid = " H11"; __XCoord = (1100,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 76; }
	}
	__Pin { __Name = LPC0CLK_116; __Ppid = " H12"; __XCoord = (1200,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 77; }
	}
	__Pin { __Name = LPC0SERIRQ_117; __Ppid = " H13"; __XCoord = (1300,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 78; }
	}
	__Pin { __Name = LPC0A20_118; __Ppid = " H10"; __XCoord = (1000,800); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 79; }
	}
	__Pin { __Name = LPC0CLKRUN_n_119; __Ppid = " G11"; __XCoord = (1100,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 80; }
	}
	__Pin { __Name = LPC0SCI_n_120; __Ppid = " F12"; __XCoord = (1200,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 81; }
	}
	__Pin { __Name = LPC0PD_n_121; __Ppid = " F13"; __XCoord = (1300,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 82; }
	}
	__Pin { __Name = RST_n_122; __Ppid = " G10"; __XCoord = (1000,700); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 83; }
	}
	__Pin { __Name = OSC0_124; __Ppid = " G12"; __XCoord = (1200,700); __Shape = 15; __PinType = I; 
		__Connection[0] { __TesterChannel[1] = 200; }
	}
	__Pin { __Name = OSC1_125; __Ppid = " G13"; __XCoord = (1300,700); __Shape = 15; __PinType = O; 
		__Connection[0] { __TesterChannel[1] = 84; }
	}
	__Pin { __Name = USB0DM_127; __Ppid = " E13"; __XCoord = (1300,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 85; }
	}
	__Pin { __Name = USB0DP_128; __Ppid = " E12"; __XCoord = (1200,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 86; }
	}
	__Pin { __Name = PB0_129; __Ppid = " F11"; __XCoord = (1100,600); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 87; }
	}
	__Pin { __Name = PB1_130; __Ppid = " E11"; __XCoord = (1100,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 88; }
	}
	__Pin { __Name = PB2_131; __Ppid = " E10"; __XCoord = (1000,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 89; }
	}
	__Pin { __Name = ia_ftestadc_132; __Ppid = " D13"; __XCoord = (1300,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 90; }
	}
	__Pin { __Name = LPC0RESET_n_135; __Ppid = " C13"; __XCoord = (1300,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 91; }
	}
	__Pin { __Name = LPC0FRAME_n_136; __Ppid = " D12"; __XCoord = (1200,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 92; }
	}
	__Pin { __Name = LPC0AD0_137; __Ppid = " B13"; __XCoord = (1300,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 93; }
	}
	__Pin { __Name = LPC0AD1_138; __Ppid = " A13"; __XCoord = (1300,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 94; }
	}
	__Pin { __Name = LPC0AD2_139; __Ppid = " C12"; __XCoord = (1200,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 95; }
	}
	__Pin { __Name = LPC0AD3_140; __Ppid = " D11"; __XCoord = (1100,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 96; }
	}
	__Pin { __Name = PK7_141; __Ppid = " A12"; __XCoord = (1200,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 97; }
	}
	__Pin { __Name = PK6_142; __Ppid = " C11"; __XCoord = (1100,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 98; }
	}
	__Pin { __Name = PK5_143; __Ppid = " B12"; __XCoord = (1200,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 99; }
	}
	__Pin { __Name = PK4_144; __Ppid = " B11"; __XCoord = (1100,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 100; }
	}
	__Pin { __Name = TDO_149; __Ppid = " A11"; __XCoord = (1100,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 101; }
	}
	__Pin { __Name = TDI_150; __Ppid = " B10"; __XCoord = (1000,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 102; }
	}
	__Pin { __Name = TMS_151; __Ppid = " A10"; __XCoord = (1000,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 103; }
	}
	__Pin { __Name = TCK_152; __Ppid = " C10"; __XCoord = (1000,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 104; }
	}
	__Pin { __Name = PN3_153; __Ppid = " D10"; __XCoord = (1000,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 105; }
	}
	__Pin { __Name = PJ0_158; __Ppid = " 158"; __XCoord = (1000,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 106; }
	}
	__Pin { __Name = PJ1_159; __Ppid = "  B9"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 107; }
	}
	__Pin { __Name = PJ2_160; __Ppid = " 160"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 108; }
	}
	__Pin { __Name = PJ3_161; __Ppid = " 161"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 109; }
	}
	__Pin { __Name = RAWPOR_N_TEST_162; __Ppid = " 162"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 110; }
	}
	__Pin { __Name = PP6_163; __Ppid = " 163"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 111; }
	}
	__Pin { __Name = POR_ORIDE_164; __Ppid = " 164"; __XCoord = (900,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 112; }
	}
	__Pin { __Name = C2_p_174; __Ppid = "  D5"; __XCoord = (500,400); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 113; }
	}
	__Pin { __Name = C2_n_175; __Ppid = "  C5"; __XCoord = (500,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 126; }
	}
	__Pin { __Name = PJ6_176; __Ppid = "  C6"; __XCoord = (600,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 115; }
	}
	__Pin { __Name = PJ7_177; __Ppid = "  C4"; __XCoord = (400,300); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 116; }
	}
	__Pin { __Name = AIN23_178; __Ppid = "  B8"; __XCoord = (800,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 117; }
	}
	__Pin { __Name = AIN22_179; __Ppid = "  A7"; __XCoord = (700,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 118; }
	}
	__Pin { __Name = AIN21_180; __Ppid = "  B7"; __XCoord = (700,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 119; }
	}
	__Pin { __Name = AIN20_181; __Ppid = "  A6"; __XCoord = (600,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 120; }
	}
	__Pin { __Name = AIN11_182; __Ppid = "  B6"; __XCoord = (600,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 68; }
	}
	__Pin { __Name = AIN10_183; __Ppid = "  E5"; __XCoord = (500,500); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 121; }
	}
	__Pin { __Name = AIN09_188; __Ppid = "  A5"; __XCoord = (500,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 127; }
	}
	__Pin { __Name = AIN08_189; __Ppid = "  B5"; __XCoord = (500,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 122; }
	}
	__Pin { __Name = AIN07_190; __Ppid = "  A4"; __XCoord = (400,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 123; }
	}
	__Pin { __Name = AIN06_191; __Ppid = "  B4"; __XCoord = (400,200); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 124; }
	}
	__Pin { __Name = AIN05_192; __Ppid = "  A3"; __XCoord = (300,100); __Shape = 15; __PinType = IO; 
		__Connection[0] { __TesterChannel[1] = 125; }
	}
	__Pin { __Name = AIN04_193; __Ppid = "  B3"; __XCoord = (300,200); __Shape = 15; __PinType = ANALOG_IO; 
		__Connection[0] { __TesterChannel[1] = VI16_14; }
	}
	__Pin { __Name = VDDPGM; __Ppid = " 171"; __XCoord = (300,200); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_12; }
	}
	__Pin { __Name = VDDEEPROM; __Ppid = " 194"; __XCoord = (300,200); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_258; }
	}
	__Pin { __Name = VDD; __Ppid = "  33"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VDD_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = HCOVI13; }
	}
	__Pin { __Name = VREFAN; __Ppid = "  13"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VREFAN_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = GND; }
	}
	__Pin { __Name = VNWA; __Ppid = " 165"; __XCoord = (300,200); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_11; }
	}
	__Pin { __Name = VDDAR; __Ppid = " 166"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VDDAR_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = HCOVI17; }
	}
	__Pin { __Name = VBAT; __Ppid = " 103"; __XCoord = (300,200); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_6; }
	}
	__Pin { __Name = VDDS; __Ppid = "   7"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VDDS_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = HCOVI9; }
	}
	__Pin { __Name = VSS; __Ppid = "   8"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VSS_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = GND; }
	}
	__Pin { __Name = VDDA; __Ppid = "  11"; __XCoord = (300,200); __Shape = 15; __PinType = PWR_VDDA_Bllizar_PB1; 
		__Connection[0] { __TesterChannel[1] = HCOVI11; }
	}
	__Pin { __Name = VPP; __Ppid = " 154"; __XCoord = (300,200); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_10; }
	}
	__Pin { __Name = VREFAP; __XCoord = (0,0); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_13; }
	}
	__Pin { __Name = AIN01_DIAG; __XCoord = (0,0); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_259; }
	}
	__Pin { __Name = AIN00_DIAG; __XCoord = (0,0); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_16; }
	}
	__Pin { __Name = ATEST_N; __XCoord = (0,0); __Shape = 15; __PinType = DCREF; 
		__Connection[0] { __TesterChannel[1] = VI16_15; }
	}
	__Pin { __Name = CBIT_10; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT10; }
	}
	__Pin { __Name = CBIT_27; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT27; }
	}
	__Pin { __Name = CBIT_15; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT15; }
	}
	__Pin { __Name = CBIT_23; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT23; }
	}
	__Pin { __Name = CBIT_19; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT19; }
	}
	__Pin { __Name = CBIT_25; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT25; }
	}
	__Pin { __Name = CBIT_17; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT17; }
	}
	__Pin { __Name = CBIT_21; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT21; }
	}
	__Pin { __Name = CBIT_9; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT9; }
	}
	__Pin { __Name = CBIT_3; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT3; }
	}
	__Pin { __Name = CBIT_4; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT4; }
	}
	__Pin { __Name = CBI_31; __XCoord = (0,0); __Shape = 15; __PinType = CBIT; 
		__Connection[0] { __TesterChannel[1] = CBIT31; }
	}
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/masks.evo                                      */
/* Creation Date  : Tue Jan  3 17:12:37 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***********************************************************************/
/***                                                                 ***/
/***  The file masks.evo is the location in which all specs masks    ***/
/***  are stored. The masks are a method that allows each spec to    ***/
/***  have three values (min, typ, max). Normal programming style    ***/
/***  will to be only to use typ values. In this case, the masks     ***/
/***  objects will always be a single line, setting default to typ.  ***/
/***                                                                 ***/
/***  There must be at least one Mask for every Spec in use. There   ***/
/***  may be multiple masks for one spec, but one masks cannot be    ***/
/***  tied to multiple specs.                                        ***/
/***                                                                 ***/
/***  Globals_Meas_Mask requires each parameter explicity defined    ***/
/***   since enVision cannot recognize Meas as a valid MaskDefault   ***/ 
/***  Reference SPR : 70919                                          ***/
/***                                                                 ***/
/***********************************************************************/

__Mask Globals_Meas_Mask {
    __MaskDefault = Meas;
    __Spec = Globals_Meas;
    GlobalMeasIndex = Typ;
    TestWareDataLog = Typ;
    ContinueOnFail = Typ;
    TestWarePrintSpec = Typ;
    CharNthDevice = Typ;
    twMCC = Typ;
    twMCC_S = Typ;
    twBase = Typ;
    twVar = Typ;
    twVar1 = Typ;
    twVarsFile = Typ;
    ESDAProgName = Typ;
    DataNDTimeOut = Typ;
    FailsToCollect = Typ;
}

__Mask Globals_Typ_Mask {
    __MaskDefault = Typ;
    __Spec = Globals_Typ;
}

__Mask DCSpecsMask {
    __MaskDefault = Typ;
    __Spec = DCSpecs;
}

__Mask ACSpecsMask {
    __MaskDefault = Typ;
    __Spec = ACSpecs;
}

__Mask PSSpecsMask {
    __MaskDefault = Typ;
    __Spec = PSSpecs;
}

__Mask PSSpecsMask_Meas {
    __MaskDefault = Typ;
    __Spec = PSSpecs;
    VDD_PS = Meas;
    VDDEEPROM_PS = Meas;
    VDDPGM_PS = Meas;
    VNWA_PS = Meas;
    VDDAR_PS = Meas;
    VBAT_PS = Meas;
    VDDS_PS = Meas;
    VDDA_PS = Meas;
    VPP_PS = Meas;
}

__Mask CTMask {
    __MaskDefault = Typ;
    __Spec = CTSpec;
    PinNum = Meas;
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/patterns.evo                                   */
/* Creation Date  : Tue Jan  3 17:12:46 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

/***********************************************************************/
/***                                                                 ***/
/***  The file patterns.evo provides the information about enVision  ***/
/***  test patterns used in the program. This file has three         ***/
/***  sections:                                                      ***/
/***     SignalHeader - Provides the map of DUT Pin Name to its      ***/
/***                    position in the pattern line.                ***/
/***     PatternMap   - Provides the path name of the patterns files ***/
/***                    to be loaded.                                ***/
/***     Thread       - Describes sequences of patterns to be run.   ***/
/***                                                                 ***/
/***********************************************************************/

        /***********************************************************/
        /***             Signal Header                           ***/
        /***********************************************************/
        /***                                                     ***/
        /*** This section describes the arrangement of data in   ***/
        /*** the pattern source files. Essentially, a map of     ***/
        /*** which DUT pins are associated with which column in  ***/
        /*** the patterns. Normally, a device program would have ***/
        /*** one of these for functional patterns, and possibly  ***/
        /*** several for scan patterns. The Scan SignalHeader    ***/
        /*** provides a bit of extra data needed by the pattern  ***/
        /*** compiler to determine what to do in scan patterns.  ***/
        /***                                                     ***/
        /*** The simplest form of a SignalHead is simply a blank ***/
        /*** separated list of Pin names. Additional options are ***/
        /*** a % sign (causes a space to be expected before that ***/
        /*** pin in the pattern), and a Hex option (causes the   ***/
        /*** following to be interpreted as Hex code. The Hex    ***/
        /*** requires an extra character in the pattern to       ***/
        /*** select the Wave/Format for each Hex group.          ***/
        /***                                                     ***/
        /***                     Examples                        ***/
        /***           Signal Header                   Pat Data  ***/
        /***           -------------                   --------  ***/
        /***  SignalHeader Name { A3 A2 A1 A0 }         1010     ***/
        /***  SignalHeader Name { A3 A2 %A1 A0 }        10 10    ***/
        /***  SignalHeader Name { ABus {A3 A2 A1 A0 }   hA       ***/
        /***                                                     ***/
        /***       The 'h' selects the correct timing/format     ***/
        /***                                                     ***/
        /*** The SignalHeader for a Scan chain has additional    ***/
        /*** requirements:                                       ***/
        /***  ScanLength= The number of bits in a scan chain     ***/
        /***  Fill      = Data to fill with when necessary       ***/
        /***  PostFill  = Filling occurs after chain is run      ***/
        /***********************************************************/

/********************************/
/******** Signal Headers ********/
/********************************/
__SignalHeader DefaultSignalHeader {
    __Signals {
        AIN15_1 AIN14_2 AIN13_3 AIN12_4 PQ0_5 PQ1_6 rbias_9 PB6_10 PB7_15 PQ2_16 AIN16_23 AIN17_24 AIN18_25 AIN19_26 PN2_27 PH7_28
        PH6_29 PH5_30 PH4_35 PH3_36 PH2_37 PH1_40 PH0_41 C0_n_42 C0_p_43 C1_p_44 C1_n_45 o_cpu_done_46 o_cpu_fail_47 PA2_48 PA3_49 PA4_50
        PA5_51 PA6_54 PA7_55 PG7_56 PG6_57 PP2_58 PP5_59 RAWPOR_n_60 PQ3_61 PQ4_62 PQ5_63 PQ6_64 PQ7_65 FLASH3_70 FLASH4_71 FLASH5_72
        PG5_76 PG4_77 PG3_78 PG2_79 PG1_80 PG0_81 PF7_84 PF6_85 PF5_86 TRD3_87 TRD2_88 TRD1_89 TRD0_90 PF3_91 PN7_94 PN6_95
        PN5_96 PN4_97 wake_n_98 hib_n_99 XOSC0_100 XOSC1_102 PP3_106 PP4_107 PP1_108 PP0_109 PM7_110 PM6_111 LPC0CLK_116 LPC0SERIRQ_117 LPC0A20_118 LPC0CLKRUN_n_119
        LPC0SCI_n_120 LPC0PD_n_121 RST_n_122 OSC0_124 OSC1_125 USB0DM_127 USB0DP_128 PB0_129 PB1_130 PB2_131 ia_ftestadc_132 LPC0RESET_n_135 LPC0FRAME_n_136 LPC0AD0_137 LPC0AD1_138 LPC0AD2_139
        LPC0AD3_140 PK7_141 PK6_142 PK5_143 PK4_144 TDO_149 TDI_150 TMS_151 TCK_152 PN3_153 PJ0_158 PJ1_159 PJ2_160 PJ3_161 RAWPOR_N_TEST_162 PP6_163
        POR_ORIDE_164 C2_p_174 C2_n_175 PJ6_176 PJ7_177 AIN23_178 AIN22_179 AIN21_180 AIN20_181 AIN11_182 AIN10_183 AIN09_188 AIN08_189 AIN07_190 AIN06_191 AIN05_192
    }
}

__SignalHeader ScanHeader2 {
    __Signals {
        PA2_48 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        C1_n_45 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PA3_49 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        C1_p_44 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PA4_50 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        C0_p_43 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PA5_51 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        C0_n_42 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PA6_54 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        TRD2_88 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PA7_55 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        TRD1_89 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PB0_129 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        TRD0_90 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
        PB1_130 { __Scan, __ScanLength = 261, __Fill = L, __PreFill; }
        PF3_91 { __Scan, __ScanLength = 261, __Fill = M, __PostFill; }
       
    }
}

__SignalHeader ScanHeader1 {
    __Signals {
        PA2_48 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        C1_n_45 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PA3_49 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        C1_p_44 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PA4_50 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        C0_p_43 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PA5_51 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        C0_n_42 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PA6_54 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        TRD2_88 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PA7_55 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        TRD1_89 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PB0_129 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        TRD0_90 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
        PB1_130 { __Scan, __ScanLength = 9682, __Fill = L, __PreFill; }
        PF3_91 { __Scan, __ScanLength = 9682, __Fill = M, __PostFill; }
       
    }
}

__SignalHeader ScanHeader3 {
    __Signals {
        PA2_48 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        C1_n_45 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PA3_49 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        C1_p_44 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PA4_50 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        C0_p_43 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PA5_51 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        C0_n_42 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PA6_54 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        TRD2_88 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PA7_55 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        TRD1_89 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PB0_129 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        TRD0_90 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
        PB1_130 { __Scan, __ScanLength = 291, __Fill = L, __PreFill; }
        PF3_91 { __Scan, __ScanLength = 291, __Fill = M, __PostFill; }
       
    }
}


/******************/
/*** PatternMap ***/
/******************/

// PatternMap syntax:
//
// PatternMap PatternMap_Global {
//
//  InheritFrom = "PatternMap_1 PatternMap_2";         // Other PatternMaps to inherit from
//   DefaultSourcePath = "./Patterns/Ascii";           // Default location of evo's
//   DefaultBinaryPath = "./Patterns/Binary/$TESTER"; // Default location of epf's
//   DefaultPatternGroup = "TDLStdPatGrp";             // TDLStdPatGrp or SCANPatGrp
//
//   Pattern <name> { <filename>, <sourcepath>, <binarypath>, <patterngroup>, <remove> }
//     //name = enVision pattern object name
//
//     . filename,sourcepath,binarypath,patterngroup,remove can be
//       strings, or expressions, or be left blank
//     . If left blank, filename defaults to name
//     . remove = true disables loading of pattern
// }

__PatternMap DefaultPatternMap {
    __DefaultSourcePath = "./Patterns/Ascii";
    __DefaultBinaryPath = "./Patterns/Binary/$TESTER";
    __DefaultPatternGroup = "TDLStdPatGrp";
    __Pattern scan_base1 {
        __File "scan_base1";
        __Path "./Patterns/Ascii";
    }
    __Pattern scan_base2 {
        __File "scan_base2";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_CheckROM_Mg0_DPM {
        __File "FF_CheckROM_Mg0_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_CheckROM_norm_DPM {
        __File "FF_CheckROM_norm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_InitCheck_DPM {
        __File "FF_InitCheck_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_LoadFuseData_0001_DPM {
        __File "FF_LoadFuseData_0001_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_LoadFuseData_0011_DPM {
        __File "FF_LoadFuseData_0011_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_LoadFuseData_1010_DPM {
        __File "FF_LoadFuseData_1010_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_LoadFuseData_1110_DPM {
        __File "FF_LoadFuseData_1110_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Program_Mg1A_DPM {
        __File "FF_Program_Mg1A_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Program_Mg1B_DPM {
        __File "FF_Program_Mg1B_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Read_Mg0_DPM {
        __File "FF_Read_Mg0_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Read_Mg1A_DPM {
        __File "FF_Read_Mg1A_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Read_Mg1B_DPM {
        __File "FF_Read_Mg1B_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_Read_Norm_DPM {
        __File "FF_Read_Norm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern FF_RunAutoload_DPM {
        __File "FF_RunAutoload_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern OTG_ChgdischgVbusM_DPM {
        __File "OTG_ChgdischgVbusM_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_iddq_CPM {
        __File "a_iddq_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_iddq_DPM {
        __File "a_iddq_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_10_v22_CPM {
        __File "a_st_tk_10_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_10_v22_DPM {
        __File "a_st_tk_10_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_11_v22_CPM {
        __File "a_st_tk_11_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_11_v22_DPM {
        __File "a_st_tk_11_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_12_v22_CPM {
        __File "a_st_tk_12_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_12_v22_DPM {
        __File "a_st_tk_12_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_13_v22_CPM {
        __File "a_st_tk_13_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_13_v22_DPM {
        __File "a_st_tk_13_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_14_v22_CPM {
        __File "a_st_tk_14_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_14_v22_DPM {
        __File "a_st_tk_14_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_15_v22_CPM {
        __File "a_st_tk_15_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_15_v22_DPM {
        __File "a_st_tk_15_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_16_v22_CPM {
        __File "a_st_tk_16_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_16_v22_DPM {
        __File "a_st_tk_16_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_17_v22_CPM {
        __File "a_st_tk_17_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_17_v22_DPM {
        __File "a_st_tk_17_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_18_v22_CPM {
        __File "a_st_tk_18_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_18_v22_DPM {
        __File "a_st_tk_18_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_19_v22_CPM {
        __File "a_st_tk_19_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_19_v22_DPM {
        __File "a_st_tk_19_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_1_v22_CPM {
        __File "a_st_tk_1_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_1_v22_DPM {
        __File "a_st_tk_1_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_20_v22_CPM {
        __File "a_st_tk_20_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_20_v22_DPM {
        __File "a_st_tk_20_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_21_v22_CPM {
        __File "a_st_tk_21_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_21_v22_DPM {
        __File "a_st_tk_21_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_2_v22_CPM {
        __File "a_st_tk_2_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_2_v22_DPM {
        __File "a_st_tk_2_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_3_v22_CPM {
        __File "a_st_tk_3_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_3_v22_DPM {
        __File "a_st_tk_3_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_4_v22_CPM {
        __File "a_st_tk_4_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_4_v22_DPM {
        __File "a_st_tk_4_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_5_v22_CPM {
        __File "a_st_tk_5_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_5_v22_DPM {
        __File "a_st_tk_5_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_6_v22_CPM {
        __File "a_st_tk_6_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_6_v22_DPM {
        __File "a_st_tk_6_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_7_v22_CPM {
        __File "a_st_tk_7_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_7_v22_DPM {
        __File "a_st_tk_7_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_8_v22_CPM {
        __File "a_st_tk_8_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_8_v22_DPM {
        __File "a_st_tk_8_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_9_v22_CPM {
        __File "a_st_tk_9_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_9_v22_DPM {
        __File "a_st_tk_9_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_fles_1_v22_CPM {
        __File "a_st_tk_fles_1_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_fles_1_v22_DPM {
        __File "a_st_tk_fles_1_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_fles_2_v22_CPM {
        __File "a_st_tk_fles_2_v22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_st_tk_fles_2_v22_DPM {
        __File "a_st_tk_fles_2_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_1_CPM {
        __File "a_tft_ntk_80_80_1_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_1_DPM {
        __File "a_tft_ntk_80_80_1_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_10_CPM {
        __File "a_tft_ntk_80_80_10_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_10_DPM {
        __File "a_tft_ntk_80_80_10_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_2_CPM {
        __File "a_tft_ntk_80_80_2_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_2_DPM {
        __File "a_tft_ntk_80_80_2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_3_CPM {
        __File "a_tft_ntk_80_80_3_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_3_DPM {
        __File "a_tft_ntk_80_80_3_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_4_CPM {
        __File "a_tft_ntk_80_80_4_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_4_DPM {
        __File "a_tft_ntk_80_80_4_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_5_CPM {
        __File "a_tft_ntk_80_80_5_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_5_DPM {
        __File "a_tft_ntk_80_80_5_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_6_CPM {
        __File "a_tft_ntk_80_80_6_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_6_DPM {
        __File "a_tft_ntk_80_80_6_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_7_CPM {
        __File "a_tft_ntk_80_80_7_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_7_DPM {
        __File "a_tft_ntk_80_80_7_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_8_CPM {
        __File "a_tft_ntk_80_80_8_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_8_DPM {
        __File "a_tft_ntk_80_80_8_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_9_CPM {
        __File "a_tft_ntk_80_80_9_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_ntk_80_80_9_DPM {
        __File "a_tft_ntk_80_80_9_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_16_16_2_CPM {
        __File "a_tft_tk_16_16_2_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_16_16_2_DPM {
        __File "a_tft_tk_16_16_2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_16_16_3_CPM {
        __File "a_tft_tk_16_16_3_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_16_16_3_DPM {
        __File "a_tft_tk_16_16_3_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_25_25_1_CPM {
        __File "a_tft_tk_25_25_1_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_25_25_1_DPM {
        __File "a_tft_tk_25_25_1_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_33_33_1_CPM {
        __File "a_tft_tk_33_33_1_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_33_33_1_DPM {
        __File "a_tft_tk_33_33_1_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_33_33_2_CPM {
        __File "a_tft_tk_33_33_2_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_33_33_2_DPM {
        __File "a_tft_tk_33_33_2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_40_40_1_CPM {
        __File "a_tft_tk_40_40_1_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_40_40_1_DPM {
        __File "a_tft_tk_40_40_1_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_1_CPM {
        __File "a_tft_tk_80_80_1_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_1_DPM {
        __File "a_tft_tk_80_80_1_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_10_CPM {
        __File "a_tft_tk_80_80_10_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_10_DPM {
        __File "a_tft_tk_80_80_10_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_11_CPM {
        __File "a_tft_tk_80_80_11_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_11_DPM {
        __File "a_tft_tk_80_80_11_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_12_CPM {
        __File "a_tft_tk_80_80_12_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_12_DPM {
        __File "a_tft_tk_80_80_12_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_13_CPM {
        __File "a_tft_tk_80_80_13_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_13_DPM {
        __File "a_tft_tk_80_80_13_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_14_CPM {
        __File "a_tft_tk_80_80_14_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_14_DPM {
        __File "a_tft_tk_80_80_14_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_15_CPM {
        __File "a_tft_tk_80_80_15_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_15_DPM {
        __File "a_tft_tk_80_80_15_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_16_CPM {
        __File "a_tft_tk_80_80_16_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_16_DPM {
        __File "a_tft_tk_80_80_16_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_17_CPM {
        __File "a_tft_tk_80_80_17_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_17_DPM {
        __File "a_tft_tk_80_80_17_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_18_CPM {
        __File "a_tft_tk_80_80_18_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_18_DPM {
        __File "a_tft_tk_80_80_18_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_19_CPM {
        __File "a_tft_tk_80_80_19_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_19_DPM {
        __File "a_tft_tk_80_80_19_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_2_CPM {
        __File "a_tft_tk_80_80_2_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_2_DPM {
        __File "a_tft_tk_80_80_2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_20_CPM {
        __File "a_tft_tk_80_80_20_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_20_DPM {
        __File "a_tft_tk_80_80_20_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_21_CPM {
        __File "a_tft_tk_80_80_21_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_21_DPM {
        __File "a_tft_tk_80_80_21_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_22_CPM {
        __File "a_tft_tk_80_80_22_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_22_DPM {
        __File "a_tft_tk_80_80_22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_23_CPM {
        __File "a_tft_tk_80_80_23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_23_DPM {
        __File "a_tft_tk_80_80_23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_24_CPM {
        __File "a_tft_tk_80_80_24_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_24_DPM {
        __File "a_tft_tk_80_80_24_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_25_CPM {
        __File "a_tft_tk_80_80_25_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_25_DPM {
        __File "a_tft_tk_80_80_25_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_26_CPM {
        __File "a_tft_tk_80_80_26_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_26_DPM {
        __File "a_tft_tk_80_80_26_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_27_CPM {
        __File "a_tft_tk_80_80_27_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_27_DPM {
        __File "a_tft_tk_80_80_27_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_28_CPM {
        __File "a_tft_tk_80_80_28_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_28_DPM {
        __File "a_tft_tk_80_80_28_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_29_CPM {
        __File "a_tft_tk_80_80_29_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_29_DPM {
        __File "a_tft_tk_80_80_29_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_3_CPM {
        __File "a_tft_tk_80_80_3_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_3_DPM {
        __File "a_tft_tk_80_80_3_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_30_CPM {
        __File "a_tft_tk_80_80_30_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_30_DPM {
        __File "a_tft_tk_80_80_30_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_31_CPM {
        __File "a_tft_tk_80_80_31_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_31_DPM {
        __File "a_tft_tk_80_80_31_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_32_CPM {
        __File "a_tft_tk_80_80_32_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_32_DPM {
        __File "a_tft_tk_80_80_32_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_33_CPM {
        __File "a_tft_tk_80_80_33_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_33_DPM {
        __File "a_tft_tk_80_80_33_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_34_CPM {
        __File "a_tft_tk_80_80_34_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_34_DPM {
        __File "a_tft_tk_80_80_34_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_35_CPM {
        __File "a_tft_tk_80_80_35_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_35_DPM {
        __File "a_tft_tk_80_80_35_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_36_CPM {
        __File "a_tft_tk_80_80_36_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_36_DPM {
        __File "a_tft_tk_80_80_36_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_37_CPM {
        __File "a_tft_tk_80_80_37_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_37_DPM {
        __File "a_tft_tk_80_80_37_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_38_CPM {
        __File "a_tft_tk_80_80_38_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_38_DPM {
        __File "a_tft_tk_80_80_38_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_39_CPM {
        __File "a_tft_tk_80_80_39_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_39_DPM {
        __File "a_tft_tk_80_80_39_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_4_CPM {
        __File "a_tft_tk_80_80_4_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_4_DPM {
        __File "a_tft_tk_80_80_4_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_40_CPM {
        __File "a_tft_tk_80_80_40_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_40_DPM {
        __File "a_tft_tk_80_80_40_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_41_CPM {
        __File "a_tft_tk_80_80_41_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_41_DPM {
        __File "a_tft_tk_80_80_41_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_42_CPM {
        __File "a_tft_tk_80_80_42_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_42_DPM {
        __File "a_tft_tk_80_80_42_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_43_CPM {
        __File "a_tft_tk_80_80_43_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_43_DPM {
        __File "a_tft_tk_80_80_43_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_44_CPM {
        __File "a_tft_tk_80_80_44_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_44_DPM {
        __File "a_tft_tk_80_80_44_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_45_CPM {
        __File "a_tft_tk_80_80_45_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_45_DPM {
        __File "a_tft_tk_80_80_45_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_46_CPM {
        __File "a_tft_tk_80_80_46_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_46_DPM {
        __File "a_tft_tk_80_80_46_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_47_CPM {
        __File "a_tft_tk_80_80_47_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_47_DPM {
        __File "a_tft_tk_80_80_47_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_5_CPM {
        __File "a_tft_tk_80_80_5_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_5_DPM {
        __File "a_tft_tk_80_80_5_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_6_CPM {
        __File "a_tft_tk_80_80_6_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_6_DPM {
        __File "a_tft_tk_80_80_6_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_8_CPM {
        __File "a_tft_tk_80_80_8_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_8_DPM {
        __File "a_tft_tk_80_80_8_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_9_CPM {
        __File "a_tft_tk_80_80_9_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern a_tft_tk_80_80_9_DPM {
        __File "a_tft_tk_80_80_9_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ahbm_write_buffer_v23_DPM {
        __File "ahbm_write_buffer_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern bg_temp_trim_DPM {
        __File "bg_temp_trim_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern bi_atpg7_DPM {
        __File "bi_atpg7_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern bi_atpg_a2_DPM {
        __File "bi_atpg_a2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern candmalbtx0rx1_1beat_DPM {
        __File "candmalbtx0rx1_1beat_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern candmalbtx1rx0_1beat_DPM {
        __File "candmalbtx1rx0_1beat_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dcpara_DPM {
        __File "dcpara_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dcpara_ioz_DPM {
        __File "dcpara_ioz_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dcpara_ioz_pd_DPM {
        __File "dcpara_ioz_pd_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dcpara_ioz_pu_DPM {
        __File "dcpara_ioz_pu_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_DPM {
        __File "deep_sleep_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_ldo_byp_DPM {
        __File "deep_sleep_ldo_byp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_ldo_byp_v2_DPM {
        __File "deep_sleep_ldo_byp_v2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_ldo_en_DPM {
        __File "deep_sleep_ldo_en_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_ldo_en_v2_DPM {
        __File "deep_sleep_ldo_en_v2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern deep_sleep_v23_DPM {
        __File "deep_sleep_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dmled_read_DPM {
        __File "dmled_read_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern dmled_test_number_DPM {
        __File "dmled_test_number_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern eeprom_wdone_int_DPM {
        __File "eeprom_wdone_int_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fancontrol_reg_rdwr_CPM {
        __File "fancontrol_reg_rdwr_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fancontrol_reg_rdwr_DPM {
        __File "fancontrol_reg_rdwr_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fl_otp_loader_v21_DPM {
        __File "fl_otp_loader_v21_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fl_sw_dl_a1a3_4_DPM {
        __File "fl_sw_dl_a1a3_4_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fl_sw_dl_a2_2_DPM {
        __File "fl_sw_dl_a2_2_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fl_sw_dl_dpse_DPM {
        __File "fl_sw_dl_dpse_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern fl_sw_dl_v30_DPM {
        __File "fl_sw_dl_v30_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern flash_int_check_DPM {
        __File "flash_int_check_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt0_1s_32_down_CPM {
        __File "gpt0_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt0_1s_32_down_DPM {
        __File "gpt0_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt10_per_32_down_CPM {
        __File "gpt10_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt10_per_32_down_DPM {
        __File "gpt10_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt11_per_32_down_CPM {
        __File "gpt11_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt11_per_32_down_DPM {
        __File "gpt11_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt1_1s_32_down_CPM {
        __File "gpt1_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt1_1s_32_down_DPM {
        __File "gpt1_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt2_1s_32_down_CPM {
        __File "gpt2_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt2_1s_32_down_DPM {
        __File "gpt2_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt3_1s_32_down_CPM {
        __File "gpt3_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt3_1s_32_down_DPM {
        __File "gpt3_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt4_1s_32_down_CPM {
        __File "gpt4_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt4_1s_32_down_DPM {
        __File "gpt4_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt5_1s_32_down_CPM {
        __File "gpt5_1s_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt5_1s_32_down_DPM {
        __File "gpt5_1s_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt6_per_32_down_CPM {
        __File "gpt6_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt6_per_32_down_DPM {
        __File "gpt6_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt7_per_32_down_CPM {
        __File "gpt7_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt7_per_32_down_DPM {
        __File "gpt7_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt8_per_32_down_CPM {
        __File "gpt8_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt8_per_32_down_DPM {
        __File "gpt8_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt9_per_32_down_CPM {
        __File "gpt9_per_32_down_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern gpt9_per_32_down_DPM {
        __File "gpt9_per_32_down_DPM";
        __Path "./Patterns/Ascii";
    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1009 of global.h of the VLCT program) -- BJP
//    __Pattern hib_rtcsec_subsec_DPM {
//        __File "hib_rtcsec_subsec_DPM";
//        __Path "./Patterns/Ascii";
//    }
    __Pattern hibana_hibn_DPM {
        __File "hibana_hibn_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_hysvreg_DPM {
        __File "hibana_hysvreg_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_lbc_vbat19_DPM {
        __File "hibana_lbc_vbat19_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_lbc_vbat21_DPM {
        __File "hibana_lbc_vbat21_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_lbc_vbat23_DPM {
        __File "hibana_lbc_vbat23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_lbc_vbat25_DPM {
        __File "hibana_lbc_vbat25_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibana_vbapiok_DPM {
        __File "hibana_vbapiok_DPM";
        __Path "./Patterns/Ascii";
    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1010 of global.h of the VLCT program) -- BJP
//    __Pattern hibernate_reg_rw_DPM {
//        __File "hibernate_reg_rw_DPM";
//        __Path "./Patterns/Ascii";
//    }
    __Pattern hibernate_rtcGen_DPM {
        __File "hibernate_rtcGen_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibernate_rtcSec_DPM {
        __File "hibernate_rtcSec_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibernate_vabort_DPM {
        __File "hibernate_vabort_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibernate_vbatchk_DPM {
        __File "hibernate_vbatchk_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern hibosc_obs_DPM {
        __File "hibosc_obs_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern i2c0_dma_DPM {
        __File "i2c0_dma_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern i2c1_dma_DPM {
        __File "i2c1_dma_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern i2c2_dma_DPM {
        __File "i2c2_dma_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern i2c3_dma_DPM {
        __File "i2c3_dma_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern i2c4_dma_DPM {
        __File "i2c4_dma_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern iosc_obs_DPM {
        __File "iosc_obs_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern iref_trim_DPM {
        __File "iref_trim_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern lpc_reg_access_CPM {
        __File "lpc_reg_access_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern lpc_reg_access_DPM {
        __File "lpc_reg_access_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern otg_5vprotection_DPM {
        __File "otg_5vprotection_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern otg_SidMeasIddH_DPM {
        __File "otg_SidMeasIddH_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern otg_SvblhMs_endH_DPM {
        __File "otg_SvblhMs_endH_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern otg_SvblhMs_vldH_DPM {
        __File "otg_SvblhMs_vldH_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern otg_SvblhMvbvldH_DPM {
        __File "otg_SvblhMvbvldH_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_chkr_CPM {
        __File "pb_iddq_ret_chkr_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_chkr_DPM {
        __File "pb_iddq_ret_chkr_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_chkr_v23_CPM {
        __File "pb_iddq_ret_chkr_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_chkr_v23_DPM {
        __File "pb_iddq_ret_chkr_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_invchkr_CPM {
        __File "pb_iddq_ret_invchkr_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_invchkr_DPM {
        __File "pb_iddq_ret_invchkr_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_invchkr_v23_CPM {
        __File "pb_iddq_ret_invchkr_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_invchkr_v23_DPM {
        __File "pb_iddq_ret_invchkr_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_ones_CPM {
        __File "pb_iddq_ret_ones_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_ones_DPM {
        __File "pb_iddq_ret_ones_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_ones_v23_CPM {
        __File "pb_iddq_ret_ones_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_ones_v23_DPM {
        __File "pb_iddq_ret_ones_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_zeroes_CPM {
        __File "pb_iddq_ret_zeroes_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_zeroes_DPM {
        __File "pb_iddq_ret_zeroes_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_zeroes_v23_CPM {
        __File "pb_iddq_ret_zeroes_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_iddq_ret_zeroes_v23_DPM {
        __File "pb_iddq_ret_zeroes_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_down2_1p_DPM {
        __File "pb_pb_down2_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_down2_2p_DPM {
        __File "pb_pb_down2_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_dtxn2_1p_DPM {
        __File "pb_pb_dtxn2_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_dtxn2_2p_DPM {
        __File "pb_pb_dtxn2_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_flip10_1p_DPM {
        __File "pb_pb_flip10_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_flip10_2p_DPM {
        __File "pb_pb_flip10_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_ftr_DPM {
        __File "pb_pb_ftr_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_mapcol_1p_DPM {
        __File "pb_pb_mapcol_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_mapcol_2p_DPM {
        __File "pb_pb_mapcol_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_march13n_1p_DPM {
        __File "pb_pb_march13n_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_march13n_2p_DPM {
        __File "pb_pb_march13n_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_march13n_rep_DPM {
        __File "pb_pb_march13n_rep_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_pmos_open_1p_v22_DPM {
        __File "pb_pb_pmos_open_1p_v22_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_pmos_open_2p_DPM {
        __File "pb_pb_pmos_open_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_precharge_1p_DPM {
        __File "pb_pb_precharge_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_precharge_2p_DPM {
        __File "pb_pb_precharge_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_ptr_DPM {
        __File "pb_pb_ptr_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_pb_wrenz_DPM {
        __File "pb_pb_wrenz_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_1p_CPM {
        __File "pb_vl_down2_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_1p_DPM {
        __File "pb_vl_down2_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_1p_v23_CPM {
        __File "pb_vl_down2_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_1p_v23_DPM {
        __File "pb_vl_down2_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_2p_CPM {
        __File "pb_vl_down2_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_2p_DPM {
        __File "pb_vl_down2_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_2p_v23_CPM {
        __File "pb_vl_down2_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_down2_2p_v23_DPM {
        __File "pb_vl_down2_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_1p_CPM {
        __File "pb_vl_dtxn2_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_1p_DPM {
        __File "pb_vl_dtxn2_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_1p_v23_CPM {
        __File "pb_vl_dtxn2_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_1p_v23_DPM {
        __File "pb_vl_dtxn2_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_2p_CPM {
        __File "pb_vl_dtxn2_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_2p_DPM {
        __File "pb_vl_dtxn2_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_2p_v23_CPM {
        __File "pb_vl_dtxn2_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_dtxn2_2p_v23_DPM {
        __File "pb_vl_dtxn2_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_1p_CPM {
        __File "pb_vl_flip10_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_1p_DPM {
        __File "pb_vl_flip10_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_1p_v23_CPM {
        __File "pb_vl_flip10_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_1p_v23_DPM {
        __File "pb_vl_flip10_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_2p_CPM {
        __File "pb_vl_flip10_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_2p_DPM {
        __File "pb_vl_flip10_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_2p_v23_CPM {
        __File "pb_vl_flip10_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_flip10_2p_v23_DPM {
        __File "pb_vl_flip10_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ftr_read_CPM {
        __File "pb_vl_ftr_read_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ftr_read_DPM {
        __File "pb_vl_ftr_read_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ftr_read_v23_CPM {
        __File "pb_vl_ftr_read_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ftr_read_v23_DPM {
        __File "pb_vl_ftr_read_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_1p_CPM {
        __File "pb_vl_map_col_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_1p_DPM {
        __File "pb_vl_map_col_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_1p_v23_CPM {
        __File "pb_vl_map_col_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_1p_v23_DPM {
        __File "pb_vl_map_col_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_2p_CPM {
        __File "pb_vl_map_col_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_2p_DPM {
        __File "pb_vl_map_col_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_2p_v23_CPM {
        __File "pb_vl_map_col_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_map_col_2p_v23_DPM {
        __File "pb_vl_map_col_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_1p_CPM {
        __File "pb_vl_march13n_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_1p_DPM {
        __File "pb_vl_march13n_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_1p_v23_CPM {
        __File "pb_vl_march13n_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_1p_v23_DPM {
        __File "pb_vl_march13n_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_2p_CPM {
        __File "pb_vl_march13n_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_2p_DPM {
        __File "pb_vl_march13n_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_2p_v23_CPM {
        __File "pb_vl_march13n_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_march13n_2p_v23_DPM {
        __File "pb_vl_march13n_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_1p_CPM {
        __File "pb_vl_pmos_open_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_1p_DPM {
        __File "pb_vl_pmos_open_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_1p_v23_CPM {
        __File "pb_vl_pmos_open_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_1p_v23_DPM {
        __File "pb_vl_pmos_open_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_2p_CPM {
        __File "pb_vl_pmos_open_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_2p_DPM {
        __File "pb_vl_pmos_open_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_2p_v23_CPM {
        __File "pb_vl_pmos_open_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_pmos_open_2p_v23_DPM {
        __File "pb_vl_pmos_open_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_1p_CPM {
        __File "pb_vl_precharge_1p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_1p_DPM {
        __File "pb_vl_precharge_1p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_1p_v23_CPM {
        __File "pb_vl_precharge_1p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_1p_v23_DPM {
        __File "pb_vl_precharge_1p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_2p_CPM {
        __File "pb_vl_precharge_2p_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_2p_DPM {
        __File "pb_vl_precharge_2p_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_2p_v23_CPM {
        __File "pb_vl_precharge_2p_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_precharge_2p_v23_DPM {
        __File "pb_vl_precharge_2p_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ptr_read_CPM {
        __File "pb_vl_ptr_read_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ptr_read_DPM {
        __File "pb_vl_ptr_read_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ptr_read_v23_CPM {
        __File "pb_vl_ptr_read_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pb_vl_ptr_read_v23_DPM {
        __File "pb_vl_ptr_read_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_FdpdmScv_DPM {
        __File "phy_FdpdmScv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_Loopback_Rxdm_DPM {
        __File "phy_Loopback_Rxdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_Loopback_Rxdp_DPM {
        __File "phy_Loopback_Rxdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxHZRxcv_DPM {
        __File "phy_MdHTxHZRxcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxH_Rxdm_DPM {
        __File "phy_MdHTxH_Rxdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxH_Rxdp_DPM {
        __File "phy_MdHTxH_Rxdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxLZRxcv_DPM {
        __File "phy_MdHTxLZRxcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxL_Rxdm_DPM {
        __File "phy_MdHTxL_Rxdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdHTxL_Rxdp_DPM {
        __File "phy_MdHTxL_Rxdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxHZRxcv_DPM {
        __File "phy_MdLTxHZRxcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxH_Rxdm_DPM {
        __File "phy_MdLTxH_Rxdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxH_Rxdp_DPM {
        __File "phy_MdLTxH_Rxdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxLZRxcv_DPM {
        __File "phy_MdLTxLZRxcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxL_Rxdm_DPM {
        __File "phy_MdLTxL_Rxdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_MdLTxL_Rxdp_DPM {
        __File "phy_MdLTxL_Rxdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_Sdm__Tdm_DPM {
        __File "phy_Sdm__Tdm_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_Sdp__Tdp_DPM {
        __File "phy_Sdp__Tdp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SdpdmTcv_DPM {
        __File "phy_SdpdmTcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuHPdHpuLSwLImv_DPM {
        __File "phy_SuHPdHpuLSwLImv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuHPdLPuHSwHImv_DPM {
        __File "phy_SuHPdLPuHSwHImv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuHPdLPuHSwLImv_DPM {
        __File "phy_SuHPdLPuHSwLImv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuHPdLPuLSwLImv_DPM {
        __File "phy_SuHPdLPuLSwLImv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuLPdHPuHSwHSpi_DPM {
        __File "phy_SuLPdHPuHSwHSpi_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_SuLPdHPuLSwLSpi_DPM {
        __File "phy_SuLPdHPuLSwLSpi_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern phy_loopback_Rxcv_DPM {
        __File "phy_loopback_Rxcv_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern piosc_obs_DPM {
        __File "piosc_obs_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern piosc_trim_DPM {
        __File "piosc_trim_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pwm_0_int_check_CPM {
        __File "pwm_0_int_check_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pwm_0_int_check_DPM {
        __File "pwm_0_int_check_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pwm_1_int_check_CPM {
        __File "pwm_1_int_check_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern pwm_1_int_check_DPM {
        __File "pwm_1_int_check_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern qei0dirintlpbk_CPM {
        __File "qei0dirintlpbk_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern qei0dirintlpbk_DPM {
        __File "qei0dirintlpbk_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern qei1dirintlpbk_CPM {
        __File "qei1dirintlpbk_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern qei1dirintlpbk_DPM {
        __File "qei1dirintlpbk_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern sleep_DPM {
        __File "sleep_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern sleep_ldo_byp_DPM {
        __File "sleep_ldo_byp_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern sleep_ldo_en_DPM {
        __File "sleep_ldo_en_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi0_loopback_pll_b_CPM {
        __File "ssi0_loopback_pll_b_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi0_loopback_pll_b_DPM {
        __File "ssi0_loopback_pll_b_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi1_loopback_pll_b_CPM {
        __File "ssi1_loopback_pll_b_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi1_loopback_pll_b_DPM {
        __File "ssi1_loopback_pll_b_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi2_loopback_pll_b_CPM {
        __File "ssi2_loopback_pll_b_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi2_loopback_pll_b_DPM {
        __File "ssi2_loopback_pll_b_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi3_loopback_pll_b_CPM {
        __File "ssi3_loopback_pll_b_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern ssi3_loopback_pll_b_DPM {
        __File "ssi3_loopback_pll_b_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern switch_cell_can0_pd_DPM {
        __File "switch_cell_can0_pd_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern switch_cell_can1_pd_DPM {
        __File "switch_cell_can1_pd_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern switch_cell_usb_pd_DPM {
        __File "switch_cell_usb_pd_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern sysctldsldo_pioscpd_CPM {
        __File "sysctldsldo_pioscpd_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern sysctldsldo_pioscpd_DPM {
        __File "sysctldsldo_pioscpd_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern syspll_lock_DPM {
        __File "syspll_lock_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern syspll_lock_max_DPM {
        __File "syspll_lock_max_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern syspll_lock_min_DPM {
        __File "syspll_lock_min_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u1_8bit_mode_DPM {
        __File "u0u1_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u2_8bit_mode_DPM {
        __File "u0u2_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u3_8bit_mode_DPM {
        __File "u0u3_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u4_8bit_mode_DPM {
        __File "u0u4_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u5_8bit_mode_DPM {
        __File "u0u5_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u6_8bit_mode_DPM {
        __File "u0u6_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern u0u7_8bit_mode_DPM {
        __File "u0u7_8bit_mode_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern udma_ping_pong_DPM {
        __File "udma_ping_pong_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern usbphy_CPM {
        __File "usbphy_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern usbphy_DPM {
        __File "usbphy_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern usbpll_lock_DPM {
        __File "usbpll_lock_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer0_reset_pll_v23_CPM {
        __File "wdtimer0_reset_pll_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer0_reset_pll_v23_DPM {
        __File "wdtimer0_reset_pll_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer1_reset_pll_v23_CPM {
        __File "wdtimer1_reset_pll_v23_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer1_reset_pll_v23_DPM {
        __File "wdtimer1_reset_pll_v23_DPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer1_reset_pll_v24_CPM {
        __File "wdtimer1_reset_pll_v24_CPM";
        __Path "./Patterns/Ascii";
    }
    __Pattern wdtimer1_reset_pll_v24_DPM {
        __File "wdtimer1_reset_pll_v24_DPM";
        __Path "./Patterns/Ascii";
    }
}

/*=============================================================================*/
/*============================ Threads Definitions ============================*/
/*=============================================================================*/

          /***********************************************************/
          /***               Build Threads                         ***/
          /***********************************************************/
          /***                                                     ***/
          /*** This section builds the pattern threads that can be ***/
          /*** used in the test program. Pattern threads defined   ***/
          /*** sequences of patterns that can be referenced in     ***/
          /*** tests in the test program. Critical entries are     ***/
          /***    Thread       = Name of this pattern sequence     ***/
          /***    MaxFrequency = FrequencyMode of tester for this  ***/
          /***                   pattern.                          ***/
          /***                   TI standard program has           ***/
          /***                   pre-defined the two values        ***/
          /***                   ModeSVM (16ns) and                ***/
          /***                   ModeDVM (8ns). These values       ***/
          /***                   merely set the tester mode,       ***/
          /***                   otherwise the times have no       ***/
          /***                   real meaning.                     ***/
          /***    Row          = Defines one subaction in the      ***/
          /***                   thread                            ***/
          /***    ThreadAction = The action for this row (Enter,   ***/
          /***                   Continue, EnterExit are a few)    ***/
          /***    Pattern      = The Cache name of a pattern on    ***/
          /***                   which to take this action         ***/
          /***       OR                                            ***/
          /***    PatternLabel = The Cache name and a label in the ***/
          /***                   pattern on which to take this     ***/
          /***                   action                            ***/
          /***                                                     ***/
          /***********************************************************/

__Thread ANALOG_FSUSB_PUPD_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = phy_MdHTxHZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdHTxLZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdLTxHZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdLTxLZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdHpuLSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuHSwHImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuHSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuLSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuLPdHPuHSwHSpi_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = phy_SuLPdHPuLSwLSpi_DPM;
    }
}

__Thread ANALOG_TRIM_TRIM_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = bg_temp_trim_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = iref_trim_DPM;
    }
}

__Thread ANALOG_USB_CHG_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = phy_Sdm__Tdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SdpdmTcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = phy_Sdp__Tdp_DPM;
    }
}

__Thread ANALOG_USB_OTG_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = otg_5vprotection_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SidMeasIddH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SvblhMs_endH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SvblhMs_vldH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = otg_SvblhMvbvldH_DPM;
    }
}

__Thread ANA_MEAS_FSUSB_PUPD_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = phy_MdHTxHZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdHTxLZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdLTxHZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_MdLTxLZRxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdHpuLSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuHSwHImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuHSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuHPdLPuLSwLImv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SuLPdHPuHSwHSpi_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = phy_SuLPdHPuLSwLSpi_DPM;
    }
}

__Thread ANA_MEAS_USB_CHG_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = phy_Sdm__Tdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = phy_SdpdmTcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = phy_Sdp__Tdp_DPM;
    }
}

__Thread ANA_MEAS_USB_OTG_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = otg_5vprotection_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SidMeasIddH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SvblhMs_endH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = otg_SvblhMs_vldH_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = otg_SvblhMvbvldH_DPM;
    }
}

__Thread BIST_DIAG_200 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = pb_pb_march13n_rep_DPM;
    }
}

__Thread BIST_MEMORY_VBOXLO_33 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_CPM.pb_vl_down2_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_CPM.pb_vl_down2_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_down2_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_CPM.pb_vl_down2_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_CPM.pb_vl_down2_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_down2_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_CPM.pb_vl_dtxn2_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_CPM.pb_vl_dtxn2_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_dtxn2_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_CPM.pb_vl_dtxn2_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_CPM.pb_vl_dtxn2_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_dtxn2_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_CPM.pb_vl_flip10_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_CPM.pb_vl_flip10_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_flip10_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_2p_CPM.pb_vl_flip10_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_2p_CPM.pb_vl_flip10_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_flip10_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_CPM.pb_vl_ftr_read_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_CPM.pb_vl_ftr_read_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_ftr_read_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_CPM.pb_vl_map_col_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_CPM.pb_vl_map_col_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_map_col_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_CPM.pb_vl_map_col_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_CPM.pb_vl_map_col_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_map_col_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_CPM.pb_vl_march13n_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_CPM.pb_vl_march13n_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_march13n_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_CPM.pb_vl_march13n_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_CPM.pb_vl_march13n_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_march13n_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_CPM.pb_vl_pmos_open_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_CPM.pb_vl_pmos_open_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_pmos_open_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_CPM.pb_vl_pmos_open_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_CPM.pb_vl_pmos_open_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_pmos_open_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_CPM.pb_vl_precharge_1p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_CPM.pb_vl_precharge_1p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_precharge_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_CPM.pb_vl_precharge_2p_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_CPM.pb_vl_precharge_2p_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_precharge_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_CPM.pb_vl_ptr_read_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_CPM.pb_vl_ptr_read_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_ptr_read_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_v23_CPM.pb_vl_ptr_read_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_v23_CPM.pb_vl_ptr_read_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_ptr_read_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_v23_CPM.pb_vl_precharge_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_v23_CPM.pb_vl_precharge_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_precharge_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_v23_CPM.pb_vl_precharge_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_v23_CPM.pb_vl_precharge_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_precharge_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_v23_CPM.pb_vl_pmos_open_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_v23_CPM.pb_vl_pmos_open_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_pmos_open_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_v23_CPM.pb_vl_pmos_open_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_v23_CPM.pb_vl_pmos_open_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_pmos_open_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_v23_CPM.pb_vl_march13n_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_v23_CPM.pb_vl_march13n_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_march13n_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_v23_CPM.pb_vl_march13n_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_v23_CPM.pb_vl_march13n_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_march13n_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_v23_CPM.pb_vl_map_col_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_v23_CPM.pb_vl_map_col_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_map_col_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_v23_CPM.pb_vl_map_col_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_v23_CPM.pb_vl_map_col_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_map_col_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_v23_CPM.pb_vl_ftr_read_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_v23_CPM.pb_vl_ftr_read_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_ftr_read_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_2p_v23_CPM.pb_vl_flip10_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_2p_v23_CPM.pb_vl_flip10_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_flip10_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_v23_CPM.pb_vl_flip10_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_v23_CPM.pb_vl_flip10_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_flip10_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_v23_CPM.pb_vl_dtxn2_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_v23_CPM.pb_vl_dtxn2_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_dtxn2_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_v23_CPM.pb_vl_dtxn2_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_v23_CPM.pb_vl_dtxn2_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_dtxn2_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_v23_CPM.pb_vl_down2_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_v23_CPM.pb_vl_down2_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_down2_2p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_v23_CPM.pb_vl_down2_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_v23_CPM.pb_vl_down2_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_vl_down2_1p_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread BIST_PROD_33 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = pb_pb_down2_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_dtxn2_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_flip10_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_ftr_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_mapcol_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_march13n_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_precharge_1p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_ptr_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_wrenz_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = pb_pb_pmos_open_1p_v22_DPM;
    }
}

__Thread BIST_PROD_33_1 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = pb_pb_down2_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_dtxn2_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_flip10_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_mapcol_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_march13n_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = pb_pb_pmos_open_2p_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = pb_pb_precharge_2p_DPM;
    }
}

__Thread BURNIN_200 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = bi_atpg_a2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = bi_atpg7_DPM;
    }
}

__Thread CHECK_ROM_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_CheckROM_norm_DPM;
    }
}

__Thread CheckROM_norm_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_CheckROM_norm_DPM;
    }
}

__Thread DC_PARA_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = dcpara_ioz_pd_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = dcpara_ioz_pu_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = dcpara_ioz_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = dcpara_DPM;
    }
}

__Thread DC_PM01_dcpara {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.dcpara_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.DC_PM1"; }
    }
}

__Thread DC_PM01_dcpara_ioz_pd {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.dcpara_ioz_pd_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.DC_PM1"; }
    }
}

__Thread DC_PM02_dcpara {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.dcpara_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.DC_PM2"; }
    }
}

__Thread DC_PM02_dcpara_ioz_pd {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.dcpara_ioz_pd_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.DC_PM2"; }
    }
}

__Thread DC_PM03_dcpara {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.dcpara_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.DC_PM3"; }
    }
}

__Thread DC_PM03_dcpara_ioz_pd {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.dcpara_ioz_pd_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.DC_PM3"; }
    }
}

__Thread DC_PM04_dcpara {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.dcpara_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_DPM.DC_PM4"; }
    }
}

__Thread DC_PM04_dcpara_ioz_pd {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.dcpara_ioz_pd_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "dcpara_ioz_pd_DPM.DC_PM4"; }
    }
}

__Thread DIAG_VHI_200_pb_pb_march13n_rep {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = pb_pb_march13n_rep_DPM;
    }
}

__Thread DIAG_VLO_200_pb_pb_march13n_rep {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = pb_pb_march13n_rep_DPM;
    }
}

__Thread EFUSE_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_CheckROM_Mg0_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_CheckROM_norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0001_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0011_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1010_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1110_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg0_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_RunAutoload_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_InitCheck_DPM;
    }
}

__Thread FUNC_GROS_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = candmalbtx0rx1_1beat_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = candmalbtx1rx0_1beat_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = dmled_read_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = dmled_test_number_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = eeprom_wdone_int_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "fancontrol_reg_rdwr_CPM.fancontrol_reg_rdwr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "fancontrol_reg_rdwr_CPM.fancontrol_reg_rdwr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = fancontrol_reg_rdwr_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt0_1s_32_down_CPM.gpt0_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt0_1s_32_down_CPM.gpt0_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt0_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt10_per_32_down_CPM.gpt10_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt10_per_32_down_CPM.gpt10_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt10_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt11_per_32_down_CPM.gpt11_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt11_per_32_down_CPM.gpt11_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt11_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt1_1s_32_down_CPM.gpt1_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt1_1s_32_down_CPM.gpt1_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt1_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt2_1s_32_down_CPM.gpt2_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt2_1s_32_down_CPM.gpt2_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt2_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt3_1s_32_down_CPM.gpt3_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt3_1s_32_down_CPM.gpt3_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt3_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt4_1s_32_down_CPM.gpt4_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt4_1s_32_down_CPM.gpt4_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt4_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt5_1s_32_down_CPM.gpt5_1s_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt5_1s_32_down_CPM.gpt5_1s_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt5_1s_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt6_per_32_down_CPM.gpt6_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt6_per_32_down_CPM.gpt6_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt6_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt7_per_32_down_CPM.gpt7_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt7_per_32_down_CPM.gpt7_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt7_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt8_per_32_down_CPM.gpt8_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt8_per_32_down_CPM.gpt8_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt8_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "gpt9_per_32_down_CPM.gpt9_per_32_down_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "gpt9_per_32_down_CPM.gpt9_per_32_down_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = gpt9_per_32_down_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_hibn_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_hysvreg_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_lbc_vbat19_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_lbc_vbat21_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_lbc_vbat23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_lbc_vbat25_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibana_vbapiok_DPM;
    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1010 of global.h of the VLCT program) -- BJP
//    __Row {
//        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
//        __Pattern = hibernate_reg_rw_DPM;
//    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibernate_rtcGen_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibernate_rtcSec_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibernate_vabort_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibernate_vbatchk_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = hibosc_obs_DPM;
    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1009 of global.h of the VLCT program) -- BJP
//    __Row {
//        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
//        __Pattern = hib_rtcsec_subsec_DPM;
//    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = i2c0_dma_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = i2c1_dma_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = i2c2_dma_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = i2c3_dma_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = i2c4_dma_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = iosc_obs_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "lpc_reg_access_CPM.lpc_reg_access_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "lpc_reg_access_CPM.lpc_reg_access_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = lpc_reg_access_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = OTG_ChgdischgVbusM_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_FdpdmScv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_loopback_Rxcv_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_Loopback_Rxdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_Loopback_Rxdp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdHTxH_Rxdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdHTxH_Rxdp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdHTxL_Rxdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdHTxL_Rxdp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdLTxH_Rxdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdLTxH_Rxdp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdLTxL_Rxdm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = phy_MdLTxL_Rxdp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = piosc_obs_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pwm_0_int_check_CPM.pwm_0_int_check_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pwm_0_int_check_CPM.pwm_0_int_check_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pwm_0_int_check_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pwm_1_int_check_CPM.pwm_1_int_check_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pwm_1_int_check_CPM.pwm_1_int_check_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pwm_1_int_check_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "qei0dirintlpbk_CPM.qei0dirintlpbk_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "qei0dirintlpbk_CPM.qei0dirintlpbk_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = qei0dirintlpbk_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "qei1dirintlpbk_CPM.qei1dirintlpbk_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "qei1dirintlpbk_CPM.qei1dirintlpbk_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = qei1dirintlpbk_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = switch_cell_can0_pd_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = switch_cell_can1_pd_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = switch_cell_usb_pd_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "sysctldsldo_pioscpd_CPM.sysctldsldo_pioscpd_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "sysctldsldo_pioscpd_CPM.sysctldsldo_pioscpd_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = sysctldsldo_pioscpd_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = syspll_lock_max_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = syspll_lock_min_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = syspll_lock_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u1_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u2_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u3_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u4_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u5_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u6_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u7_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = udma_ping_pong_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "usbphy_CPM.usbphy_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "usbphy_CPM.usbphy_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = usbphy_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = usbpll_lock_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = fl_sw_dl_v30_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = fl_sw_dl_dpse_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = ahbm_write_buffer_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = fl_otp_loader_v21_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = fl_sw_dl_a1a3_4_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = fl_sw_dl_a2_2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = sleep_ldo_en_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = sleep_ldo_byp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_ldo_byp_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_ldo_en_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_ldo_en_v2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = deep_sleep_ldo_byp_v2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base1;
    }
}

__Thread FUNC_GROS_100_1 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = piosc_trim_DPM;
    }
}

__Thread FUNC_GROS_100_2 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = sleep_DPM;
    }
}

__Thread FUNC_GROS_100_3 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi0_loopback_pll_b_CPM.ssi0_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "ssi0_loopback_pll_b_CPM.ssi0_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi0_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi1_loopback_pll_b_CPM.ssi1_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "ssi1_loopback_pll_b_CPM.ssi1_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi1_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi2_loopback_pll_b_CPM.ssi2_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "ssi2_loopback_pll_b_CPM.ssi2_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi2_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi3_loopback_pll_b_CPM.ssi3_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "ssi3_loopback_pll_b_CPM.ssi3_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi3_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_GROS_100_4 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "wdtimer0_reset_pll_v23_CPM.wdtimer0_reset_pll_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "wdtimer0_reset_pll_v23_CPM.wdtimer0_reset_pll_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = wdtimer0_reset_pll_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "wdtimer1_reset_pll_v23_CPM.wdtimer1_reset_pll_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "wdtimer1_reset_pll_v23_CPM.wdtimer1_reset_pll_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = wdtimer1_reset_pll_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "wdtimer1_reset_pll_v24_CPM.wdtimer1_reset_pll_v24_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "wdtimer1_reset_pll_v24_CPM.wdtimer1_reset_pll_v24_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = wdtimer1_reset_pll_v24_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_GROS_166p66 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = flash_int_check_DPM;
    }
}

__Thread FUNC_IDDQ_33 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_chkr_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_invchkr_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_ones_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_zeroes_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_v23_CPM.pb_iddq_ret_zeroes_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_v23_CPM.pb_iddq_ret_zeroes_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_zeroes_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_v23_CPM.pb_iddq_ret_ones_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_v23_CPM.pb_iddq_ret_ones_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_ones_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_v23_CPM.pb_iddq_ret_invchkr_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_v23_CPM.pb_iddq_ret_invchkr_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_invchkr_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_v23_CPM.pb_iddq_ret_chkr_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_v23_CPM.pb_iddq_ret_chkr_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_chkr_v23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_IDDQ_50 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread FUNC_SCAN_AC_50 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_10_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_11_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_12_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_13_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_14_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_15_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_16_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_17_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_18_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_19_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_1_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_20_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_21_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_2_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_3_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_4_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_5_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_6_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_7_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_8_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_9_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_fles_1_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_st_tk_fles_2_v22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base1;
    }
}

__Thread FUNC_SCAN_AC_50_1 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_10_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_1_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_3_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_4_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_5_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_6_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_7_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_8_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_ntk_80_80_9_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_10_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_11_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_12_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_13_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_14_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_15_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_16_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_17_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_18_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_19_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_1_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_20_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_21_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_22_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_23_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_24_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_25_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_26_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_27_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_28_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_29_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_3_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_30_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_31_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_32_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_33_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_34_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_35_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_36_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_37_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_38_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_39_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_40_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_41_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_42_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_43_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_44_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_45_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_46_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_47_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_4_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_5_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_6_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_8_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_80_80_9_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_SCAN_AC_50_2 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_16_16_2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_16_16_3_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_SCAN_AC_50_3 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_25_25_1_DPM;
    }
}

__Thread FUNC_SCAN_AC_50_4 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_33_33_1_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_33_33_2_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
}

__Thread FUNC_SCAN_AC_50_5 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = scan_base2;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = a_tft_tk_40_40_1_DPM;
    }
}

__Thread Iddq_PM01_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM1"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM02_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM2"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_chkr {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_chkr_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_chkr_v23 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_v23_CPM.pb_iddq_ret_chkr_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_v23_CPM.pb_iddq_ret_chkr_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_chkr_v23_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_invchkr {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_invchkr_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_invchkr_v23 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_v23_CPM.pb_iddq_ret_invchkr_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_v23_CPM.pb_iddq_ret_invchkr_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_invchkr_v23_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_ones {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_ones_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_ones_v23 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_v23_CPM.pb_iddq_ret_ones_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_v23_CPM.pb_iddq_ret_ones_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_ones_v23_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_zeroes {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_zeroes_DPM;
    }
}

__Thread Iddq_PM02_pb_iddq_ret_zeroes_v23 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_v23_CPM.pb_iddq_ret_zeroes_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_v23_CPM.pb_iddq_ret_zeroes_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = pb_iddq_ret_zeroes_v23_DPM;
    }
}

__Thread Iddq_PM03_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM3"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM04_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM4"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM05_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM5"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM06_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM6"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM07_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM7"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM08_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM8"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM09_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM9"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM10_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM10"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM11_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM11"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread Iddq_PM12_a_iddq {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.Iddq_PM12"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = a_iddq_DPM;
    }
}

__Thread InitCheck_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_CheckROM_norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0001_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0011_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1010_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1110_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg0_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_RunAutoload_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_InitCheck_DPM;
    }
}

__Thread LoadFuseData_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_LoadFuseData_0001_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0011_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1010_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_LoadFuseData_1110_DPM;
    }
}

__Thread PROG_EFUSE_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_Program_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_Program_Mg1B_DPM;
    }
}

__Thread Program_Mg1A_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Program_Mg1A_DPM;
    }
}

__Thread Program_Mg1B_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Program_Mg1B_DPM;
    }
}

__Thread READ_EFUSE_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_LoadFuseData_0001_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0011_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1010_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1110_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg0_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_Read_Norm_DPM;
    }
}

__Thread Read_Mg0_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Read_Mg0_DPM;
    }
}

__Thread Read_Mg1A_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Read_Mg1A_DPM;
    }
}

__Thread Read_Mg1B_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Read_Mg1B_DPM;
    }
}

__Thread Read_Norm_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_Read_Norm_DPM;
    }
}

__Thread RunAutoload_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = FF_RunAutoload_DPM;
    }
}

__Thread SMART_RFLX_PROG_100 {
    __ExecutionType = __Expression { __String = "if(ContinueOnFail,Thr_exec:Serial,Thr_exec:Default)"; }
    __MaxFrequency = __Expression { __String = "SVM"; }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __Pattern = FF_CheckROM_norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0001_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_0011_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1010_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_LoadFuseData_1110_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Program_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg0_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1A_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Mg1B_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_Read_Norm_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Continue"; }
        __Pattern = FF_RunAutoload_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Exit"; }
        __Pattern = FF_InitCheck_DPM;
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/pinlists.evo                                   */
/* Creation Date  : Tue Jan  3 17:12:49 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

__PinGroup ALLSUPPLIES {
	__Group = __Expression { __String = "VDDA+VDDS+VDDAR+VDD"; }
}

__PinGroup DCREF_PINS {
	__Group = __Expression { __String = "VPP+VBAT+VNWA+VDDEEPROM+VDDPGM"; }
}

__PinGroup ALLPINS {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+FLASH3_70+FLASH4_71+FLASH5_72+LPC0A20_118+LPC0AD0_137+
			      LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+
			      LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+OSC0_124+OSC1_125+
			      PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+
			      PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+
			      PG7_56+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+
			      PJ2_160+PJ3_161+PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+
			      PN2_27+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+POR_ORIDE_164+PP0_109+PP1_108+PP2_58+
			      PP3_106+PP4_107+PP5_59+PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+
			      PQ7_65+RAWPOR_N_TEST_162+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TDO_149+TMS_151+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+XOSC0_100+XOSC1_102+
			      hib_n_99+ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47+rbias_9+wake_n_98"; }
}

__PinGroup FUNC_IN_OSC {
	__Group = __Expression { __String = "OSC0_124"; }
}

__PinGroup FUNC_IN_SPFUN {
	__Group = __Expression { __String = "XOSC0_100"; }
}

__PinGroup FUNC_IO_CMOS {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB0_129+PB1_130+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+
			      PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+
			      PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+
			      PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+
			      PQ6_64+PQ7_65+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TDO_149+TMS_151+TRD0_90+
			      TRD1_89+TRD2_88+TRD3_87+hib_n_99+ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47+
			      wake_n_98"; }
}

__PinGroup FUNC_IO_SPFUN {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16+rbias_9"; }
}

__PinGroup FUNC_IO_TTL {
	__Group = __Expression { __String = "USB0DM_127+USB0DP_128"; }
}

__PinGroup FUNC_IO_WIRE {
	__Group = __Expression { __String = "FLASH3_70+FLASH4_71+FLASH5_72+POR_ORIDE_164+
			      RAWPOR_N_TEST_162"; }
}

__PinGroup FUNC_OUT_OSC {
	__Group = __Expression { __String = "OSC1_125"; }
}

__PinGroup FUNC_OUT_SPFUN {
	__Group = __Expression { __String = "XOSC1_102"; }
}

__PinGroup IDDQ_OUT {
	__Group = __Expression { __String = "OSC1_125+XOSC1_102"; }
}

__PinGroup ALLINS {
	__Group = __Expression { __String = "OSC0_124+XOSC0_100"; }
}

__PinGroup ALLIOS {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+FLASH3_70+FLASH4_71+FLASH5_72+LPC0A20_118+LPC0AD0_137+
			      LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+
			      LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+
			      PA5_51+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+PF6_85+
			      PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+PH1_40+
			      PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+POR_ORIDE_164+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+
			      PP5_59+PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+
			      RAWPOR_N_TEST_162+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TDO_149+TMS_151+TRD0_90+
			      TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47+rbias_9+wake_n_98"; }
}

__PinGroup ALLOUTS {
	__Group = __Expression { __String = "OSC1_125+XOSC1_102"; }
}

__PinGroup ALL_PINS {
	__Group = __Expression { __String = "ALLPINS"; }
}

__PinGroup ANALOG_CONTY_GND {
	__Group = __Expression { __String = "AIN00_17+AIN01_18+AIN02_19+AIN04_193+ATEST+FLTP1+
			      FLTP2"; }
}

__PinGroup ANALOG_CONTY_PWR {
	__Group = __Expression { __String = "AIN00_17+AIN01_18+AIN02_19+AIN04_193+ATEST+FLTP1+
			      FLTP2"; }
}

__PinGroup CALPINS {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+FLASH3_70+FLASH4_71+FLASH5_72+LPC0A20_118+LPC0AD0_137+
			      LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+
			      LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+OSC0_124+OSC1_125+
			      PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+
			      PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+
			      PG7_56+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+
			      PJ2_160+PJ3_161+PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+
			      PN2_27+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+POR_ORIDE_164+PP0_109+PP1_108+PP2_58+
			      PP3_106+PP4_107+PP5_59+PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+
			      PQ7_65+RAWPOR_N_TEST_162+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TDO_149+TMS_151+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+XOSC0_100+XOSC1_102+
			      hib_n_99+ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47+rbias_9+wake_n_98"; }
}

__PinGroup CRES_PINS1 {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+
			      PG5_76+PG7_56+PJ1_159+PJ2_160+PJ3_161+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+
			      PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+
			      PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+RST_n_122+
			      TCK_152+TDI_150+TDO_149+TMS_151+TRD0_90+TRD1_89+TRD2_88+TRD3_87+o_cpu_done_46+
			      o_cpu_fail_47"; }
}

__PinGroup CRES_PINS2 {
	__Group = __Expression { __String = "AIN00_17+AIN01_18+AIN02_19+AIN04_193+AIN05_192+AIN06_191+
			      AIN07_190+AIN08_189+AIN09_188+AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+
			      AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+AIN22_179+
			      AIN23_178+ATEST+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+FLASH3_70+
			      FLASH4_71+FLASH5_72+FLTP1+FLTP2+OSC0_124+OSC1_125+PB0_129+PB1_130+PB6_10+PB7_15+
			      PG6_57+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ6_176+
			      PJ7_177+PN2_27+POR_ORIDE_164+PQ0_5+PQ1_6+PQ2_16+RAWPOR_N_TEST_162+USB0DM_127+
			      USB0DP_128+XOSC0_100+XOSC1_102+hib_n_99+ia_ftestadc_132+rbias_9+wake_n_98"; }
}

__PinGroup Domain1PinList {
	__Group = __Expression { __String = "FUNC_IN_OSC+FUNC_IN_SPFUN+FUNC_IO_CMOS+FUNC_IO_SPFUN+
			      FUNC_IO_TTL+FUNC_IO_WIRE+FUNC_OUT_OSC+FUNC_OUT_SPFUN"; }
}

__PinGroup IDDQ_a_iddq_PM1 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM10 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM11 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM12 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM2 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM3 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM4 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM5 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM6 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM7 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM8 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_a_iddq_PM9 {
	__Group = __Expression { __String = "AIN11_182+C0_n_42+C0_p_43+C1_n_45+C1_p_44+IDDQ_OUT+PF3_91+
			      TDO_149+TRD0_90+TRD1_89+TRD2_88"; }
}

__PinGroup IDDQ_pb_iddq_ret_chkr_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_chkr_v23_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_invchkr_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_invchkr_v23_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_ones_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_ones_v23_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_zeroes_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup IDDQ_pb_iddq_ret_zeroes_v23_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+AIN12_4+
			      AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+AIN19_26+AIN20_181+AIN21_180+
			      AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+C2_n_175+C2_p_174+IDDQ_OUT+
			      LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+LPC0CLKRUN_n_119+
			      LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+LPC0RESET_n_135+LPC0SCI_n_120+
			      LPC0SERIRQ_117+PA6_54+PA7_55+PB0_129+PB1_130+PB2_131+PB6_10+PB7_15+PF3_91+PF5_86+
			      PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PH0_41+
			      PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+PH7_28+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      PJ6_176+PJ7_177+PK4_144+PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN2_27+PN3_153+
			      PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+
			      PP6_163+PQ0_5+PQ1_6+PQ2_16+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+RAWPOR_n_60+
			      TRD0_90+TRD1_89+TRD2_88+TRD3_87+USB0DM_127+USB0DP_128+hib_n_99+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup LEAK_IIHPD_UNK_CMOS_dcpara_PM3 {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB0_129+PB1_130+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+
			      PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+
			      PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+
			      PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+
			      PQ6_64+PQ7_65+RAWPOR_n_60+TCK_152+TMS_151+TRD0_90+TRD1_89+TRD2_88+TRD3_87+
			      ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup LEAK_IIHPD_UNK_TTL_dcpara_PM3 {
	__Group = __Expression { __String = "USB0DM_127+USB0DP_128"; }
}

__PinGroup LEAK_IIHPD_UNK_dcpara_ioz_pd_PM3 {
	__Group = __Expression { __String = "TDI_150"; }
}

__PinGroup LEAK_IILPU_UNK_CMOS_dcpara_PM1 {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB0_129+PB1_130+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+
			      PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+
			      PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+
			      PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+
			      PQ6_64+PQ7_65+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TMS_151+TRD0_90+TRD1_89+
			      TRD2_88+TRD3_87+ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup LEAK_IILPU_UNK_TTL_dcpara_PM1 {
	__Group = __Expression { __String = "USB0DM_127+USB0DP_128"; }
}

__PinGroup LEAK_IIN_EVEN_OSC {
	__Group = __Expression { __String = "OSC0_124"; }
}

__PinGroup LEAK_IIN_EVEN_SPFUN {
	__Group = __Expression { __String = "XOSC0_100"; }
}

__PinGroup LEAK_IIOH_dcpara_PM3 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16"; }
}

__PinGroup LEAK_IIOL_dcpara_PM1 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16"; }
}

__PinGroup LEAK_IOZ_ODD_dcpara_ioz_pd_PM4 {
	__Group = __Expression { __String = "OSC1_125"; }
}

__PinGroup OPEN_EVEN_PINS_GND {
	__Group = __Expression { __String = "AIN05_192+AIN07_190+AIN09_188+AIN11_182+AIN12_4+AIN14_2+
			      AIN17_24+AIN19_26+AIN21_180+AIN23_178+C0_n_42+C1_p_44+C2_p_174+FLASH3_70+
			      FLASH5_72+LPC0A20_118+LPC0AD1_138+LPC0AD3_140+LPC0CLK_116+LPC0FRAME_n_136+
			      LPC0SCI_n_120+OSC0_124+PA2_48+PA4_50+PA6_54+PB1_130+PB6_10+PF5_86+PF7_84+PG1_80+
			      PG3_78+PG5_76+PG7_56+PH1_40+PH3_36+PH5_30+PH7_28+PJ0_158+PJ2_160+PJ6_176+PK4_144+
			      PK6_142+PM7_110+PN5_96+PN7_94+POR_ORIDE_164+PP1_108+PP2_58+PP3_106+PQ1_6+PQ2_16+
			      PQ4_62+PQ6_64+RAWPOR_N_TEST_162+RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TRD0_90+
			      TRD2_88+USB0DP_128+XOSC0_100+XOSC1_102+ia_ftestadc_132+o_cpu_done_46+
			      wake_n_98"; }
}

__PinGroup OPEN_ODD_PINS_GND {
	__Group = __Expression { __String = "AIN06_191+AIN08_189+AIN10_183+AIN13_3+AIN15_1+AIN16_23+
			      AIN18_25+AIN20_181+AIN22_179+C0_p_43+C1_n_45+C2_n_175+FLASH4_71+LPC0AD0_137+
			      LPC0AD2_139+LPC0CLKRUN_n_119+LPC0PD_n_121+LPC0RESET_n_135+LPC0SERIRQ_117+
			      OSC1_125+PA3_49+PA5_51+PA7_55+PB0_129+PB2_131+PB7_15+PF3_91+PF6_85+PG0_81+PG2_79+
			      PG4_77+PG6_57+PH0_41+PH2_37+PH4_35+PH6_29+PJ1_159+PJ3_161+PJ7_177+PK5_143+
			      PK7_141+PM6_111+PN2_27+PN3_153+PN4_97+PN6_95+PP0_109+PP4_107+PP5_59+PP6_163+
			      PQ0_5+PQ3_61+PQ5_63+PQ7_65+TDO_149+TMS_151+TRD1_89+TRD3_87+USB0DM_127+hib_n_99+
			      o_cpu_fail_47+rbias_9"; }
}

__PinGroup PARA_VOH_CMOS_dcpara_PM4 {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB0_129+PB1_130+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+
			      PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+
			      PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+
			      PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+
			      PQ6_64+PQ7_65+RAWPOR_n_60+TRD0_90+TRD1_89+TRD2_88+TRD3_87+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup PARA_VOH_SPFUN_dcpara_PM4 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16"; }
}

__PinGroup PARA_VOH_dcpara_ioz_pd_PM1 {
	__Group = __Expression { __String = "TDO_149"; }
}

__PinGroup PARA_VOL_CMOS_dcpara_PM2 {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB0_129+PB1_130+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+
			      PG3_78+PG4_77+PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+
			      PK5_143+PK6_142+PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+
			      PP0_109+PP1_108+PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+
			      PQ6_64+PQ7_65+RAWPOR_n_60+TRD0_90+TRD1_89+TRD2_88+TRD3_87+ia_ftestadc_132+
			      o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup PARA_VOL_SPFUN_dcpara_PM2 {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16"; }
}

__PinGroup PARA_VOL_dcpara_ioz_pd_PM2 {
	__Group = __Expression { __String = "TDO_149"; }
}

__PinGroup PINS_ANAPACK {
	__Group = __Expression { __String = "AIN05_192+AIN06_191+AIN07_190+AIN08_189+AIN09_188+
			      AIN10_183+AIN11_182+AIN12_4+AIN13_3+AIN14_2+AIN15_1+AIN16_23+AIN17_24+AIN18_25+
			      AIN19_26+AIN20_181+AIN21_180+AIN22_179+AIN23_178+C0_n_42+C0_p_43+C1_n_45+C1_p_44+
			      C2_n_175+C2_p_174+PB6_10+PB7_15+PH0_41+PH1_40+PH2_37+PH3_36+PH4_35+PH5_30+PH6_29+
			      PH7_28+PJ6_176+PJ7_177+PN2_27+PQ0_5+PQ1_6+PQ2_16+rbias_9"; }
}

__PinGroup PINS_BAFTHRUNEFT {
	__Group = __Expression { __String = "FLASH3_70+FLASH4_71+FLASH5_72+POR_ORIDE_164+
			      RAWPOR_N_TEST_162"; }
}

__PinGroup PINS_GPIOHIB {
	__Group = __Expression { __String = "hib_n_99+wake_n_98"; }
}

__PinGroup PINS_GPIORET {
	__Group = __Expression { __String = "LPC0A20_118+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+
			      LPC0AD3_140+LPC0CLKRUN_n_119+LPC0CLK_116+LPC0FRAME_n_136+LPC0PD_n_121+
			      LPC0RESET_n_135+LPC0SCI_n_120+LPC0SERIRQ_117+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+
			      PA7_55+PB2_131+PF3_91+PF5_86+PF6_85+PF7_84+PG0_81+PG1_80+PG2_79+PG3_78+PG4_77+
			      PG5_76+PG6_57+PG7_56+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PK4_144+PK5_143+PK6_142+
			      PK7_141+PM6_111+PM7_110+PN3_153+PN4_97+PN5_96+PN6_95+PN7_94+PP0_109+PP1_108+
			      PP2_58+PP3_106+PP4_107+PP5_59+PP6_163+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+
			      RAWPOR_n_60+RST_n_122+TCK_152+TDI_150+TDO_149+TMS_151+TRD0_90+TRD1_89+TRD2_88+
			      TRD3_87+ia_ftestadc_132+o_cpu_done_46+o_cpu_fail_47"; }
}

__PinGroup PINS_GPIOUSB {
	__Group = __Expression { __String = "PB0_129+PB1_130"; }
}

__PinGroup PINS_HIBXOSC {
	__Group = __Expression { __String = "XOSC0_100+XOSC1_102"; }
}

__PinGroup PINS_IOSCHF33FTHY {
	__Group = __Expression { __String = "OSC0_124"; }
}

__PinGroup PINS_OOSCHF33FT_25 {
	__Group = __Expression { __String = "OSC1_125"; }
}

__PinGroup PINS_USB_PHY_6LM {
	__Group = __Expression { __String = "USB0DM_127+USB0DP_128"; }
}

__PinGroup PinDefPins {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+rbias_9+PB6_10+
			      PB7_15+PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+
			      PH4_35+PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+FLASH3_70+FLASH4_71+
			      FLASH5_72+PG5_76+PG4_77+PG3_78+PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+
			      TRD2_88+TRD1_89+TRD0_90+PF3_91+PN7_94+PN6_95+PN5_96+PN4_97+wake_n_98+hib_n_99+
			      XOSC0_100+XOSC1_102+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+LPC0CLK_116+
			      LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+LPC0PD_n_121+RST_n_122+
			      OSC0_124+OSC1_125+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+ia_ftestadc_132+
			      LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+
			      PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+TCK_152+PN3_153+PJ0_158+
			      PJ1_159+PJ2_160+PJ3_161+RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+C2_p_174+
			      C2_n_175+PJ6_176+PJ7_177+AIN23_178+AIN22_179+AIN21_180+AIN20_181+AIN11_182+
			      AIN10_183+AIN09_188+AIN08_189+AIN07_190+AIN06_191+AIN05_192"; }
}

__PinGroup TRIM_CODE_PINS_1 {
	__Group = __Expression { __String = "TDI_150"; }
}


/*============================================================================*/
/*========================== AC PinList Definitions ==========================*/
/*============================================================================*/

__PinGroup AC10_NR_STB {
	__Group = __Expression { __String = "TRD2_88+TRD1_89+USB0DM_127+USB0DP_128+PB0_129+
			      PB1_130"; }
}

__PinGroup AC11_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_fail_47+PA2_48+
			      PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+PP5_59+RAWPOR_n_60+
			      PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+PG2_79+PG1_80+PG0_81+
			      PF7_84+PF6_85+PF5_86+TRD3_87+TRD0_90+PF3_91+PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+
			      PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+
			      LPC0CLKRUN_n_119+LPC0SCI_n_120+LPC0PD_n_121+RST_n_122+PB2_131+ia_ftestadc_132+
			      LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+
			      PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+PN3_153+PJ0_158+PJ1_159+
			      PJ2_160+PJ3_161+RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+C2_p_174+C2_n_175+
			      PJ6_176+PJ7_177+AIN23_178+AIN22_179+AIN21_180+AIN20_181+AIN11_182+AIN09_188+
			      AIN08_189+AIN07_190+AIN06_191+AIN05_192+FLASH3_70+FLASH4_71+FLASH5_72+wake_n_98+
			      hib_n_99+rbias_9"; }
}

__PinGroup AC12_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+
			      PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+
			      PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+
			      LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+
			      LPC0PD_n_121+RST_n_122+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+
			      ia_ftestadc_132+LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+
			      LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+
			      PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+
			      C2_p_174+C2_n_175+PJ6_176+PJ7_177+AIN23_178+AIN22_179+AIN21_180+AIN20_181+
			      AIN11_182+AIN10_183+AIN09_188+AIN08_189+AIN07_190+AIN06_191+AIN05_192+FLASH3_70+
			      FLASH4_71+FLASH5_72+wake_n_98+hib_n_99+rbias_9"; }
}

__PinGroup AC1_NR {
	__Group = __Expression { __String = "XOSC0_100"; }
}

__PinGroup AC1_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+
			      PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+
			      PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+
			      LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+
			      LPC0PD_n_121+RST_n_122+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+
			      ia_ftestadc_132+LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+
			      LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+
			      PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+
			      C2_p_174+C2_n_175+PJ6_176+PJ7_177+AIN23_178+AIN22_179+AIN21_180+AIN20_181+
			      AIN11_182+AIN09_188+AIN08_189+AIN07_190+AIN06_191+AIN05_192+FLASH3_70+FLASH4_71+
			      FLASH5_72+wake_n_98+hib_n_99+rbias_9"; }
}

__PinGroup AC1_RZ_OSC0_124 {
	__Group = __Expression { __String = "OSC0_124"; }
}

__PinGroup AC1_RZ_STB_AIN10_183 {
	__Group = __Expression { __String = "AIN10_183"; }
}

__PinGroup AC1_RZ_STB_OSC0_124 {
	__Group = __Expression { __String = "OSC0_124"; }
}

__PinGroup AC1_RZ_STB_PA3_49 {
	__Group = __Expression { __String = "PA3_49"; }
}

__PinGroup AC1_RZ_STB_TCK_152 {
	__Group = __Expression { __String = "TCK_152"; }
}

__PinGroup AC1_RZ_STB_o_cpu_done_46 {
	__Group = __Expression { __String = "o_cpu_done_46"; }
}

__PinGroup AC1_STB {
	__Group = __Expression { __String = "XOSC1_102+OSC1_125"; }
}

__PinGroup AC2_NR {
	__Group = __Expression { __String = "XOSC0_100+OSC0_124"; }
}

__PinGroup AC2_NR_STB {
	__Group = __Expression { __String = "C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+TRD2_88+TRD1_89+TRD0_90+
			      PF3_91+RST_n_122+PB0_129+PB1_130+ia_ftestadc_132+TDO_149+TDI_150+TMS_151+
			      AIN11_182"; }
}

__PinGroup AC3_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+PG7_56+PG6_57+PP2_58+PP5_59+RAWPOR_n_60+PQ3_61+
			      PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+PG2_79+PG1_80+PG0_81+PF7_84+
			      PF6_85+PF5_86+TRD3_87+PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+
			      PP0_109+PM7_110+PM6_111+LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+
			      LPC0SCI_n_120+LPC0PD_n_121+USB0DM_127+USB0DP_128+PB2_131+LPC0RESET_n_135+
			      LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+
			      PK5_143+PK4_144+PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+RAWPOR_N_TEST_162+
			      PP6_163+POR_ORIDE_164+C2_p_174+C2_n_175+PJ6_176+PJ7_177+AIN23_178+AIN22_179+
			      AIN21_180+AIN20_181+AIN09_188+AIN08_189+AIN07_190+AIN06_191+AIN05_192+FLASH3_70+
			      FLASH4_71+FLASH5_72+wake_n_98+hib_n_99+rbias_9"; }
}

__PinGroup AC4_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+
			      PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+
			      PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+
			      LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+
			      LPC0PD_n_121+RST_n_122+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+
			      ia_ftestadc_132+LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+
			      LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+
			      PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+PP6_163+C2_p_174+C2_n_175+PJ6_176+
			      PJ7_177+AIN23_178+AIN22_179+AIN21_180+AIN20_181+AIN11_182+AIN09_188+AIN08_189+
			      AIN07_190+AIN06_191+AIN05_192+wake_n_98+hib_n_99"; }
}

__PinGroup AC5_NR_STB {
	__Group = __Expression { __String = "RAWPOR_N_TEST_162+POR_ORIDE_164+FLASH3_70+FLASH4_71+
			      FLASH5_72+rbias_9"; }
}

__PinGroup AC6_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+
			      PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+
			      PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+
			      LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+
			      LPC0PD_n_121+RST_n_122+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+
			      ia_ftestadc_132+LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+
			      LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+
			      TCK_152+PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+RAWPOR_N_TEST_162+PP6_163+
			      POR_ORIDE_164+C2_p_174+C2_n_175+PJ6_176+PJ7_177+AIN23_178+AIN22_179+AIN21_180+
			      AIN20_181+AIN11_182+AIN10_183+AIN09_188+AIN08_189+AIN07_190+AIN06_191+AIN05_192+
			      FLASH3_70+FLASH4_71+FLASH5_72+wake_n_98+hib_n_99+rbias_9"; }
}

__PinGroup AC7_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+
			      PP5_59+RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+
			      PG2_79+PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+
			      PN7_94+PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+
			      LPC0CLK_116+LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+
			      LPC0PD_n_121+USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+ia_ftestadc_132+
			      LPC0RESET_n_135+LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+
			      PK7_141+PK6_142+PK5_143+PK4_144+PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+C2_p_174+C2_n_175+PJ6_176+PJ7_177+
			      AIN23_178+AIN22_179+AIN21_180+AIN20_181+AIN11_182+AIN09_188+AIN08_189+AIN07_190+
			      AIN06_191+AIN05_192+FLASH3_70+FLASH4_71+FLASH5_72+wake_n_98+hib_n_99+
			      rbias_9"; }
}

__PinGroup AC8_NR_STB {
	__Group = __Expression { __String = "C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA3_49+RST_n_122+TDO_149+TDI_150+TMS_151"; }
}

__PinGroup AC9_NR_STB {
	__Group = __Expression { __String = "AIN15_1+AIN14_2+AIN13_3+AIN12_4+PQ0_5+PQ1_6+PB6_10+PB7_15+
			      PQ2_16+AIN16_23+AIN17_24+AIN18_25+AIN19_26+PN2_27+PH7_28+PH6_29+PH5_30+PH4_35+
			      PH3_36+PH2_37+PH1_40+PH0_41+C0_n_42+C0_p_43+C1_p_44+C1_n_45+o_cpu_done_46+
			      o_cpu_fail_47+PA2_48+PA4_50+PA5_51+PA6_54+PA7_55+PG7_56+PG6_57+PP2_58+PP5_59+
			      RAWPOR_n_60+PQ3_61+PQ4_62+PQ5_63+PQ6_64+PQ7_65+PG5_76+PG4_77+PG3_78+PG2_79+
			      PG1_80+PG0_81+PF7_84+PF6_85+PF5_86+TRD3_87+TRD2_88+TRD1_89+TRD0_90+PF3_91+PN7_94+
			      PN6_95+PN5_96+PN4_97+PP3_106+PP4_107+PP1_108+PP0_109+PM7_110+PM6_111+LPC0CLK_116+
			      LPC0SERIRQ_117+LPC0A20_118+LPC0CLKRUN_n_119+LPC0SCI_n_120+LPC0PD_n_121+RST_n_122+
			      USB0DM_127+USB0DP_128+PB0_129+PB1_130+PB2_131+ia_ftestadc_132+LPC0RESET_n_135+
			      LPC0FRAME_n_136+LPC0AD0_137+LPC0AD1_138+LPC0AD2_139+LPC0AD3_140+PK7_141+PK6_142+
			      PK5_143+PK4_144+TDO_149+TDI_150+TMS_151+PN3_153+PJ0_158+PJ1_159+PJ2_160+PJ3_161+
			      RAWPOR_N_TEST_162+PP6_163+POR_ORIDE_164+C2_p_174+C2_n_175+PJ6_176+PJ7_177+
			      AIN23_178+AIN22_179+AIN21_180+AIN20_181+AIN11_182+AIN10_183+AIN09_188+AIN08_189+
			      AIN07_190+AIN06_191+AIN05_192+FLASH3_70+FLASH4_71+FLASH5_72+wake_n_98+hib_n_99+
			      rbias_9"; }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/testflow.evo                                   */
/* Creation Date  : Tue Jan  3 17:12:52 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/

__Flow Probe_FLOW {
    OnStart = Probe_SUB_FLOW;
    OnLoad = TIOnLoad;
    OnUnload = TIOnUnload;
    OnReset = TIOnReset;
    OnRunTimeError = TIOnRunTimeError;
    OnFault = TermFault;
    OnPowerDown = TIOnPowerDown;
    OnInitFlow = TIOnInitFlow;
    UsrCal = UserCalibration;
    OnUsr0 = BoardCheck;
    OnUsr9 = MiniDiags;
    __LoopNotify = __False;
}

__Flow Final_FLOW {
    OnStart = Final_SUB_FLOW;
    OnRestart = TIOnRestart;
    OnLoad = TIOnLoad;
    OnUnload = TIOnUnload;
    OnReset = TIOnReset;
    OnRunTimeError = TIOnRunTimeError;
    OnFault = TermFault;
    OnPowerDown = TIOnPowerDown;
    OnInitFlow = TIOnInitFlow;
    UsrCal = UserCalibration;
    OnUsr0 = BoardCheck;
    OnUsr9 = MiniDiags;
    __LoopNotify = __False;
}

__Flow Qual_FLOW {
    OnStart = Qual_SUB_FLOW;
    OnRestart = TIOnRestart;
    OnLoad = TIOnLoad;
    OnUnload = TIOnUnload;
    OnReset = TIOnReset;
    OnRunTimeError = TIOnRunTimeError;
    OnFault = TermFault;
    OnPowerDown = TIOnPowerDown;
    OnInitFlow = TIOnInitFlow;
    UsrCal = UserCalibration;
    OnUsr0 = BoardCheck;
    OnUsr9 = MiniDiags;
    __LoopNotify = __False;
}

__Flow DPSE_FLOW {
    OnStart = DPSE_SUB_FLOW;
    OnRestart = TIOnRestart;
    OnLoad = TIOnLoad;
    OnUnload = TIOnUnload;
    OnReset = TIOnReset;
    OnRunTimeError = TIOnRunTimeError;
    OnFault = TermFault;
    OnPowerDown = TIOnPowerDown;
    OnInitFlow = TIOnInitFlow;
    UsrCal = UserCalibration;
    OnUsr0 = BoardCheck;
    OnUsr9 = MiniDiags;
    __LoopNotify = __False;
}

__Flow BoardChk_FLOW {
    OnStart = BoardChk_SUB_FLOW;
    OnRestart = TIOnRestart;
    OnLoad = TIOnLoad;
    OnUnload = TIOnUnload;
    OnReset = TIOnReset;
    OnRunTimeError = TIOnRunTimeError;
    OnFault = TermFault;
    OnPowerDown = TIOnPowerDown;
    OnInitFlow = TIOnInitFlow;
    UsrCal = UserCalibration;
    OnUsr0 = BoardCheck;
    OnUsr9 = MiniDiags;
    __LoopNotify = __False;
}

/***********************************************************************/
/***                                                                 ***/
/***  The following subflows are required by the interface to the TI ***/
/***  standard program.  They may be empty. The TI standard subflows ***/
/***  for each of the enVision entrypoints will call these subflows. ***/
/***                                                                 ***/
/***********************************************************************/

__Test InitializeModules {
	__Entry[0] = TW_Init_MF;
	__Entry[1] = Initialize_EverySite_Array_MF;
	__PortExpression[0] = __Expression { __String = "TRUE"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = InitializeModules;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
}


/*************************/
/*** TermFault SubFlow ***/
/*************************/
__SubFlow TermFault {
	__NameFormat = "{Exec}_{GCounter}";
	__PortConnections {
	}
}
/**************************/
/*** UserOnInit SubFlow ***/
/**************************/
__SubFlow UserOnInitFlow {
	__Node  ConnectDevice_1357 {
		__XCoord = (47,62);
		__Port[0] {
			__PortPosition = 90;
		}
		__InputPosition = 0;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCSpecs.CommonDCdata"; }
            Globals_Meas = __Expression { __String = "0"; }
        }
		__TestID = "0";
		__Exec =  ConnectDevice;
	}
	__Node  TW_NewUnit_1358 {
		__XCoord = (226,60);
		__Port[0] {
			__PortPosition = 97;
		}
		__InputPosition = 268;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCSpecs.CommonDCdata"; }
            Globals_Meas = __Expression { __String = "0"; }
        }
		__TestID = "1";
		__Exec =  TW_NewUnit;
	}
	__Node FlowNode_1359 {
		__XCoord = (367,76);
		__InputPosition = 273;
		__TestID = "2";
		__PortSelect =  "0";
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  ConnectDevice_1357;
	__PortConnections {
	 ConnectDevice_1357 __Port[0] =  TW_NewUnit_1358;//To Port = 2;
	 TW_NewUnit_1358 __Port[0] = FlowNode_1359;//To Port = 3;
	}
}
/**************************/
/*** UserOnLoad SubFlow ***/
/**************************/
__SubFlow UserOnLoad {
	__Node  SelectSpecs_1360 {
		__XCoord = (39,0);
		__Port[0] {
			__PortPosition = -1;
		}
		__Port[1] {
			__PortPosition = -1;
		}
		__InputPosition = 278;
		__SpecPairs {
            Globals_Meas = __Expression { __String = "0"; }
        }
		__TestID = "4";
		__Exec =  SelectSpecs;
	}
	__Node  InitializeModules_1361 {
		__XCoord = (319,0);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 271;
		__TestID = "5";
		__Exec =  InitializeModules;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  SelectSpecs_1360;
	__PortConnections {
	 SelectSpecs_1360 __Port[0] =  InitializeModules_1361;//To Port = 2;
	 SelectSpecs_1360 __Port[1] =  InitializeModules_1361;//To Port = 2;
	}
}

/*****************************/
/*** UserOnPowerDown SubFlow ***/
/*****************************/
__SubFlow UserOnPowerDown {
	__Node  DisconnectDevice_1362 {
		__XCoord = (47,62);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 0;
		__TestID = "6";
		__Exec =  DisconnectDevice;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DisconnectDevice_1362;
	__PortConnections {
	}
}

/*****************************/
/*** UserOnUnload SubFlow ***/
/*****************************/
__SubFlow UserOnUnload {
	__Node  DisconnectDevice_1363 {
		__XCoord = (47,62);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 0;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
        }
		__TestID = "7";
		__Calibration = Bllizar_Calibration;
		__Exec =  DisconnectDevice;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DisconnectDevice_1363;
	__PortConnections {
	}
}

/*****************************/
/*** UserOnReset SubFlow ***/
/*****************************/
__SubFlow UserOnReset {
	__Node  DisconnectDevice_1364 {
		__XCoord = (47,62);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 0;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
        }
		__TestID = "8";
		__Calibration = Bllizar_Calibration;
		__Exec =  DisconnectDevice;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  DisconnectDevice_1364;
	__PortConnections {
	}
}

/*****************************************************/
/*** Venus requires an empty UserOnRestart SubFlow ***/
/*****************************************************/
__SubFlow UserOnRestart {
	__NameFormat = "{Exec}_{GCounter}";
	__PortConnections {
	}
}

/*****************************/
/*** UserCalibration SubFlow ***/
/*****************************/
__SubFlow UserCalibration {
	__Node  FocusCalibration_1365 {
		__XCoord = (47,62);
		__Port[0] {
			__PortPosition = 160;
		}
		__InputPosition = 0;
		__SpecPairs {
            ACSpecs = __Expression { __String = "ACSpecs.CommonACdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
            PSSpecs = __Expression { __String = "PSSpecs.PS_Vnom"; }
        }
		__TestID = "9";
		__Exec =  FocusCalibration;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  FocusCalibration_1365;
	__PortConnections {
	}
}

/****************************************************************************/
/*** SubFlow PreBinFlow_S                                                 ***/
/****************************************************************************/
__SubFlow PreBinFlow_S {
	__Node  Cres_1366 {
		__XCoord = (50,150);
		__Port[0] {
			__PortPosition = 65;
		}
		__Port[1] {
			__PortPosition = 90;
		}
		__InputPosition = 295;
		__SpecPairs {
            PSSpecs = __Expression { __String = "PSSpecs.CommonPSdata"; }
            DCSpecs = __Expression { __String = "DCDataSelect"; }
        }
		__TestID = "10";
		__Calibration = Bllizar_Calibration;
		__Exec =  Cres;
	}
	__Node  F_OS_CRES_1367 {
		__XCoord = (-15,295);
		__InputPosition = 20;
		__TestID = "11";
		__Exec =  F_OS_CRES;
	}
	__Node FlowNode_1368 {
		__XCoord = (235,150);
		__InputPosition = 270;
		__TestID = "12";
		__PortSelect =  "0";
		__PortNumber = 0;
	}
	__NameFormat = "{Exec}_{GCounter}";
	__StartNode =  Cres_1366;
	__PortConnections {
	 Cres_1366 __Port[0] = FlowNode_1368;//To Port = 2;
	 Cres_1366 __Port[1] =  F_OS_CRES_1367;//To Port = 1;
	}
	__Background {
        __String = "Continue __Port 0";
        __Data = (0,0,235,130,0,0,23,0,0,4,0,0,1,0,0,0);
    }
}
                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/testsets.evo                                   */
/* Creation Date  : Tue Jan  3 17:12:56 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


/******************************************************************************/
/*** SupplyShorts1                                                          ***/
/******************************************************************************/

__Test SupplyShorts1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_allZero;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED SupplyShorts1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.SupplyShorts1_VDD_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED SupplyShorts1_VDD_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDS_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDS"; }
			HighLimit = __Expression { __String = "ishortshiVDDS"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDS"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDS)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDS)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDAR_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDAR"; }
			HighLimit = __Expression { __String = "ishortshiVDDAR"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDAR"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDAR)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDAR)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDAR"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDA_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDA"; }
			HighLimit = __Expression { __String = "ishortshiVDDA"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDA"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDA)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDA)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDA"; }
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDD_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDD"; }
			HighLimit = __Expression { __String = "ishortshiVDD"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDD"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDD)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDD)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDD"; }
		}
	}
	__Block[4] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDS_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDS"; }
			HighLimit = __Expression { __String = "ishortshi2VDDS"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDS"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDS)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDS)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDS"; }
		}
	}
	__Block[5] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDAR_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDAR"; }
			HighLimit = __Expression { __String = "ishortshi2VDDAR"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDAR"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDAR)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDAR)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDAR"; }
		}
	}
	__Block[6] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDDA_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDA"; }
			HighLimit = __Expression { __String = "ishortshi2VDDA"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDA"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDA)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDA)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDA"; }
		}
	}
	__Block[7] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts1_VDD_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDD"; }
			HighLimit = __Expression { __String = "ishortshi2VDD"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDD"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDD)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDD)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDD"; }
		}
	}
}

/*** END SupplyShorts1 ***/

/******************************************************************************/
/*** FFDieIDRead                                                            ***/
/******************************************************************************/

__Test FFDieIDRead {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FFDieIDProg_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FFDieIDRead.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FF_READ_NORM_FFDieIDRead_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FF_READ_NORM_FFDieIDRead_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(Connected_to_tester(),if(ContinueOnFail,TRUE, TRUE),FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FF_READ_NORM_FFDieIDRead_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&FFDieIDRead_MF"; }
		}
	}
}

/*** END FFDieIDRead ***/

/******************************************************************************/
/*** PinOpensTest                                                           ***/
/******************************************************************************/

__Test PinOpensTest {
	__Entry[0] = DCsetup_allZero;
	__Exit[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__PortExpression[0] = __Expression { __String = "skip( NOT OpensFailFlag AND NOT ShortsFailFlag AND NOT Pin2PinShortsFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED PinOpensTest.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( OpensFailFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED PinOpensTestOpens_st.\n', ''),0) )"; }
	__PortExpression[2] = __Expression { __String = "skip( skip( if(TITestType=value(TITestType:Probe),TRUE,ShortsFailFlag), if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED PinOpensTestShorts_st.\n', ''),0) ), if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED PinOpensTestShorts_st.\n', ''),0) )"; }
	__PortExpression[3] = __Expression { __String = "skip( TRUE {Pin2PinShortsFlag}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED PinOpensTestShortsP2P_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = OpensShorts;
		__TestMethod {
			__Name = LTXC::DCTest;
			ForceValue = __Expression { __String = "iOSpins"; }
			LowClamp = __Expression { __String = "vmaxOSpins"; }
			CallAfterSetup = __Expression { __String = "&Pin2PinConty_MF"; }
			LowLimit = __Expression { __String = "vopenslimit"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			HighClamp = __Expression { __String = "vshortslimit"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Static_test_enable[] = __Expression { __String = "FALSE"; }*/
			TestPins = __Expression { __String = "OPEN_EVEN_PINS_GND"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(.Test_result.OpensShorts=TM_RESULT:TM_FAIL,TRUE, FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = Opens_1;
		__TestMethod {
			__Name = LTXC::DCTest;
			ForceValue = __Expression { __String = "iOSpins"; }
			LowClamp = __Expression { __String = "vmaxOSpins"; }
			LowLimit = __Expression { __String = "vopenslimit"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Static_test_enable[] = __Expression { __String = "TRUE"; }*/
			TestPins = __Expression { __String = "OPEN_EVEN_PINS_GND + OPEN_ODD_PINS_GND"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(.Test_result.OpensShorts=TM_RESULT:TM_FAIL,TRUE, FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = Shorts_1;
		__TestMethod {
			__Name = LTXC::DCTest;
			ForceValue = __Expression { __String = "iOSpins"; }
			LowClamp = __Expression { __String = "vmaxOSpins"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			HighClamp = __Expression { __String = "vshortslimit"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Static_test_enable[] = __Expression { __String = "TRUE"; }*/
			TestPins = __Expression { __String = "OPEN_EVEN_PINS_GND + OPEN_ODD_PINS_GND"; }
		}
	}
}

/*** END PinOpensTest ***/

/******************************************************************************/
/*** AnalogConty                                                            ***/
/******************************************************************************/
// This doesn't load but it's crap anyhow.  Should be using TI_DC for this. --BJP
/*__Test AnalogConty {
	//Was ETest

	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AnalogConty.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( jZBin AND SupplyShortsFailFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_CONTY_PWROpens_st.\n', ''),0) )"; }
	__PortExpression[2] = __Expression { __String = "skip( jZBin AND SupplyOpensFailFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_CONTY_PWRShorts_st.\n', ''),0) )"; }
	__PortExpression[3] = __Expression { __String = "skip( .Test_result.ANALOG_CONTY_GNDOpens_st = TMResultM:TM_FAIL, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_CONTY_GNDOpens_st.\n', ''),0) )"; }
	__PortExpression[4] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_CONTY_GNDShorts_st = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_CONTY_GNDShorts_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
	__Block[0] = {
        __Title = AnalogConty_0;
			//__Value(meas) & __Result(TMResultM) are the returns of cpp Execute()
        __Value = __Expression { __String = "#"; __Mode = Output; }
        __TestMethod {
            __Name = USER::TIDcParametrics;//fixtmod

            row_number = {
                __Row[0] = __Expression { __String = "#"; /*__Mode = Output;*/ }
            }
            measure_pins = {
                __Row[0] = __Expression { __String = "ANALOG_CONTY_PWR"; }
            }
            measure_type = __Expression { __String = "'DC_FORCE_I_OS'"; }
            sense_connect = {
                __Row[0] = __Expression { __String = "'REMOTE'"; }
            }
            max_voltage = {
                __Row[0] = __Expression { __String = "1.1*anaPwrVLimitHi"; }
            }
            force_current = {
                __Row[0] = __Expression { __String = "anaPwrIForce"; }
            }
            max_current = {
                __Row[0] = __Expression { __String = "2mA"; }
            }
            measurement_delay = {
                __Row[0] = __Expression { __String = "10mS"; }
            }
            measure_averages = {
                __Row[0] = __Expression { __String = "10"; }
            }
            row_results = {
                __Row[0] = __Expression { __String = "#"; __Mode = Output; }
            }
            test_limits = {
                __Row[0] = __Expression { __String = "#"; __Mode = Output; }
            }
            OpensFail = {
                __Row[0] = __Expression { __String = "if(#,TRUE->AnalogOpensFailFlag,FALSE)"; __Mode = Output; }
            }
            ShortsFail = {
                __Row[0] = __Expression { __String = "if(#,TRUE->AnalogShortsFailFlag,FALSE)"; __Mode = Output; }
            }
        }
    }
}*/
//end of __ETest

/*** END AnalogConty ***/

/******************************************************************************/
/*** Supply opens test.                                                     ***/
/******************************************************************************/

__Test SupplyOpensTest {
	__Entry[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__Exit[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS,if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED SupplyOpens Test.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "TRUE {.Result = TM_RESULT:TM_FAIL}"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = SupplyOpensTest;
		__TestMethod {
			__Name = LTXC::PowerTest;
			MaxAllowedCurrent = __Expression { __String = "iopenssupplymax"; }
			MeasurementAverages = __Expression { __String = "1"; }
			LowLimit = __Expression { __String = "iopenssupply"; }
			ForcedVoltage = __Expression { __String = "vopenssupply"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALLSUPPLIES"; }
		}
	}
}


/******************************************************************************/
/*** VminSearchPre1                                                         ***/
/******************************************************************************/

__Test VminSearchPre1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_TRIM_TRIM_100_SEQ.Thread.ANALOG_TRIM_TRIM_100->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_TRIM_TRIM_100_SEQ.Thread.ANALOG_TRIM_TRIM_100->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
}
__FunctionCall VminSearchPre1_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
}

/*** END VminSearchPre1 ***/

/******************************************************************************/
/*** VminSearchPre1_1                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_SEQ.Thread.FUNC_GROS_100->CurThread, 'FUNC_GROS_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_SEQ.Thread.FUNC_GROS_100->CurThread, 'FUNC_GROS_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_1_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_1_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_1_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_1_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
}
__FunctionCall VminSearchPre1_1_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_1_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
}

/*** END VminSearchPre1_1 ***/

/******************************************************************************/
/*** VminSearchPre1_2                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_1_SEQ.Thread.FUNC_GROS_100_1->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_1_SEQ.Thread.FUNC_GROS_100_1->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_2_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_2_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_2_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_2_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
}
__FunctionCall VminSearchPre1_2_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_2_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
}

/*** END VminSearchPre1_2 ***/

/******************************************************************************/
/*** VminSearchPre1_3                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_2_SEQ.Thread.FUNC_GROS_100_2->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_2_SEQ.Thread.FUNC_GROS_100_2->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_3_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_3_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_3_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_3_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
}
__FunctionCall VminSearchPre1_3_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_3_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
}

/*** END VminSearchPre1_3 ***/

/******************************************************************************/
/*** VminSearchPre1_4                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_3_SEQ.Thread.FUNC_GROS_100_3->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_3_SEQ.Thread.FUNC_GROS_100_3->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_4_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_4_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_4_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_4_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
}
__FunctionCall VminSearchPre1_4_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_4_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
}

/*** END VminSearchPre1_4 ***/

/******************************************************************************/
/*** VminSearchPre1_5                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_4_SEQ.Thread.FUNC_GROS_100_4->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_4_SEQ.Thread.FUNC_GROS_100_4->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_5_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_5_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_5_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_5_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
}
__FunctionCall VminSearchPre1_5_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_5_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
}

/*** END VminSearchPre1_5 ***/

/******************************************************************************/
/*** VminSearchPre1_6                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_166p66_SEQ.Thread.FUNC_GROS_166p66->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_166p66_SEQ.Thread.FUNC_GROS_166p66->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_6_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_6_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_6_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_6_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
}
__FunctionCall VminSearchPre1_6_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_6_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
}

/*** END VminSearchPre1_6 ***/

/******************************************************************************/
/*** VminSearchPre1_7                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_OTG_100_SEQ.Thread.ANALOG_USB_OTG_100->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_OTG_100_SEQ.Thread.ANALOG_USB_OTG_100->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_7_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_7_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_7_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_7_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
}
__FunctionCall VminSearchPre1_7_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_7_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
}

/*** END VminSearchPre1_7 ***/

/******************************************************************************/
/*** VminSearchPre1_8                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_FSUSB_PUPD_100_SEQ.Thread.ANALOG_FSUSB_PUPD_100->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_FSUSB_PUPD_100_SEQ.Thread.ANALOG_FSUSB_PUPD_100->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_8_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_8_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_8_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_8_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
}
__FunctionCall VminSearchPre1_8_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_8_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
}

/*** END VminSearchPre1_8 ***/

/******************************************************************************/
/*** VminSearchPre1_9                                                       ***/
/******************************************************************************/

__Test VminSearchPre1_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPre1_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_VminSearchPre1_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_VminSearchPre1_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_VminSearchPre1_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_CHG_100_SEQ.Thread.ANALOG_USB_CHG_100->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_VminSearchPre1_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_CHG_100_SEQ.Thread.ANALOG_USB_CHG_100->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPre1_9_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_9_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPre1_9_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_9_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
}
__FunctionCall VminSearchPre1_9_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPre1_9_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
}

/*** END VminSearchPre1_9 ***/

/******************************************************************************/
/*** FuncVminPre1                                                           ***/
/******************************************************************************/

__Test FuncVminPre1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1 ***/

/******************************************************************************/
/*** FuncVminPre1_1                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_1 ***/

/******************************************************************************/
/*** FuncVminPre1_2                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_2 ***/

/******************************************************************************/
/*** FuncVminPre1_3                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_3 ***/

/******************************************************************************/
/*** FuncVminPre1_4                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_4 ***/

/******************************************************************************/
/*** FuncVminPre1_5                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_5 ***/

/******************************************************************************/
/*** FuncVminPre1_6                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_6 ***/

/******************************************************************************/
/*** FuncVminPre1_7                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_7 ***/

/******************************************************************************/
/*** FuncVminPre1_8                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_8 ***/

/******************************************************************************/
/*** FuncVminPre1_9                                                         ***/
/******************************************************************************/

__Test FuncVminPre1_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre1_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_FuncVminPre1_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_FuncVminPre1_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncVminPre1_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre1_9 ***/

/******************************************************************************/
/*** CheckFromPre                                                           ***/
/******************************************************************************/

__Test CheckFromPre {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = Read_Mg0_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED CheckFromPre.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FF_READ_MG0_CheckFromPre_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FF_READ_MG0_CheckFromPre_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FF_READ_MG0_CheckFromPre_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&CheckFROMPreRepair_MF"; }
		}
	}
}

/*** END CheckFromPre ***/

/******************************************************************************/
/*** MemGNGVboxLO                                                           ***/
/******************************************************************************/

__Test MemGNGVboxLO {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_MEMORY_VBOXLO_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS AND NOT MemGNGVboxloResultFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED MemGNGVboxLO.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE, if(.Result != TM_RESULT:TM_PASS ,TRUE->MemGNGVboxloResultFlag,TRUE) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VMS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = MEMORY_VBOXLO_33_MemGNGVboxLO_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "charMem"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_MEMORY_VBOXLO_33'->CurThread, 'MEMORY_VBOXLO_33'->twMDC,  BIST_MEMORY_VBOXLO_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END MemGNGVboxLO ***/

/******************************************************************************/
/*** FuncDiagsVboxLO_DIAG_VLO_200                                           ***/
/******************************************************************************/

__Test FuncDiagsVboxLO_DIAG_VLO_200 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = DIAG_VLO_200_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncDiagsVboxLO_DIAG_VLO_200.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncDiagsVboxLO_DIAG_VLO_200.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VMS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(MemGNGVboxloResultFlag,TRUE,FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = PB_PB_MARCH13N_REP_1_FuncDiagsVboxLO_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "charMem"; }
			TestPatterns = __Expression { __String = "skip( 'DIAG_VLO_200_pb_pb_march13n_rep'->CurThread, 'PB_PB_MARCH13N_REP_1'->twMDC,  DIAG_VLO_200_pb_pb_march13n_rep.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncDiagsVboxLO_DIAG_VLO_200 ***/

/******************************************************************************/
/*** FuncDiagsVboxHI_DIAG_VHI_200                                           ***/
/******************************************************************************/

__Test FuncDiagsVboxHI_DIAG_VHI_200 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = DIAG_VHI_200_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncDiagsVboxHI_DIAG_VHI_200.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncDiagsVboxHI_DIAG_VHI_200.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VMS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(MemGNGVboxhiResultFlag,TRUE,FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = PB_PB_MARCH13N_REP_FuncDiagsVboxHI_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "charMem"; }
			TestPatterns = __Expression { __String = "skip( 'DIAG_VHI_200_pb_pb_march13n_rep'->CurThread, 'PB_PB_MARCH13N_REP'->twMDC,  DIAG_VHI_200_pb_pb_march13n_rep.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncDiagsVboxHI_DIAG_VHI_200 ***/

/******************************************************************************/
/*** SendESDA                                                               ***/
/******************************************************************************/

__Test SendESDA {
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, FALSE->PreRepair, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED SendESDA.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED SendESDA_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = CreateBitmap;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = MergeBitmaps;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SendBitCountTW_MF;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ResetTmpBitmaps;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
}

/*** END SendESDA ***/

/******************************************************************************/
/*** CheckNonDiagsFlag                                                      ***/
/******************************************************************************/

__Test CheckNonDiagsFlag {
	__PortExpression[0] = __Expression { __String = "skip( NOT NonRepDiagFailFlag, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED CheckNonDiagsFlag.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {NonRepDiagFailFlag}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED CheckNonDiagsFlag_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = CheckNonDiagsFlag_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
}

/*** END CheckNonDiagsFlag ***/

/******************************************************************************/
/*** CheckRedundancy                                                        ***/
/******************************************************************************/

__Test CheckRedundancy {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_allZero;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED CheckRedundancy.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED CheckRedundancy_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = CheckRedundancy;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "FALSE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = CalcAndSendDataTW;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&CalcAndSendDataTW_MF"; }
		}
	}
}

/*** END CheckRedundancy ***/

/******************************************************************************/
/*** ProgFuseFarm                                                           ***/
/******************************************************************************/

__Test ProgFuseFarm {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FFDieIDProg_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED ProgFuseFarm.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FF_RUNAUTOLOAD_ProgFuseFarm_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FF_RUNAUTOLOAD_ProgFuseFarm_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FFProg_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FFCheckProg_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&CheckFROMPostRepair_MF"; }
		}
	}
}

/*** END ProgFuseFarm ***/

/******************************************************************************/
/*** FuncVminPre2                                                           ***/
/******************************************************************************/

__Test FuncVminPre2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_FuncVminPre2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_FuncVminPre2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_FuncVminPre2_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33'->CurThread, 'BIST_PROD_33'->twMDC,  BIST_PROD_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre2 ***/

/******************************************************************************/
/*** FuncVminPre2_1                                                         ***/
/******************************************************************************/

__Test FuncVminPre2_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPre2_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_1_FuncVminPre2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_1_FuncVminPre2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_1_FuncVminPre2_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33_1'->CurThread, 'BIST_PROD_33_1'->twMDC,  BIST_PROD_33_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPre2_1 ***/

/******************************************************************************/
/*** FFDieIDProg                                                            ***/
/******************************************************************************/

__Test FFDieIDProg {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FFDieIDProg_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FFDieIDProg.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FF_RUNAUTOLOAD_FFDieIDProg_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FF_RUNAUTOLOAD_FFDieIDProg_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(Connected_to_tester(),if(ContinueOnFail,TRUE, TRUE),FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FFDieIDProg;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&FFDieIDProg_MF"; }
		}
	}
}

/*** END FFDieIDProg ***/

/******************************************************************************/
/*** IddqVboxLOPre                                                          ***/
/******************************************************************************/

__Test IddqVboxLOPre {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask_Meas;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_SEQ;
	__Entry[2] = SetTyp_To_Meas_MF;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVboxLOPre.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVboxLOPre_a_iddq_PM12_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVboxLOPre_a_iddq_PM12_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVboxLOPre ***/

/******************************************************************************/
/*** IddqVboxLOPre_1                                                        ***/
/******************************************************************************/

__Test IddqVboxLOPre_1 {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask_Meas;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_PM02_SEQ;
	__Entry[2] = SetTyp_To_Meas_MF;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVboxLOPre_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVboxLOPre_PM411_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVboxLOPre_PM411_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVboxLOPre_1 ***/

/******************************************************************************/
/*** FuncVburnin                                                            ***/
/******************************************************************************/

__Test FuncVburnin {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BURNIN_200_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVburnin.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BURNIN_200_FuncVburnin_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BURNIN_200_FuncVburnin_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BURNIN_200_FuncVburnin_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BURNIN_200'->CurThread, 'BURNIN_200'->twMDC,  BURNIN_200.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVburnin ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL                                                     ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncVmaxNonVboxT_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_1                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_1.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_1 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_2                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_2.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_2 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_3                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_3.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_3 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_4                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_4.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_4 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_5                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_5.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_5 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_6                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_6.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_6 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_7                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_7.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_7 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_8                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_8.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33'->CurThread, 'BIST_PROD_33'->twMDC,  BIST_PROD_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_8 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_9                                                   ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_9.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_1_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33_1'->CurThread, 'BIST_PROD_33_1'->twMDC,  BIST_PROD_33_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_9 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_10                                                  ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_10 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_10.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_10.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_10 ***/

/******************************************************************************/
/*** FuncVmaxNonVboxTDL_11                                                  ***/
/******************************************************************************/

__Test FuncVmaxNonVboxTDL_11 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxNonVboxTDL_11.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncVmaxNonVboxTDL_11.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncVmaxNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxNonVboxTDL_11 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL                                                     ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_FuncVnomNonVboxT_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_FuncVnomNonVboxT_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncVnomNonVboxT_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_1                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_1 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_2                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_2 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_3                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_3 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_4                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_4 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_5                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_5 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_6                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_6 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_7                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_7 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_8                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33'->CurThread, 'BIST_PROD_33'->twMDC,  BIST_PROD_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_8 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_9                                                   ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_1_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_1_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_1_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33_1'->CurThread, 'BIST_PROD_33_1'->twMDC,  BIST_PROD_33_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_9 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_10                                                  ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_10 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_10.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_10 ***/

/******************************************************************************/
/*** FuncVnomNonVboxTDL_11                                                  ***/
/******************************************************************************/

__Test FuncVnomNonVboxTDL_11 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVnomNonVboxTDL_11.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_FuncVnomNonVboxTDL_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_FuncVnomNonVboxTDL_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncVnomNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVnomNonVboxTDL_11 ***/

/******************************************************************************/
/*** FuncVmaxPost                                                           ***/
/******************************************************************************/

__Test FuncVmaxPost {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost ***/

/******************************************************************************/
/*** FuncVmaxPost_1                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_1 ***/

/******************************************************************************/
/*** FuncVmaxPost_2                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_2 ***/

/******************************************************************************/
/*** FuncVmaxPost_3                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_3 ***/

/******************************************************************************/
/*** FuncVmaxPost_4                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_4 ***/

/******************************************************************************/
/*** FuncVmaxPost_5                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_5 ***/

/******************************************************************************/
/*** FuncVmaxPost_6                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_6 ***/

/******************************************************************************/
/*** FuncVmaxPost_7                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_7 ***/

/******************************************************************************/
/*** FuncVmaxPost_8                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33'->CurThread, 'BIST_PROD_33'->twMDC,  BIST_PROD_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_8 ***/

/******************************************************************************/
/*** FuncVmaxPost_9                                                         ***/
/******************************************************************************/

__Test FuncVmaxPost_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.BIST_PROD_33_1_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED BIST_PROD_33_1_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_1_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33_1'->CurThread, 'BIST_PROD_33_1'->twMDC,  BIST_PROD_33_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_9 ***/

/******************************************************************************/
/*** FuncVmaxPost_10                                                        ***/
/******************************************************************************/

__Test FuncVmaxPost_10 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_10.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_10 ***/

/******************************************************************************/
/*** FuncVmaxPost_11                                                        ***/
/******************************************************************************/

__Test FuncVmaxPost_11 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVmaxPost_11.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_FuncVmaxPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_FuncVmaxPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncVmaxPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVmaxPost_11 ***/

/******************************************************************************/
/*** FuncNonVboxTDL                                                         ***/
/******************************************************************************/

__Test FuncNonVboxTDL {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL ***/

/******************************************************************************/
/*** FuncNonVboxTDL_1                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_1.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_1 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_2                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_2.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_2 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_3                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_3.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_3 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_4                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_4.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_4 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_5                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_5.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_5 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_6                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_6.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_6 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_7                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_7.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_7 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_8                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_8.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33'->CurThread, 'BIST_PROD_33'->twMDC,  BIST_PROD_33.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_8 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_9                                                       ***/
/******************************************************************************/

__Test FuncNonVboxTDL_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = BIST_PROD_33_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_9.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = BIST_PROD_33_1_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'BIST_PROD_33_1'->CurThread, 'BIST_PROD_33_1'->twMDC,  BIST_PROD_33_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_9 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_10                                                      ***/
/******************************************************************************/

__Test FuncNonVboxTDL_10 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_10.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_10.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_10 ***/

/******************************************************************************/
/*** FuncNonVboxTDL_11                                                      ***/
/******************************************************************************/

__Test FuncNonVboxTDL_11 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncNonVboxTDL_11.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Result = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FuncNonVboxTDL_11.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncNonVboxTDL_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncNonVboxTDL_11 ***/

/******************************************************************************/
/*** FuncVminPost                                                           ***/
/******************************************************************************/

__Test FuncVminPost {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC,  ANALOG_TRIM_TRIM_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost ***/

/******************************************************************************/
/*** FuncVminPost_1                                                         ***/
/******************************************************************************/

__Test FuncVminPost_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC,  FUNC_GROS_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_1 ***/

/******************************************************************************/
/*** FuncVminPost_2                                                         ***/
/******************************************************************************/

__Test FuncVminPost_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC,  FUNC_GROS_100_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_2 ***/

/******************************************************************************/
/*** FuncVminPost_3                                                         ***/
/******************************************************************************/

__Test FuncVminPost_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC,  FUNC_GROS_100_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_3 ***/

/******************************************************************************/
/*** FuncVminPost_4                                                         ***/
/******************************************************************************/

__Test FuncVminPost_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC,  FUNC_GROS_100_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_4 ***/

/******************************************************************************/
/*** FuncVminPost_5                                                         ***/
/******************************************************************************/

__Test FuncVminPost_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC,  FUNC_GROS_100_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_5 ***/

/******************************************************************************/
/*** FuncVminPost_6                                                         ***/
/******************************************************************************/

__Test FuncVminPost_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC,  FUNC_GROS_166p66.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_6 ***/

/******************************************************************************/
/*** FuncVminPost_7                                                         ***/
/******************************************************************************/

__Test FuncVminPost_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC,  ANALOG_USB_OTG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_7 ***/

/******************************************************************************/
/*** FuncVminPost_8                                                         ***/
/******************************************************************************/

__Test FuncVminPost_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC,  ANALOG_FSUSB_PUPD_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_8 ***/

/******************************************************************************/
/*** FuncVminPost_9                                                         ***/
/******************************************************************************/

__Test FuncVminPost_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED FuncVminPost_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_FuncVminPost_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_FuncVminPost_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_FuncVminPost_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC,  ANALOG_USB_CHG_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END FuncVminPost_9 ***/

/******************************************************************************/
/*** VminSearchPost                                                         ***/
/******************************************************************************/

__Test VminSearchPost {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_TRIM_TRIM_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_TRIM_TRIM_100_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_TRIM_TRIM_100_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_TRIM_TRIM_100_SEQ.Thread.ANALOG_TRIM_TRIM_100->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_TRIM_TRIM_100_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_TRIM_TRIM_100_SEQ.Thread.ANALOG_TRIM_TRIM_100->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
}
__FunctionCall VminSearchPost_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_TRIM_TRIM_100'->CurThread, 'ANALOG_TRIM_TRIM_100'->twMDC )"; }
}

/*** END VminSearchPost ***/

/******************************************************************************/
/*** VminSearchPost_1                                                       ***/
/******************************************************************************/

__Test VminSearchPost_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_SEQ.Thread.FUNC_GROS_100->CurThread, 'FUNC_GROS_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_SEQ.Thread.FUNC_GROS_100->CurThread, 'FUNC_GROS_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_1_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_1_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_1_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_1_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
}
__FunctionCall VminSearchPost_1_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_1_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100'->CurThread, 'FUNC_GROS_100'->twMDC )"; }
}

/*** END VminSearchPost_1 ***/

/******************************************************************************/
/*** VminSearchPost_2                                                       ***/
/******************************************************************************/

__Test VminSearchPost_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_1_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_1_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_1_SEQ.Thread.FUNC_GROS_100_1->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_1_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_1_SEQ.Thread.FUNC_GROS_100_1->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_2_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_2_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_2_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_2_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
}
__FunctionCall VminSearchPost_2_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_2_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_1'->CurThread, 'FUNC_GROS_100_1'->twMDC )"; }
}

/*** END VminSearchPost_2 ***/

/******************************************************************************/
/*** VminSearchPost_3                                                       ***/
/******************************************************************************/

__Test VminSearchPost_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_2_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_2_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_2_SEQ.Thread.FUNC_GROS_100_2->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_2_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_2_SEQ.Thread.FUNC_GROS_100_2->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_3_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_3_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_3_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_3_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
}
__FunctionCall VminSearchPost_3_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_3_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_2'->CurThread, 'FUNC_GROS_100_2'->twMDC )"; }
}

/*** END VminSearchPost_3 ***/

/******************************************************************************/
/*** VminSearchPost_4                                                       ***/
/******************************************************************************/

__Test VminSearchPost_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_3_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_3_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_3_SEQ.Thread.FUNC_GROS_100_3->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_3_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_3_SEQ.Thread.FUNC_GROS_100_3->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_4_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_4_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_4_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_4_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
}
__FunctionCall VminSearchPost_4_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_4_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_3'->CurThread, 'FUNC_GROS_100_3'->twMDC )"; }
}

/*** END VminSearchPost_4 ***/

/******************************************************************************/
/*** VminSearchPost_5                                                       ***/
/******************************************************************************/

__Test VminSearchPost_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_100_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_GROS_100_4_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_GROS_100_4_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_4_SEQ.Thread.FUNC_GROS_100_4->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_GROS_100_4_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_100_4_SEQ.Thread.FUNC_GROS_100_4->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_5_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_5_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_5_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_5_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
}
__FunctionCall VminSearchPost_5_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_5_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_100_4'->CurThread, 'FUNC_GROS_100_4'->twMDC )"; }
}

/*** END VminSearchPost_5 ***/

/******************************************************************************/
/*** VminSearchPost_6                                                       ***/
/******************************************************************************/

__Test VminSearchPost_6 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_GROS_166p66_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_6.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FLASH_INT_CHECK_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FLASH_INT_CHECK_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_166p66_SEQ.Thread.FUNC_GROS_166p66->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FLASH_INT_CHECK_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( FUNC_GROS_166p66_SEQ.Thread.FUNC_GROS_166p66->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_6_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_6_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_6_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_6_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
}
__FunctionCall VminSearchPost_6_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_6_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'FUNC_GROS_166p66'->CurThread, 'FLASH_INT_CHECK'->twMDC )"; }
}

/*** END VminSearchPost_6 ***/

/******************************************************************************/
/*** VminSearchPost_7                                                       ***/
/******************************************************************************/

__Test VminSearchPost_7 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_OTG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_7.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_OTG_100_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_OTG_100_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_OTG_100_SEQ.Thread.ANALOG_USB_OTG_100->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_OTG_100_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_OTG_100_SEQ.Thread.ANALOG_USB_OTG_100->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_7_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_7_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_7_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_7_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
}
__FunctionCall VminSearchPost_7_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_7_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_OTG_100'->CurThread, 'ANALOG_USB_OTG_100'->twMDC )"; }
}

/*** END VminSearchPost_7 ***/

/******************************************************************************/
/*** VminSearchPost_8                                                       ***/
/******************************************************************************/

__Test VminSearchPost_8 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_FSUSB_PUPD_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_8.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FSUSB_PUPD_100_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FSUSB_PUPD_100_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_FSUSB_PUPD_100_SEQ.Thread.ANALOG_FSUSB_PUPD_100->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FSUSB_PUPD_100_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_FSUSB_PUPD_100_SEQ.Thread.ANALOG_FSUSB_PUPD_100->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_8_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_8_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_8_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_8_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
}
__FunctionCall VminSearchPost_8_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_8_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_FSUSB_PUPD_100'->CurThread, 'FSUSB_PUPD_100'->twMDC )"; }
}

/*** END VminSearchPost_8 ***/

/******************************************************************************/
/*** VminSearchPost_9                                                       ***/
/******************************************************************************/

__Test VminSearchPost_9 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = ANALOG_USB_CHG_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VminSearchPost_9.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.ANALOG_USB_CHG_100_VminSearchPost_2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED ANALOG_USB_CHG_100_VminSearchPost_2_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'VS'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::SearchTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Parameter_results[] = __Expression { __String = "#"; __Mode = Output; }*/
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_VminSearchPost_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDDAR_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_CHG_100_SEQ.Thread.ANALOG_USB_CHG_100->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = ANALOG_USB_CHG_100_VminSearchPost_2_st;
		__TestMethod {
			__Name = LTXC::SearchTest;
			SearchAxis = __Expression { __String = "&SRCH_VDD_PS"; }
			/* Override_pattern_fails[] = __Expression { __String = "FALSE"; }*/
			/* Preset_pattern_index[] = __Expression { __String = "skip( ANALOG_USB_CHG_100_SEQ.Thread.ANALOG_USB_CHG_100->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }*/
			SearchAlgorithm = __Expression { __String = "SEARCH_ALGORITHM:SEARCH_BINARY"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			/* Test_pins[] = __Expression { __String = "ALL_PINS"; }*/
		}
	}
}
__FunctionCall VminSearchPost_9_block0_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = ""; }
	TestPins = __Expression { __String = ""; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_9_block0_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = ""; }
}
__FunctionCall VminSearchPost_9_block1_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_9_block1_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
}
__FunctionCall VminSearchPost_9_block2_setup {
	__WrapCells = __True;
	__Function = LTXC::ExecuteSearchPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
	TestPins = __Expression { __String = "ALL_PINS"; }
	DisablePatternDatalog = __Expression { __String = "TRUE"; }
	IgnorePatternFails = __Expression { __String = "FALSE"; }
}
__FunctionCall VminSearchPost_9_block2_result {
	__WrapCells = __True;
	__Function = LTXC::SearchStepPatterns;
	TestPatterns = __Expression { __String = "skip( 'ANALOG_USB_CHG_100'->CurThread, 'ANALOG_USB_CHG_100'->twMDC )"; }
}

/*** END VminSearchPost_9 ***/

/******************************************************************************/
/*** IddqVboxLOPost                                                         ***/
/******************************************************************************/

__Test IddqVboxLOPost {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask_Meas;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_SEQ;
	__Entry[2] = SetTyp_To_Meas_MF;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVboxLOPost.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVboxLOPost_a_iddq_PM12_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVboxLOPost_a_iddq_PM12_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVboxLOPost ***/

/******************************************************************************/
/*** IddqVboxLOPost_1                                                       ***/
/******************************************************************************/

__Test IddqVboxLOPost_1 {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask_Meas;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_PM02_SEQ;
	__Entry[2] = SetTyp_To_Meas_MF;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVboxLOPost_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVboxLOPost_PM411_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVboxLOPost_PM411_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVboxLOPost_1 ***/

/******************************************************************************/
/*** IddqVburnin                                                            ***/
/******************************************************************************/

__Test IddqVburnin {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_SEQ;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVburnin.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVburnin_a_iddq_PM12_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVburnin_a_iddq_PM12_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVburnin ***/

/******************************************************************************/
/*** IddqVburnin_1                                                          ***/
/******************************************************************************/

__Test IddqVburnin_1 {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_PM02_SEQ;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVburnin_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVburnin_PM411_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVburnin_PM411_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVburnin_1 ***/

/******************************************************************************/
/*** IddqVmax                                                               ***/
/******************************************************************************/

__Test IddqVmax {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_SEQ;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVmax.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVmax_a_iddq_PM12_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVmax_a_iddq_PM12_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVmax ***/

/******************************************************************************/
/*** IddqVmax_1                                                             ***/
/******************************************************************************/

__Test IddqVmax_1 {
	//Was ETest

	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Iddq;
	__Entry[1] = Iddq_PM02_SEQ;
	__Exit[0] = CONTINUE_PATTERNS_MF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TMResultM:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqVmax_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.IddqVmax_pb_iddq_ret_zeroes_v23_PM1_st.Value = TMResultM:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqVmax_pb_iddq_ret_zeroes_v23_PM1_st.\n', ''),0) )"; }
	__GlobalResult = __Expression { __String = "#"; __Mode = Output; }
}
//end of __ETest

/*** END IddqVmax_1 ***/

/******************************************************************************/
/*** IddqDelta                                                              ***/
/******************************************************************************/

__Test IddqDelta {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqDelta.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.IddqDelta_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqDelta_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(Connected_to_tester(),TRUE,FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = IddqDelta;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&IddqDelta_mf"; }
		}
	}
}

/*** END IddqDelta ***/

/******************************************************************************/
/*** IddqDrift                                                              ***/
/******************************************************************************/

__Test IddqDrift {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED IddqDrift.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.IddqDrift_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED IddqDrift_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(Connected_to_tester(),TRUE,FALSE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = IddqDrift;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&IddqDrift_mf"; }
		}
	}
}

/*** END IddqDrift ***/

/******************************************************************************/
/*** AtSpeed                                                                ***/
/******************************************************************************/

__Test AtSpeed {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50'->CurThread, 'FUNC_SCAN_AC_50'->twMDC,  FUNC_SCAN_AC_50.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed ***/

/******************************************************************************/
/*** AtSpeed_1                                                              ***/
/******************************************************************************/

__Test AtSpeed_1 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_1_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed_1.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_1_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_1_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_1_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50_1'->CurThread, 'FUNC_SCAN_AC_50_1'->twMDC,  FUNC_SCAN_AC_50_1.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed_1 ***/

/******************************************************************************/
/*** AtSpeed_2                                                              ***/
/******************************************************************************/

__Test AtSpeed_2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_2_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed_2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_2_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_2_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_2_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50_2'->CurThread, 'FUNC_SCAN_AC_50_2'->twMDC,  FUNC_SCAN_AC_50_2.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed_2 ***/

/******************************************************************************/
/*** AtSpeed_3                                                              ***/
/******************************************************************************/

__Test AtSpeed_3 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_3_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed_3.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_3_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_3_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_3_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50_3'->CurThread, 'FUNC_SCAN_AC_50_3'->twMDC,  FUNC_SCAN_AC_50_3.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed_3 ***/

/******************************************************************************/
/*** AtSpeed_4                                                              ***/
/******************************************************************************/

__Test AtSpeed_4 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_4_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed_4.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_4_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_4_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_4_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50_4'->CurThread, 'FUNC_SCAN_AC_50_4'->twMDC,  FUNC_SCAN_AC_50_4.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed_4 ***/

/******************************************************************************/
/*** AtSpeed_5                                                              ***/
/******************************************************************************/

__Test AtSpeed_5 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = FUNC_SCAN_AC_50_5_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED AtSpeed_5.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.FUNC_SCAN_AC_50_5_AtSpeed_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED FUNC_SCAN_AC_50_5_AtSpeed_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = FUNC_SCAN_AC_50_5_AtSpeed_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'FUNC_SCAN_AC_50_5'->CurThread, 'FUNC_SCAN_AC_50_5'->twMDC,  FUNC_SCAN_AC_50_5.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END AtSpeed_5 ***/

/******************************************************************************/
/*** SpecLevels                                                             ***/
/******************************************************************************/

__Test SpecLevels {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Spec;
	__Entry[1] = DC_PARA_100_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED SpecLevels.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.DC_PARA_100_SpecLevels_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED DC_PARA_100_SpecLevels_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "skip( FALSE, TIPrintf('twTest.Meas,s','%<ATN>',''), 'X'->twMTC, 'B'->twMCC_S, ''->twOPT )"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = jzTestInit;
		__TestMethod {
			__Name = LTXC::FuncTest;
			CharacterizationEnable = __Expression { __String = "FALSE"; }
			TestPatterns = __Expression { __String = "skip( -1->CurThread, 0->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DC_PARA_100_SpecLevels_st;
		__TestMethod {
			__Name = LTXC::FuncTest;
			/* Acquisition_method[] = __Expression { __String = "Char_method:MARGINS_DISPLAY"; }*/
			CharacterizationEnable = __Expression { __String = "CharacterizeDevice"; }
			TestPatterns = __Expression { __String = "skip( 'DC_PARA_100'->CurThread, 'DC_PARA_100'->twMDC,  DC_PARA_100.NumPatRows->rowsPerThread )"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "ALL_PINS"; }
		}
	}
}

/*** END SpecLevels ***/

/******************************************************************************/
/*** VoutVmin                                                               ***/
/******************************************************************************/

__Test VoutVmin {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Spec;
	__Entry[1] = Vout_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VoutVmin.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.DCPARA_VoutVmin_5_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED DCPARA_VoutVmin_5_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_VoutVmin_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_dcpara_ioz_pd_PM1"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM01_dcpara_ioz_pd'->CurThread, 'DC_PM01_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_dcpara_ioz_pd_PM1"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_VoutVmin_1_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_dcpara_ioz_pd_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara_ioz_pd'->CurThread, 'DC_PM02_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_dcpara_ioz_pd_PM2"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmin_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_CMOS_dcpara_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara'->CurThread, 'DC_PM02_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_CMOS_dcpara_PM2"; }
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmin_3_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_SPFUN_dcpara_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara'->CurThread, 'DC_PM02_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_SPFUN_dcpara_PM2"; }
		}
	}
	__Block[4] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmin_4_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_SPFUN_dcpara_PM4"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara'->CurThread, 'DC_PM04_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_SPFUN_dcpara_PM4"; }
		}
	}
	__Block[5] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmin_5_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_CMOS_dcpara_PM4"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara'->CurThread, 'DC_PM04_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_CMOS_dcpara_PM4"; }
		}
	}
}

/*** END VoutVmin ***/

/******************************************************************************/
/*** VoutVmax                                                               ***/
/******************************************************************************/

__Test VoutVmax {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Spec;
	__Entry[1] = Vout_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED VoutVmax.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.DCPARA_VoutVmax_5_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED DCPARA_VoutVmax_5_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_VoutVmax_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_dcpara_ioz_pd_PM1"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM01_dcpara_ioz_pd'->CurThread, 'DC_PM01_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_dcpara_ioz_pd_PM1"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_VoutVmax_1_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_dcpara_ioz_pd_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara_ioz_pd'->CurThread, 'DC_PM02_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_dcpara_ioz_pd_PM2"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmax_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_CMOS_dcpara_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara'->CurThread, 'DC_PM02_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_CMOS_dcpara_PM2"; }
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmax_3_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOL_SPFUN_dcpara_PM2"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM02_dcpara'->CurThread, 'DC_PM02_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOL_SPFUN_dcpara_PM2"; }
		}
	}
	__Block[4] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmax_4_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_SPFUN_dcpara_PM4"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara'->CurThread, 'DC_PM04_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_SPFUN_dcpara_PM4"; }
		}
	}
	__Block[5] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_VoutVmax_5_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_OutputVoltage_PARA_VOH_CMOS_dcpara_PM4"; }
			MeasurementDelay = __Expression { __String = "10ms"; }
			OverridePatternFails = __Expression { __String = "TRUE"; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara'->CurThread, 'DC_PM04_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "FALSE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "PARA_VOH_CMOS_dcpara_PM4"; }
		}
	}
}

/*** END VoutVmax ***/

/******************************************************************************/
/*** LeakIIn                                                                ***/
/******************************************************************************/

__Test LeakIIn {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Exit[0] = RemoveAllVoltageMF;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED LeakIIn.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.LeakIInHi_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED LeakIInHi_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = LeakIInLo_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_LeakIInLo"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIN_EVEN_OSC+LEAK_IIN_EVEN_SPFUN"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = LeakIInHi_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_LeakIInHi"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIN_EVEN_OSC+LEAK_IIN_EVEN_SPFUN"; }
		}
	}
}

/*** END LeakIIn ***/

/******************************************************************************/
/*** LeakIO                                                                 ***/
/******************************************************************************/

__Test LeakIO {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_Loose;
	__Entry[1] = LeakIO_SEQ;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED LeakIO.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.DCPARA_LeakIO_8_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED DCPARA_LeakIO_8_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_LeakIO_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM03_dcpara_ioz_pd'->CurThread, 'DC_PM03_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIHPD_UNK_dcpara_ioz_pd_PM3"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_LeakIO_1_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_1"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara_ioz_pd'->CurThread, 'DC_PM04_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IOZ_ODD_dcpara_ioz_pd_PM4"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_IOZ_PD_LeakIO_2_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_IOZ_PD_LeakIO_2"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM04_dcpara_ioz_pd'->CurThread, 'DC_PM04_dcpara_ioz_pd'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IOZ_ODD_dcpara_ioz_pd_PM4"; }
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM01_dcpara'->CurThread, 'DC_PM01_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIOL_dcpara_PM1"; }
		}
	}
	__Block[4] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_4_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO_4"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM01_dcpara'->CurThread, 'DC_PM01_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IILPU_UNK_TTL_dcpara_PM1"; }
		}
	}
	__Block[5] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_5_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO_5"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM01_dcpara'->CurThread, 'DC_PM01_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IILPU_UNK_CMOS_dcpara_PM1"; }
		}
	}
	__Block[6] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_6_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO_6"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM03_dcpara'->CurThread, 'DC_PM03_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIOH_dcpara_PM3"; }
		}
	}
	__Block[7] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_7_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO_7"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM03_dcpara'->CurThread, 'DC_PM03_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIHPD_UNK_CMOS_dcpara_PM3"; }
		}
	}
	__Block[8] = {
		__EnableExpression = __Expression { __String = "if(ContinueOnFail,TRUE, TRUE)"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = DCPARA_LeakIO_8_st;
		__TestMethod {
			__Name = LTXC::DCTest;
			LevelsSetup = __Expression { __String = "&DCsetup_PinLeak_DCPARA_LeakIO_8"; }
			MakeBeforeBreakRelays = __Expression { __String = "TRUE"; }
			PerPinMeasurements = __Expression { __String = "#"; __Mode = Output; }
			PresetPatterns = __Expression { __String = "skip( 'DC_PM03_dcpara'->CurThread, 'DC_PM03_dcpara'->twMDC )"; }
			/* Restore_pin_connections[] = __Expression { __String = "TRUE"; }*/
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "LEAK_IIHPD_UNK_TTL_dcpara_PM3"; }
		}
	}
}

/*** END LeakIO ***/

/******************************************************************************/
/*** SupplyShorts2                                                          ***/
/******************************************************************************/

__Test SupplyShorts2 {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_allZero;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED SupplyShorts2.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.SupplyShorts2_VDD_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED SupplyShorts2_VDD_st.\n', ''),0) )"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDS_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDS"; }
			HighLimit = __Expression { __String = "ishortshiVDDS"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDS"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDS)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDS)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDAR_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDAR"; }
			HighLimit = __Expression { __String = "ishortshiVDDAR"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDAR"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDAR)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDAR)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDAR"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDA_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDDA"; }
			HighLimit = __Expression { __String = "ishortshiVDDA"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDDA"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDDA)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDDA)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDA"; }
		}
	}
	__Block[3] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDD_st;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshortsVDD"; }
			HighLimit = __Expression { __String = "ishortshiVDD"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortsloVDD"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshiVDD)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshiVDD)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDD"; }
		}
	}
	__Block[4] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDS_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDS"; }
			HighLimit = __Expression { __String = "ishortshi2VDDS"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDS"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDS)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDS)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDS"; }
		}
	}
	__Block[5] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDAR_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDAR"; }
			HighLimit = __Expression { __String = "ishortshi2VDDAR"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDAR"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDAR)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDAR)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDAR"; }
		}
	}
	__Block[6] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDDA_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDDA"; }
			HighLimit = __Expression { __String = "ishortshi2VDDA"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDDA"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDDA)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDDA)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDDA"; }
		}
	}
	__Block[7] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#->CurResult"; __Mode = Output; }
		__Title = SupplyShorts2_VDD_st_2;
		__TestMethod {
			__Name = LTXC::PowerTest;
			ExecuteSitesSerially = __Expression { __String = "FALSE"; }
			ForcedVoltage = __Expression { __String = "vshorts2VDD"; }
			HighLimit = __Expression { __String = "ishortshi2VDD"; }
			LevelsSetup = __Expression { __String = "&DCsetup_ZeroPins_ZeroSupplies_RampDown"; }
			LowLimit = __Expression { __String = "ishortslo2VDD"; }
			MaxAllowedCurrent = __Expression { __String = "max(5mA,1.25*ishortshi2VDD)"; }
			MaxExpectedCurrent = __Expression { __String = "max(1uA,1.1*ishortshi2VDD)"; }
			MeasurementAverages = __Expression { __String = "10"; }
			MeasurementDelay = __Expression { __String = "100ms"; }
			MethodOfTest = __Expression { __String = "Ptest_Method:STATIC"; }
			SetupRangeAfterPreset = __Expression { __String = "TRUE"; }
			SimulatedTestResult = __Expression { __String = "TM_RESULT:TM_PASS"; }
			TestPins = __Expression { __String = "VDD"; }
		}
	}
}

/*** END SupplyShorts2 ***/

/******************************************************************************/
/*** Cres                                                                   ***/
/******************************************************************************/

__Test Cres {
	__Mask[0] = ACSpecsMask;
	__Mask[1] = PSSpecsMask;
	__Mask[2] = DCSpecsMask;
	__Entry[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__PortExpression[0] = __Expression { __String = "skip( .Result = TM_RESULT:TM_PASS, if(TIScreenPrint, TIPrintf('DLOG', '=> PASSED Cres.\n', ''),0) )"; }
	__PortExpression[1] = __Expression { __String = "skip( TRUE {.Test_result.CRES_PINS2_st = TM_RESULT:TM_FAIL}, if(TIScreenPrint, TIPrintf('DLOG', '=> FAILED CRES_PINS2_st.\n', ''),0) )"; }
}

/*** END Cres ***/

__Test SelectSpecs {
	__Mask[0] = Globals_Typ_Mask;
	__Mask[1] = Globals_Meas_Mask;
	__Mask[2] = DCSpecsMask;
	__Mask[3] = ACSpecsMask;
	__Entry[0] = SetTyp_To_Meas_MF;
	__PortExpression[0] = __Expression { __String = ".Result = TM_RESULT:TM_PASS"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = MyBlock0;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&Initialize_EveryUnit_MF"; }
			/* Test_pins[] = __Expression { __String = "ALLPINS"; }*/
		}
	}
}


__Test ConnectDevice {
	__Entry[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__Entry[1] = Initialize_EveryUnit_MF;
	__PortExpression[0] = __Expression { __String = "TRUE"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Connect_Supplies;
		__TestMethod {
			__Name = LTXC::Connections;
			PinControl = __Expression { __String = "CONNECTION_ENUM:CONNECT_TO_DUT"; }
			TestPins = __Expression { __String = "ALLSUPPLIES"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Connect_Pins;
		__TestMethod {
			__Name = LTXC::Connections;
			PinControl = __Expression { __String = "CONNECTION_ENUM:CONNECT_TO_DUT"; }
			TestPins = __Expression { __String = "ALLPINS"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Connect_DCRefPins;
		__TestMethod {
			__Name = LTXC::Connections;
			PinControl = __Expression { __String = "CONNECTION_ENUM:CONNECT_TO_DUT"; }
			TestPins = __Expression { __String = "DCREF_PINS"; }
		}
	}
}


__Test DisconnectDevice {
	__Mask[0] = DCSpecsMask;
	__Entry[0] = DCsetup_ZeroPins_ZeroSupplies_RampDown;
	__PortExpression[0] = __Expression { __String = "TRUE"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Disconnect_DCRefPins;
		__TestMethod {
			__Name = LTXC::Connections;
			PinControl = __Expression { __String = "CONNECTION_ENUM:DISCONNECT_FROM_DUT"; }
			TestPins = __Expression { __String = "DCREF_PINS"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Disconnect_Pins;
		__TestMethod {
			__Name = LTXC::Connections;
			PinControl = __Expression { __String = "CONNECTION_ENUM:DISCONNECT_FROM_DUT"; }
			TestPins = __Expression { __String = "ALLPINS"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = Disconnect_Supplies;
		__TestMethod {
			__Name = LTXC::Connections;
			CallAfterSetup = __Expression { __String = "&Delay_MF"; }
			PinControl = __Expression { __String = "CONNECTION_ENUM:DISCONNECT_FROM_DUT"; }
			TestPins = __Expression { __String = "ALLSUPPLIES"; }
		}
	}
}


/*****************************/
/*** FocusCalibration Test ***/
/*****************************/
__Test FocusCalibration {
	__Mask[0] = DCSpecsMask;
	__Mask[1] = ACSpecsMask;
	__Entry[0] = CalibrationLevels;
	__PortExpression[0] = __Expression { __String = "TRUE"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
}



/***********************/
/*** Axis objects    ***/
/***********************/

__Axis SRCH_VDD_PS {
    __NumberSteps = __Expression { __String = "floor(fabs((SRCH_VDD_PS.V0.Stop-SRCH_VDD_PS.V0.Start)/18.5mV))"; }
    __ParameterVariance {
        __Param VDD_PS;
        __Start = __Expression { __String = "810mV"; }
        __Stop = __Expression { __String = "1.18V"; }
        __PinGroup = __Expression { __String = "VDD"; }
    }
}
__Axis SRCH_VDDAR_PS {
    __NumberSteps = __Expression { __String = "floor(fabs((SRCH_VDDAR_PS.V0.Stop-SRCH_VDDAR_PS.V0.Start)/18.5mV))"; }
    __ParameterVariance {
        __Param VDDAR_PS;
        __Start = __Expression { __String = "810mV"; }
        __Stop = __Expression { __String = "1.18V"; }
        __PinGroup = __Expression { __String = "VDDAR"; }
    }
}
__Test MFCurveTest {
	__Mask[1] = CTMask;
	__Entry[0] = CTLevels;
	__PortExpression[0] = __Expression { __String = ".Result = TM_RESULT:TM_PASS"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = PrintVoltageRange;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&VoltageRange"; }
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = PinTrace;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&CurveTrace"; }
		}
	}
	__Block[2] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = SupplyTrace;
		__TestMethod {
			__Name = LTXC::GenericTest;
			CallAfterSetup = __Expression { __String = "&SupplyTrace"; }
		}
	}
}

                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/testware.evo                                   */
/* Creation Date  : Tue Jan  3 17:13:02 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


__Test TW_NewUnit {
	__PortExpression[0] = __Expression { __String = "TRUE"; }
	__PortExpression[1] = __Expression { __String = "TRUE"; }
	__Block[0] = {
		__EnableExpression = __Expression { __String = "TRUE"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = TW_NewUnit_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
	__Block[1] = {
		__EnableExpression = __Expression { __String = "if(CharacterizeDevice OR (CharDevCount != CharDevCount.Typ),TRUE,FALSE)"; }
		__Result = __Expression { __String = "#"; __Mode = Output; }
		__Title = TW_NewUnit_CharStuff_st;
		__TestMethod {
			__Name = LTXC::GenericTest;
		}
	}
}


__FunctionCall TW_Init_MF {/* --A MicroFlow was here... */}


__FunctionCall TW_Print_MF {/* --A MicroFlow was here... */}


__FunctionCall TW_NewUnit_MF {/* --A MicroFlow was here... */}

                            
/******************************************************************************/
/* Jazz Integrated Program : Bllizar                                          */
/*                                                                            */
/* Program Module : FusionProg/utilities.evo                                  */
/* Creation Date  : Tue Jan  3 17:12:56 2012                                  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*	                        Revision Comments 			      */
/*                                                                            */
/* 1st char of Rev (0-Z) - major revisions               	              */
/* 2nd char of Rev (0-Z) - minor revisions               		      */
/*									      */
/* Rev : Comment                                          : UserID   : Date   */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*									      */
/*  A0 : Initial version of the Fusion Test Program       : x0051755 :        */
/*                                                                            */
/******************************************************************************/
/*  Jazz Version used: /vobs/ASP/jazz/release */
/******************************************************************************/


/******************************************************************************/
/*** MicroFlow FFDieIDRead_MF			     	                    ***/
/******************************************************************************/
__FunctionCall FFDieIDRead_MF {/* --A MicroFlow was here... */}


__FunctionCall Pin2PinConty_MF {/* --A MicroFlow was here... */}


__FunctionCall CheckFROMPreRepair_MF {/* --A MicroFlow was here... */}



__FunctionCall CalcAndSendDataTW_MF {/* --A MicroFlow was here... */}



__FunctionCall CheckFROMPostRepair_MF {/* --A MicroFlow was here... */}



/*************************************************************/
/*        Microflow to program DieID : FFDieIDProg_MF        */
/*************************************************************/
__FunctionCall FFDieIDProg_MF {/* --A MicroFlow was here... */}



/*********************************************/
/*** IDDQ CONTINUE_PATTERNS_MF MicroFlow    */
/*********************************************/
__FunctionCall CONTINUE_PATTERNS_MF {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM1 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM1 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM2 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM2 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM3 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM3 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM4 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM4 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM5 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM5 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM6 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM6 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM7 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM7 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM8 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM8 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM9 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM9 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM10 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM10 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM11 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM11 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM12 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM12 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM263 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM263 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM420 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM420 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM266 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM266 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM417 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM417 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM269 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM269 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM414 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM414 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM272 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM272 {/* --A MicroFlow was here... */}



/*******************************************/
/*** Iddq IddqDisconnect_PM411 MicroFlow     */
/*******************************************/
__FunctionCall IddqDisconnect_PM411 {/* --A MicroFlow was here... */}


/************************************************************************
*
* The IddqDelta_mf calls a Cadence routine.
/************************************************************************/
__FunctionCall IddqDelta_mf {/* --A MicroFlow was here... */}


/************************************************************************
*
* The IddqDrift_mf calls a Cadence routine.
/************************************************************************/
__FunctionCall IddqDrift_mf {/* --A MicroFlow was here... */}


/**************************************/
/*** Initialize_EveryUnit MicroFlow ***/
/**************************************/

__FunctionCall Initialize_EveryUnit_MF {/* --A MicroFlow was here... */}


/************************************************************************
* This Micro Flow is used to Initialize arrays for each Site *
/************************************************************************/
__FunctionCall Initialize_EverySite_Array_MF {/* --A MicroFlow was here... */}


/**************************/
/***  Delay MicroFlow   ***/
/**************************/
__FunctionCall Delay_MF {/* --A MicroFlow was here... */}



/***********************************************************************/
/***                                                                 ***/
/*** Start of all objects defined for the Fusion Curve Trace routine ***/
/***                                                                 ***/
/***********************************************************************/
__FunctionCall VoltageRange {/* --A MicroFlow was here... */}


__FunctionCall SupplyTrace {/* --A MicroFlow was here... */}


__FunctionCall CurveTrace {/* --A MicroFlow was here... */}


/**********************************************************************/
/***                                                                ***/
/***  End of all objects defined for the Fusion Curve Trace routine ***/
/***                                                                ***/
/**********************************************************************/


/***************/
/*** Trigger ***/
/***************/




/***************************/
/*** CaptureTool Objects ***/
/***************************/

__WaveformCapture ALLPINS_Capture {
  __ReferenceSegment "";
  __Start "1";
  __Stop "100";
  __Pins "ALLPINS" {
	__Enable __True;
	__Merge EVW_Merge_All;
	__DriveEnable __True;
	__ResponseEnable __True;
  }
}


/************************************************************/
/*** Various microflows for easier debug with breakpoints ***/
/***   - Presented at 2001 LTX User's Conference          ***/
/************************************************************/

__FunctionCall Ev_Prompt_help {/* --A MicroFlow was here... */}


__FunctionCall Ev_Break_off {/* --A MicroFlow was here... */}

__FunctionCall Ev_Break_on {/* --A MicroFlow was here... */}

__FunctionCall Ev_Break_on_fail {/* --A MicroFlow was here... */}

__FunctionCall Ev_Break_on_trig {/* --A MicroFlow was here... */}


__FunctionCall Ev_Trace_off {/* --A MicroFlow was here... */}

__FunctionCall Ev_Trace_on {/* --A MicroFlow was here... */}

__FunctionCall Ev_Trace_on_fail {/* --A MicroFlow was here... */}

__FunctionCall Ev_Trace_on_trig {/* --A MicroFlow was here... */}


__FunctionCall Ev_Dlog_off {/* --A MicroFlow was here... */}

__FunctionCall Ev_Dlog_on {/* --A MicroFlow was here... */}

__FunctionCall Ev_Dlog_on_fail {/* --A MicroFlow was here... */}

__FunctionCall Ev_Dlog_on_trig {/* --A MicroFlow was here... */}


__FunctionCall Ev_Override_off {/* --A MicroFlow was here... */}

__FunctionCall Ev_Override_on {/* --A MicroFlow was here... */}

__FunctionCall Ev_Override_on_trig {/* --A MicroFlow was here... */}


__FunctionCall StressTimeMF {/* --A MicroFlow was here... */}


__Axis CharAxis_VDD_PS {
    __Title = "CharAxis_VDD_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDD_PS.V0.Stop-CharAxis_VDD_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDD_PS;
        __Start = __Expression { __String = "VDD_PS.Max"; }
        __Stop = __Expression { __String = "VDD_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_tper {
    __Title = "CharAxis_tper";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_tper.V0.Stop-CharAxis_tper.V0.Start)/charStep_tper))"; }
    __ParameterVariance {
        __Param tper;
        __Start = __Expression { __String = "tper.Max"; }
        __Stop = __Expression { __String = "tper.Min"; }
        __PinGroup = __Expression { __String = "ALLPINS"; }
    }
}

__FunctionCall Send_HexStrTW_MF {/* --A MicroFlow was here... */}


__Axis CharAxis_VDDS_PS {
    __Title = "CharAxis_VDDS_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDDS_PS.V0.Stop-CharAxis_VDDS_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDDS_PS;
        __Start = __Expression { __String = "VDDS_PS.Max"; }
        __Stop = __Expression { __String = "VDDS_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

/************************************************************************
* 
* The CharSearch_MF is where all per-thread characterization is done
* 
************************************************************************/
__FunctionCall CharSearch_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_tper_MF - 
************************************************************************/
__FunctionCall Char_tper_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_tperAsync_MF - 
************************************************************************/
__FunctionCall Char_tperAsync_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_tfreq_MF - 
************************************************************************/
__FunctionCall Char_tfreq_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_tfreqAsync_MF - 
************************************************************************/
__FunctionCall Char_tfreqAsync_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_V_1_2_PS_MF - 
************************************************************************/
__FunctionCall Char_V_1_2_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_V_3_3_PS_MF - 
************************************************************************/
__FunctionCall Char_V_3_3_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDD_PS_MF - 
************************************************************************/
__FunctionCall Char_VDD_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDDEEPROM_PS_MF - 
************************************************************************/
__FunctionCall Char_VDDEEPROM_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDDPGM_PS_MF - 
************************************************************************/
__FunctionCall Char_VDDPGM_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VNWA_PS_MF - 
************************************************************************/
__FunctionCall Char_VNWA_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDDAR_PS_MF - 
************************************************************************/
__FunctionCall Char_VDDAR_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VBAT_PS_MF - 
************************************************************************/
__FunctionCall Char_VBAT_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDDS_PS_MF - 
************************************************************************/
__FunctionCall Char_VDDS_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VDDA_PS_MF - 
************************************************************************/
__FunctionCall Char_VDDA_PS_MF {/* --A MicroFlow was here... */}


/************************************************************************
* Char_VPP_PS_MF - 
************************************************************************/
__FunctionCall Char_VPP_PS_MF {/* --A MicroFlow was here... */}


__FunctionCall SendBitCountTW_MF {/* --A MicroFlow was here... */}


__Axis CharAxis_VBAT_PS {
    __Title = "CharAxis_VBAT_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VBAT_PS.V0.Stop-CharAxis_VBAT_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VBAT_PS;
        __Start = __Expression { __String = "VBAT_PS.Max"; }
        __Stop = __Expression { __String = "VBAT_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_VDDAR_PS {
    __Title = "CharAxis_VDDAR_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDDAR_PS.V0.Stop-CharAxis_VDDAR_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDDAR_PS;
        __Start = __Expression { __String = "VDDAR_PS.Max"; }
        __Stop = __Expression { __String = "VDDAR_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

/************************************************************************
*
* The OSpinsTestware_MF is used to send fail data from OSpins Test to Testware *
/************************************************************************/
__FunctionCall OSpinsTestware_MF {/* --A MicroFlow was here... */}


__FunctionCall memChar_MF {/* --A MicroFlow was here... */}


__FunctionCall mergeBitmapsMF {/* --A MicroFlow was here... */}


__Axis CharAxis_VDDEEPROM_PS {
    __Title = "CharAxis_VDDEEPROM_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDDEEPROM_PS.V0.Stop-CharAxis_VDDEEPROM_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDDEEPROM_PS;
        __Start = __Expression { __String = "VDDEEPROM_PS.Max"; }
        __Stop = __Expression { __String = "VDDEEPROM_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis FakeAxis {
    __Title = "Fake_Axis";
    __NumberSteps = __Expression { __String = "0"; }
    __ParameterVariance {
        __Param tref;
        __Start = __Expression { __String = "tref"; }
        __Stop = __Expression { __String = "tref"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_VDDPGM_PS {
    __Title = "CharAxis_VDDPGM_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDDPGM_PS.V0.Stop-CharAxis_VDDPGM_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDDPGM_PS;
        __Start = __Expression { __String = "VDDPGM_PS.Max"; }
        __Stop = __Expression { __String = "VDDPGM_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_V_1_2_PS {
    __Title = "CharAxis_V_1_2_PS";
    __ParameterVariance {
        __Param V_1_2_PS, VDD_PS, VDDEEPROM_PS, VDDPGM_PS, VNWA_PS, VDDAR_PS, VPP_PS;
        __Start = __Expression { __String = "V_1_2_PS.Max"; }
        __Stop = __Expression { __String = "V_1_2_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_VDDA_PS {
    __Title = "CharAxis_VDDA_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VDDA_PS.V0.Stop-CharAxis_VDDA_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VDDA_PS;
        __Start = __Expression { __String = "VDDA_PS.Max"; }
        __Stop = __Expression { __String = "VDDA_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__FunctionCall calcBistBinaryStr_MF {/* --A MicroFlow was here... */}


/***************************************************************
** AllFailsSVM_MF
**   You can use this microflow to print out all the failing
**   vectors in a particular thread.  
** - Requires CurThread.Meas to be set to the correct Thread.
****************************************************************/
__FunctionCall AllFailsSVM_MF {/* --A MicroFlow was here... */}


__Axis CharAxis_VPP_PS {
    __Title = "CharAxis_VPP_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VPP_PS.V0.Stop-CharAxis_VPP_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VPP_PS;
        __Start = __Expression { __String = "VPP_PS.Max"; }
        __Stop = __Expression { __String = "VPP_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_tperAsync {
    __Title = "CharAxis_tperAsync";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_tperAsync.V0.Stop-CharAxis_tperAsync.V0.Start)/charStep_tperAsync))"; }
    __ParameterVariance {
        __Param tperAsync;
        __Start = __Expression { __String = "tperAsync.Max"; }
        __Stop = __Expression { __String = "tperAsync.Min"; }
        __PinGroup = __Expression { __String = "ALLPINS"; }
    }
}

__Axis CharAxis_V_3_3_PS {
    __Title = "CharAxis_V_3_3_PS";
    __ParameterVariance {
        __Param V_3_3_PS, VBAT_PS, VDDS_PS, VDDA_PS;
        __Start = __Expression { __String = "V_3_3_PS.Max"; }
        __Stop = __Expression { __String = "V_3_3_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_VNWA_PS {
    __Title = "CharAxis_VNWA_PS";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_VNWA_PS.V0.Stop-CharAxis_VNWA_PS.V0.Start)/CharVoltageStep))"; }
    __ParameterVariance {
        __Param VNWA_PS;
        __Start = __Expression { __String = "VNWA_PS.Max"; }
        __Stop = __Expression { __String = "VNWA_PS.Min"; }
        __PinGroup = __Expression { }
    }
}

__Axis CharAxis_tfreqAsync {
    __Title = "CharAxis_tfreqAsync";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_tfreqAsync.V0.Stop-CharAxis_tfreqAsync.V0.Start)/charStep_tfreqAsync))"; }
    __ParameterVariance {
        __Param tfreqAsync;
        __Start = __Expression { __String = "tfreqAsync.Min"; }
        __Stop = __Expression { __String = "tfreqAsync.Max"; }
        __PinGroup = __Expression { __String = "ALLPINS"; }
    }
}

__Axis CharAxis_tfreq {
    __Title = "CharAxis_tfreq";
    __NumberSteps = __Expression { __String = "floor(fabs((CharAxis_tfreq.V0.Stop-CharAxis_tfreq.V0.Start)/charStep_tfreq))"; }
    __ParameterVariance {
        __Param tfreq;
        __Start = __Expression { __String = "tfreq.Min"; }
        __Stop = __Expression { __String = "tfreq.Max"; }
        __PinGroup = __Expression { __String = "ALLPINS"; }
    }
}

/************************************************************************
* 
* The ExecuteCharStep_MF is executed at each step of characterization searches
* 
************************************************************************/
__FunctionCall ExecuteCharStep_MF {/* --A MicroFlow was here... */}


/***************************************************************
** AllFailsDVM_MF
**   You can use this microflow to print out all the failing
**   vectors in a particular thread.  
**   *** To improve DVM failures, you should
**   *** have datalog set to > 2 fail vectors
**   *** as some vectors may be missed
** - Requires CurThread.Meas to be set to the correct Thread.
****************************************************************/
__FunctionCall AllFailsDVM_MF {/* --A MicroFlow was here... */}


__FunctionCall RemoveAllVoltageMF {/* --A MicroFlow was here... */}


/*************************************************************
* SetTyp_To_Meas_MF puts the typ values in the Meas field to *
* read the values when mask is set to Meas                   *
*************************************************************/
__FunctionCall SetTyp_To_Meas_MF {/* --A MicroFlow was here... */}



/*************************************************************
* SetSpec_To_VMin_MF puts the typ values of VMin Category    *
* in ths Meas field to read  values when mask is set to Meas *
*************************************************************/
__FunctionCall SetSpec_To_VMin_MF {/* --A MicroFlow was here... */}

                            
__PatternSequence FUNC_BIST_PG_PS {
    __Thread[0] = FUNC_BIST_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT9 = { WFT9 } }
        __Row { TDLStdPatGrp, WFT23 = { WFT23 } }
        __Row { TDLStdPatGrp, WFT24 = { WFT24 } }
    }
    __AutoBasePeriod = __True;
}
__Thread FUNC_BIST_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u1_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u4_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u5_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u2_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u3_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u6_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u7_8bit_mode_DPM;
    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1010 of global.h of the VLCT program) -- BJP
//    __Row {
//        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
//        __Pattern = hibernate_reg_rw_DPM;
//    }
// This pattern is commented out of the V1PQ727C04 VLCT program
// (see lin 1009 of global.h of the VLCT program) -- BJP
//    __Row {
//        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
//        __Pattern = hib_rtcsec_subsec_DPM;
//    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi0_loopback_pll_b_CPM.ssi0_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "ssi0_loopback_pll_b_CPM.ssi0_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi0_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi1_loopback_pll_b_CPM.ssi1_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "ssi1_loopback_pll_b_CPM.ssi1_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi1_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi2_loopback_pll_b_CPM.ssi2_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "ssi2_loopback_pll_b_CPM.ssi2_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi2_loopback_pll_b_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "ssi3_loopback_pll_b_CPM.ssi3_loopback_pll_b_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "ssi3_loopback_pll_b_CPM.ssi3_loopback_pll_b_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __Pattern = ssi3_loopback_pll_b_DPM;
    }
}
__PatternSequence FUNC_BIST_PG_1_PS {
    __Thread[0] = FUNC_BIST_PG_1_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT9 = { WFT9 } }
    }
    __AutoBasePeriod = __True;
}
__Thread FUNC_BIST_PG_1_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u1_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u4_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u5_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u2_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u3_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u6_8bit_mode_DPM;
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __Pattern = u0u7_8bit_mode_DPM;
    }
}
__PatternSequence SCAN_IDDQ_1_PG_PS {
    __Thread[0] = SCAN_IDDQ_1_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT16 = { WFT16 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_IDDQ_1_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_CPM.pb_iddq_ret_chkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_chkr_DPM.pb_iddq_ret_chkr_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_CPM.pb_iddq_ret_invchkr_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_invchkr_DPM.pb_iddq_ret_invchkr_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_CPM.pb_iddq_ret_ones_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_ones_DPM.pb_iddq_ret_ones_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_CPM.pb_iddq_ret_zeroes_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_iddq_ret_zeroes_DPM.pb_iddq_ret_zeroes_DPM_st"; }
    }
}
__PatternSequence SCAN_IDDQ_PG_PS {
    __Thread[0] = SCAN_IDDQ_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT1 = { WFT1 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_IDDQ_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_iddq_CPM.a_iddq_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_iddq_DPM.a_iddq_DPM_st"; }
    }
}
__PatternSequence SCAN_PATHDELAY_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT3 = { WFT3 } }
        __Row { TDLStdPatGrp, WFT4 = { WFT4 } }
        __Row { TDLStdPatGrp, WFT5 = { WFT5 } }
        __Row { TDLStdPatGrp, WFT6 = { WFT6 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_CPM.a_tft_tk_16_16_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_CPM.a_tft_tk_16_16_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_DPM.a_tft_tk_16_16_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_CPM.a_tft_tk_16_16_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_CPM.a_tft_tk_16_16_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_DPM.a_tft_tk_16_16_2_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_CPM.a_tft_tk_16_16_3_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_CPM.a_tft_tk_16_16_3_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_DPM.a_tft_tk_16_16_3_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_CPM.a_tft_tk_25_25_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_CPM.a_tft_tk_25_25_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_DPM.a_tft_tk_25_25_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_CPM.a_tft_tk_33_33_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_CPM.a_tft_tk_33_33_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_DPM.a_tft_tk_33_33_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_CPM.a_tft_tk_33_33_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_CPM.a_tft_tk_33_33_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_DPM.a_tft_tk_33_33_2_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_CPM.a_tft_tk_40_40_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_CPM.a_tft_tk_40_40_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_DPM.a_tft_tk_40_40_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_CPM.a_tft_tk_40_40_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_CPM.a_tft_tk_40_40_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_DPM.a_tft_tk_40_40_2_DPM_st"; }
    }
}
__PatternSequence SCAN_PATHDELAY_16_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_16_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT3 = { WFT3 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_16_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_CPM.a_tft_tk_16_16_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_CPM.a_tft_tk_16_16_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_1_DPM.a_tft_tk_16_16_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_CPM.a_tft_tk_16_16_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_CPM.a_tft_tk_16_16_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_2_DPM.a_tft_tk_16_16_2_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_CPM.a_tft_tk_16_16_3_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_CPM.a_tft_tk_16_16_3_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_16_16_3_DPM.a_tft_tk_16_16_3_DPM_st"; }
    }
}

__PatternSequence SCAN_PATHDELAY_25_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_25_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT4 = { WFT4 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_25_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_CPM.a_tft_tk_25_25_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_CPM.a_tft_tk_25_25_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_25_25_1_DPM.a_tft_tk_25_25_1_DPM_st"; }
    }
}
__PatternSequence SCAN_PATHDELAY_33_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_33_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT5 = { WFT5 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_33_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_CPM.a_tft_tk_33_33_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_CPM.a_tft_tk_33_33_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_1_DPM.a_tft_tk_33_33_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_CPM.a_tft_tk_33_33_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_CPM.a_tft_tk_33_33_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_33_33_2_DPM.a_tft_tk_33_33_2_DPM_st"; }
    }
}
__PatternSequence SCAN_PATHDELAY_40_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_40_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT6 = { WFT6 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_40_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_CPM.a_tft_tk_40_40_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_CPM.a_tft_tk_40_40_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_1_DPM.a_tft_tk_40_40_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_CPM.a_tft_tk_40_40_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_CPM.a_tft_tk_40_40_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_40_40_2_DPM.a_tft_tk_40_40_2_DPM_st"; }
    }
}

__PatternSequence SCAN_PATHDELAY_80_PG_PS {
    __Thread[0] = SCAN_PATHDELAY_80_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT2 = { WFT2 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_PATHDELAY_80_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_1_CPM.a_tft_tk_80_80_1_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_1_CPM.a_tft_tk_80_80_1_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_1_DPM.a_tft_tk_80_80_1_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_2_CPM.a_tft_tk_80_80_2_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_2_CPM.a_tft_tk_80_80_2_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_2_DPM.a_tft_tk_80_80_2_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_3_CPM.a_tft_tk_80_80_3_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_3_CPM.a_tft_tk_80_80_3_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_3_DPM.a_tft_tk_80_80_3_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_4_CPM.a_tft_tk_80_80_4_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_4_CPM.a_tft_tk_80_80_4_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_4_DPM.a_tft_tk_80_80_4_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_5_CPM.a_tft_tk_80_80_5_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_5_CPM.a_tft_tk_80_80_5_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_5_DPM.a_tft_tk_80_80_5_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_6_CPM.a_tft_tk_80_80_6_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_6_CPM.a_tft_tk_80_80_6_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_6_DPM.a_tft_tk_80_80_6_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_7_CPM.a_tft_tk_80_80_7_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_7_CPM.a_tft_tk_80_80_7_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_7_DPM.a_tft_tk_80_80_7_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_8_CPM.a_tft_tk_80_80_8_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_8_CPM.a_tft_tk_80_80_8_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_8_DPM.a_tft_tk_80_80_8_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_9_CPM.a_tft_tk_80_80_9_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_9_CPM.a_tft_tk_80_80_9_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_9_DPM.a_tft_tk_80_80_9_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_11_CPM.a_tft_tk_80_80_11_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_11_CPM.a_tft_tk_80_80_11_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_11_DPM.a_tft_tk_80_80_11_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_12_CPM.a_tft_tk_80_80_12_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_12_CPM.a_tft_tk_80_80_12_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_12_DPM.a_tft_tk_80_80_12_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_13_CPM.a_tft_tk_80_80_13_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_13_CPM.a_tft_tk_80_80_13_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_13_DPM.a_tft_tk_80_80_13_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_14_CPM.a_tft_tk_80_80_14_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_14_CPM.a_tft_tk_80_80_14_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_14_DPM.a_tft_tk_80_80_14_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_15_CPM.a_tft_tk_80_80_15_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_15_CPM.a_tft_tk_80_80_15_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_15_DPM.a_tft_tk_80_80_15_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_16_CPM.a_tft_tk_80_80_16_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_16_CPM.a_tft_tk_80_80_16_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_16_DPM.a_tft_tk_80_80_16_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_17_CPM.a_tft_tk_80_80_7_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_7_CPM.a_tft_tk_80_80_7_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_17_DPM.a_tft_tk_80_80_17_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_18_CPM.a_tft_tk_80_80_18_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_18_CPM.a_tft_tk_80_80_18_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_18_DPM.a_tft_tk_80_80_18_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_19_CPM.a_tft_tk_80_80_19_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_19_CPM.a_tft_tk_80_80_19_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_19_DPM.a_tft_tk_80_80_19_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_21_CPM.a_tft_tk_80_80_21_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_21_CPM.a_tft_tk_80_80_21_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_21_DPM.a_tft_tk_80_80_21_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_22_CPM.a_tft_tk_80_80_22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_22_CPM.a_tft_tk_80_80_22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_22_DPM.a_tft_tk_80_80_22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_23_CPM.a_tft_tk_80_80_23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_23_CPM.a_tft_tk_80_80_23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_23_DPM.a_tft_tk_80_80_23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_24_CPM.a_tft_tk_80_80_24_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_24_CPM.a_tft_tk_80_80_24_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_24_DPM.a_tft_tk_80_80_24_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_25_CPM.a_tft_tk_80_80_25_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_25_CPM.a_tft_tk_80_80_25_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_25_DPM.a_tft_tk_80_80_25_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_26_CPM.a_tft_tk_80_80_26_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_26_CPM.a_tft_tk_80_80_26_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_26_DPM.a_tft_tk_80_80_26_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_27_CPM.a_tft_tk_80_80_27_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_27_CPM.a_tft_tk_80_80_27_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_27_DPM.a_tft_tk_80_80_27_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_28_CPM.a_tft_tk_80_80_28_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_28_CPM.a_tft_tk_80_80_28_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_28_DPM.a_tft_tk_80_80_28_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_29_CPM.a_tft_tk_80_80_29_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_29_CPM.a_tft_tk_80_80_29_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_29_DPM.a_tft_tk_80_80_29_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_31_CPM.a_tft_tk_80_80_31_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_31_CPM.a_tft_tk_80_80_31_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_31_DPM.a_tft_tk_80_80_31_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_32_CPM.a_tft_tk_80_80_32_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_32_CPM.a_tft_tk_80_80_32_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_32_DPM.a_tft_tk_80_80_32_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_33_CPM.a_tft_tk_80_80_33_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_33_CPM.a_tft_tk_80_80_33_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_33_DPM.a_tft_tk_80_80_33_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_34_CPM.a_tft_tk_80_80_34_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_34_CPM.a_tft_tk_80_80_34_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_34_DPM.a_tft_tk_80_80_34_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_35_CPM.a_tft_tk_80_80_35_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_35_CPM.a_tft_tk_80_80_35_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_35_DPM.a_tft_tk_80_80_35_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_36_CPM.a_tft_tk_80_80_36_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_36_CPM.a_tft_tk_80_80_36_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_36_DPM.a_tft_tk_80_80_36_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_37_CPM.a_tft_tk_80_80_37_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_37_CPM.a_tft_tk_80_80_37_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_37_DPM.a_tft_tk_80_80_37_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_38_CPM.a_tft_tk_80_80_38_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_38_CPM.a_tft_tk_80_80_38_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_38_DPM.a_tft_tk_80_80_38_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_39_CPM.a_tft_tk_80_80_39_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_39_CPM.a_tft_tk_80_80_39_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_39_DPM.a_tft_tk_80_80_39_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_41_CPM.a_tft_tk_80_80_41_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_41_CPM.a_tft_tk_80_80_41_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_41_DPM.a_tft_tk_80_80_41_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_42_CPM.a_tft_tk_80_80_42_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_42_CPM.a_tft_tk_80_80_42_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_42_DPM.a_tft_tk_80_80_42_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_43_CPM.a_tft_tk_80_80_43_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_43_CPM.a_tft_tk_80_80_43_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_43_DPM.a_tft_tk_80_80_43_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_44_CPM.a_tft_tk_80_80_44_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_44_CPM.a_tft_tk_80_80_44_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_44_DPM.a_tft_tk_80_80_44_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_45_CPM.a_tft_tk_80_80_45_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_45_CPM.a_tft_tk_80_80_45_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_45_DPM.a_tft_tk_80_80_45_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_46_CPM.a_tft_tk_80_80_46_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_46_CPM.a_tft_tk_80_80_46_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_46_DPM.a_tft_tk_80_80_46_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_47_CPM.a_tft_tk_80_80_47_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_47_CPM.a_tft_tk_80_80_47_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_tft_tk_80_80_47_DPM.a_tft_tk_80_80_47_DPM_st"; }
    }

}


__PatternSequence SCAN_SA_PG_PS {
    __Thread[0] = SCAN_SA_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT1 = { WFT1 } }
    }
    __AutoBasePeriod = __True;
}
__Thread SCAN_SA_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_1_v22_CPM.a_st_tk_1_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_1_v22_CPM.a_st_tk_1_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_1_v22_DPM.a_st_tk_1_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_2_v22_CPM.a_st_tk_2_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_2_v22_CPM.a_st_tk_2_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_2_v22_DPM.a_st_tk_2_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_3_v22_CPM.a_st_tk_3_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_3_v22_CPM.a_st_tk_3_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_3_v22_DPM.a_st_tk_3_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_4_v22_CPM.a_st_tk_4_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_4_v22_CPM.a_st_tk_4_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_4_v22_DPM.a_st_tk_4_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_5_v22_CPM.a_st_tk_5_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_5_v22_CPM.a_st_tk_5_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_5_v22_DPM.a_st_tk_5_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_6_v22_CPM.a_st_tk_6_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_6_v22_CPM.a_st_tk_6_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_6_v22_DPM.a_st_tk_6_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_7_v22_CPM.a_st_tk_7_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_7_v22_CPM.a_st_tk_7_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_7_v22_DPM.a_st_tk_7_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_8_v22_CPM.a_st_tk_8_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_8_v22_CPM.a_st_tk_8_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_8_v22_DPM.a_st_tk_8_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_9_v22_CPM.a_st_tk_9_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_9_v22_CPM.a_st_tk_9_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_9_v22_DPM.a_st_tk_9_v22_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_10_v22_CPM.a_st_tk_10_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_10_v22_CPM.a_st_tk_10_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_10_v22_DPM.a_st_tk_10_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_11_v22_CPM.a_st_tk_11_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_11_v22_CPM.a_st_tk_11_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_11_v22_DPM.a_st_tk_11_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_12_v22_CPM.a_st_tk_12_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_12_v22_CPM.a_st_tk_12_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_12_v22_DPM.a_st_tk_12_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_13_v22_CPM.a_st_tk_13_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_13_v22_CPM.a_st_tk_13_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_13_v22_DPM.a_st_tk_13_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_14_v22_CPM.a_st_tk_14_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_14_v22_CPM.a_st_tk_14_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_14_v22_DPM.a_st_tk_14_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_15_v22_CPM.a_st_tk_15_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_15_v22_CPM.a_st_tk_15_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_15_v22_DPM.a_st_tk_15_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_16_v22_CPM.a_st_tk_16_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_16_v22_CPM.a_st_tk_16_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_16_v22_DPM.a_st_tk_16_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_17_v22_CPM.a_st_tk_17_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_17_v22_CPM.a_st_tk_17_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_17_v22_DPM.a_st_tk_17_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_18_v22_CPM.a_st_tk_18_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_18_v22_CPM.a_st_tk_18_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_18_v22_DPM.a_st_tk_18_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_19_v22_CPM.a_st_tk_19_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_19_v22_CPM.a_st_tk_19_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_19_v22_DPM.a_st_tk_19_v22_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_20_v22_CPM.a_st_tk_20_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_20_v22_CPM.a_st_tk_20_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_20_v22_DPM.a_st_tk_20_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_21_v22_CPM.a_st_tk_21_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_21_v22_CPM.a_st_tk_21_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_21_v22_DPM.a_st_tk_21_v22_DPM_st"; }
    }


    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_1_v22_CPM.a_st_tk_fles_1_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_1_v22_CPM.a_st_tk_fles_1_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_1_v22_DPM.a_st_tk_fles_1_v22_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_2_v22_CPM.a_st_tk_fles_2_v22_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_2_v22_CPM.a_st_tk_fles_2_v22_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "a_st_tk_fles_2_v22_DPM.a_st_tk_fles_2_v22_DPM_st"; }
    }
}    

__PatternSequence BIST_PROD_PG_PS {
    __Thread[0] = BIST_PROD_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT17 = { WFT17 } }
    }
    __AutoBasePeriod = __True;
}
__Thread BIST_PROD_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_down2_1p_DPM.pb_pb_down2_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_dtxn2_1p_DPM.pb_pb_dtxn2_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_flip10_1p_DPM.pb_pb_flip10_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_ftr_DPM.pb_pb_ftr_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_mapcol_1p_DPM.pb_pb_mapcol_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_march13n_1p_DPM.pb_pb_march13n_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_pmos_open_1p_DPM.pb_pb_pmos_open_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_precharge_1p_DPM.pb_pb_precharge_1p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_ptr_DPM.pb_pb_ptr_DPM_st"; }
    }
}

__PatternSequence PBIST_2P_PROD_PG_PS {
    __Thread[0] = PBIST_2P_PROD_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT18 = { WFT18 } }
    }
    __AutoBasePeriod = __True;
}
__Thread PBIST_2P_PROD_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_down2_2p_DPM.pb_pb_down2_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_dtxn2_2p_DPM.pb_pb_dtxn2_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_flip10_2p_DPM.pb_pb_flip10_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_mapcol_2p_DPM.pb_pb_mapcol_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_march13n_2p_DPM.pb_pb_march13n_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_pmos_open_2p_DPM.pb_pb_pmos_open_2p_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_pb_precharge_2p_DPM.pb_pb_precharge_2p_DPM_st"; }
    }
}

__PatternSequence BURNIN_PG_PS {
    __Thread[0] = BURNIN_PG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT18 = { WFT18 } }
    }
    __AutoBasePeriod = __True;
}
__Thread BURNIN_PG_Thrd {
}
__PatternSequence VBOXLO_MEMORY_PG_PS {
    __Thread[0] = VBOXLO_MEMORY_PGG_Thrd;
    __Zipper = __Zipper {
        __Row { TDLStdPatGrp, WFT19 = { WFT19 } }
        __Row { TDLStdPatGrp, WFT20 = { WFT20 } }
    }
    __AutoBasePeriod = __True;
}
__Thread VBOXLO_MEMORY_PG_Thrd {
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_v23_CPM.pb_vl_down2_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_v23_CPM.pb_vl_down2_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_1p_v23_DPM.pb_vl_down2_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_v23_CPM.pb_vl_down2_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_v23_CPM.pb_vl_down2_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_down2_2p_v23_DPM.pb_vl_down2_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_v23_CPM.pb_vl_dtxn2_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_v23_CPM.pb_vl_dtxn2_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_1p_v23_DPM.pb_vl_dtxn2_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_v23_CPM.pb_vl_dtxn2_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_v23_CPM.pb_vl_dtxn2_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_dtxn2_2p_v23_DPM.pb_vl_dtxn2_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_v23_CPM.pb_vl_flip10_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_v23_CPM.pb_vl_flip10_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_flip10_1p_v23_DPM.pb_vl_flip10_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_v23_CPM.pb_vl_ftr_read_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_v23_CPM.pb_vl_ftr_read_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_ftr_read_v23_DPM.pb_vl_ftr_read_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_v23_CPM.pb_vl_map_col_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_v23_CPM.pb_vl_map_col_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_1p_v23_DPM.pb_vl_map_col_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_v23_CPM.pb_vl_map_col_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_v23_CPM.pb_vl_map_col_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_map_col_2p_v23_DPM.pb_vl_map_col_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_v23_CPM.pb_vl_march13n_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_v23_CPM.pb_vl_march13n_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_1p_v23_DPM.pb_vl_march13n_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_v23_CPM.pb_vl_march13n_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_v23_CPM.pb_vl_march13n_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_march13n_2p_v23_DPM.pb_vl_march13n_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_v23_CPM.pb_vl_pmos_open_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_v23_CPM.pb_vl_pmos_open_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_1p_v23_DPM.pb_vl_pmos_open_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_v23_CPM.pb_vl_pmos_open_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_v23_CPM.pb_vl_pmos_open_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_pmos_open_2p_v23_DPM.pb_vl_pmos_open_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_v23_CPM.pb_vl_precharge_1p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_v23_CPM.pb_vl_precharge_1p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_1p_v23_DPM.pb_vl_precharge_1p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_v23_CPM.pb_vl_precharge_2p_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_v23_CPM.pb_vl_precharge_2p_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_precharge_2p_v23_DPM.pb_vl_precharge_2p_v23_DPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:Enter"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_v23_CPM.pb_vl_ptr_read_v23_CPM_st"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:EnterExit"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_v23_CPM.pb_vl_ptr_read_v23_CPM_end"; }
    }
    __Row {
        __ThreadAction = __Expression { __String = "Seq:SetRef"; }
        __PatternLabel = __Expression { __String = "pb_vl_ptr_read_v23_DPM.pb_vl_ptr_read_v23_DPM_st"; }
    }
}
